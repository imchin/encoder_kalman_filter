
encoder_kalman_filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006054  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080061f0  080061f0  000161f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006238  08006238  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006240  08006240  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006240  08006240  00016240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006244  08006244  00016244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08006248  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  200000a8  080062f0  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  080062f0  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de15  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c79  00000000  00000000  0002deed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  0002fb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  000307f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016046  00000000  00000000  000313f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d821  00000000  00000000  00047436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d728  00000000  00000000  00054c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e237f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f4  00000000  00000000  000e23d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000a8 	.word	0x200000a8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080061d4 	.word	0x080061d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000ac 	.word	0x200000ac
 80001d4:	080061d4 	.word	0x080061d4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e58:	f001 f968 	bl	800212c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5c:	f000 f83c 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e60:	f000 fa48 	bl	80012f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e64:	f000 fa1c 	bl	80012a0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e68:	f000 f93e 	bl	80010e8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000e6c:	f000 f89c 	bl	8000fa8 <MX_TIM1_Init>
  MX_TIM5_Init();
 8000e70:	f000 f98e 	bl	8001190 <MX_TIM5_Init>
  MX_TIM9_Init();
 8000e74:	f000 f9da 	bl	800122c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000e78:	213c      	movs	r1, #60	; 0x3c
 8000e7a:	4810      	ldr	r0, [pc, #64]	; (8000ebc <main+0x68>)
 8000e7c:	f002 fc1c 	bl	80036b8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000e80:	480f      	ldr	r0, [pc, #60]	; (8000ec0 <main+0x6c>)
 8000e82:	f002 fa07 	bl	8003294 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e86:	2100      	movs	r1, #0
 8000e88:	480e      	ldr	r0, [pc, #56]	; (8000ec4 <main+0x70>)
 8000e8a:	f002 fabf 	bl	800340c <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim9);
 8000e8e:	480e      	ldr	r0, [pc, #56]	; (8000ec8 <main+0x74>)
 8000e90:	f002 fa00 	bl	8003294 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Nowdegrees=GetRealdegrees();
 8000e94:	f000 fb00 	bl	8001498 <GetRealdegrees>
 8000e98:	eef0 7a40 	vmov.f32	s15, s0
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <main+0x78>)
 8000e9e:	edc3 7a00 	vstr	s15, [r3]
	  Nowrads=GetRealrads();
 8000ea2:	f000 fb39 	bl	8001518 <GetRealrads>
 8000ea6:	eef0 7a40 	vmov.f32	s15, s0
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <main+0x7c>)
 8000eac:	edc3 7a00 	vstr	s15, [r3]
	  Drivemotor(PWMm);
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <main+0x80>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 fe8d 	bl	8001bd4 <Drivemotor>
	  Nowdegrees=GetRealdegrees();
 8000eba:	e7eb      	b.n	8000e94 <main+0x40>
 8000ebc:	2000010c 	.word	0x2000010c
 8000ec0:	20000154 	.word	0x20000154
 8000ec4:	200000c4 	.word	0x200000c4
 8000ec8:	2000019c 	.word	0x2000019c
 8000ecc:	20000228 	.word	0x20000228
 8000ed0:	2000022c 	.word	0x2000022c
 8000ed4:	20000230 	.word	0x20000230

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b094      	sub	sp, #80	; 0x50
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 0320 	add.w	r3, r7, #32
 8000ee2:	2230      	movs	r2, #48	; 0x30
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f004 fa50 	bl	800538c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <SystemClock_Config+0xc8>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	4a26      	ldr	r2, [pc, #152]	; (8000fa0 <SystemClock_Config+0xc8>)
 8000f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <SystemClock_Config+0xc8>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <SystemClock_Config+0xcc>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a20      	ldr	r2, [pc, #128]	; (8000fa4 <SystemClock_Config+0xcc>)
 8000f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <SystemClock_Config+0xcc>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f34:	2302      	movs	r3, #2
 8000f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f40:	2302      	movs	r3, #2
 8000f42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f44:	2300      	movs	r3, #0
 8000f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000f4c:	2364      	movs	r3, #100	; 0x64
 8000f4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f54:	2304      	movs	r3, #4
 8000f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f58:	f107 0320 	add.w	r3, r7, #32
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 fcb1 	bl	80028c4 <HAL_RCC_OscConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f68:	f000 fedc 	bl	8001d24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f70:	2302      	movs	r3, #2
 8000f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	2103      	movs	r1, #3
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 ff13 	bl	8002db4 <HAL_RCC_ClockConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f94:	f000 fec6 	bl	8001d24 <Error_Handler>
  }
}
 8000f98:	bf00      	nop
 8000f9a:	3750      	adds	r7, #80	; 0x50
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40007000 	.word	0x40007000

08000fa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b096      	sub	sp, #88	; 0x58
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]
 8000fd6:	615a      	str	r2, [r3, #20]
 8000fd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2220      	movs	r2, #32
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f004 f9d3 	bl	800538c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fe6:	4b3e      	ldr	r3, [pc, #248]	; (80010e0 <MX_TIM1_Init+0x138>)
 8000fe8:	4a3e      	ldr	r2, [pc, #248]	; (80010e4 <MX_TIM1_Init+0x13c>)
 8000fea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8000fec:	4b3c      	ldr	r3, [pc, #240]	; (80010e0 <MX_TIM1_Init+0x138>)
 8000fee:	2263      	movs	r2, #99	; 0x63
 8000ff0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <MX_TIM1_Init+0x138>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000ff8:	4b39      	ldr	r3, [pc, #228]	; (80010e0 <MX_TIM1_Init+0x138>)
 8000ffa:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ffe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001000:	4b37      	ldr	r3, [pc, #220]	; (80010e0 <MX_TIM1_Init+0x138>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001006:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <MX_TIM1_Init+0x138>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100c:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <MX_TIM1_Init+0x138>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001012:	4833      	ldr	r0, [pc, #204]	; (80010e0 <MX_TIM1_Init+0x138>)
 8001014:	f002 f8ee 	bl	80031f4 <HAL_TIM_Base_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800101e:	f000 fe81 	bl	8001d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001026:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001028:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800102c:	4619      	mov	r1, r3
 800102e:	482c      	ldr	r0, [pc, #176]	; (80010e0 <MX_TIM1_Init+0x138>)
 8001030:	f002 fd9a 	bl	8003b68 <HAL_TIM_ConfigClockSource>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800103a:	f000 fe73 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800103e:	4828      	ldr	r0, [pc, #160]	; (80010e0 <MX_TIM1_Init+0x138>)
 8001040:	f002 f98a 	bl	8003358 <HAL_TIM_PWM_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800104a:	f000 fe6b 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001056:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800105a:	4619      	mov	r1, r3
 800105c:	4820      	ldr	r0, [pc, #128]	; (80010e0 <MX_TIM1_Init+0x138>)
 800105e:	f003 f93f 	bl	80042e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001068:	f000 fe5c 	bl	8001d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800106c:	2360      	movs	r3, #96	; 0x60
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001078:	2300      	movs	r3, #0
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108c:	2200      	movs	r2, #0
 800108e:	4619      	mov	r1, r3
 8001090:	4813      	ldr	r0, [pc, #76]	; (80010e0 <MX_TIM1_Init+0x138>)
 8001092:	f002 fca7 	bl	80039e4 <HAL_TIM_PWM_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800109c:	f000 fe42 	bl	8001d24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	4619      	mov	r1, r3
 80010c2:	4807      	ldr	r0, [pc, #28]	; (80010e0 <MX_TIM1_Init+0x138>)
 80010c4:	f003 f97a 	bl	80043bc <HAL_TIMEx_ConfigBreakDeadTime>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80010ce:	f000 fe29 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010d2:	4803      	ldr	r0, [pc, #12]	; (80010e0 <MX_TIM1_Init+0x138>)
 80010d4:	f000 ff06 	bl	8001ee4 <HAL_TIM_MspPostInit>

}
 80010d8:	bf00      	nop
 80010da:	3758      	adds	r7, #88	; 0x58
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200000c4 	.word	0x200000c4
 80010e4:	40010000 	.word	0x40010000

080010e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	2224      	movs	r2, #36	; 0x24
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f004 f948 	bl	800538c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <MX_TIM2_Init+0xa4>)
 8001106:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800110a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <MX_TIM2_Init+0xa4>)
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_TIM2_Init+0xa4>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2399;
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <MX_TIM2_Init+0xa4>)
 800111a:	f640 125f 	movw	r2, #2399	; 0x95f
 800111e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <MX_TIM2_Init+0xa4>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_TIM2_Init+0xa4>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800112c:	2303      	movs	r3, #3
 800112e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001130:	2302      	movs	r3, #2
 8001132:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001134:	2301      	movs	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800113c:	2302      	movs	r3, #2
 800113e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001140:	2302      	movs	r3, #2
 8001142:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001144:	2301      	movs	r3, #1
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 800114c:	2302      	movs	r3, #2
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	4619      	mov	r1, r3
 8001156:	480d      	ldr	r0, [pc, #52]	; (800118c <MX_TIM2_Init+0xa4>)
 8001158:	f002 fa08 	bl	800356c <HAL_TIM_Encoder_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001162:	f000 fddf 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	4619      	mov	r1, r3
 8001172:	4806      	ldr	r0, [pc, #24]	; (800118c <MX_TIM2_Init+0xa4>)
 8001174:	f003 f8b4 	bl	80042e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800117e:	f000 fdd1 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	3730      	adds	r7, #48	; 0x30
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2000010c 	.word	0x2000010c

08001190 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	463b      	mov	r3, r7
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <MX_TIM5_Init+0x94>)
 80011ae:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <MX_TIM5_Init+0x98>)
 80011b0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <MX_TIM5_Init+0x94>)
 80011b4:	2263      	movs	r2, #99	; 0x63
 80011b6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <MX_TIM5_Init+0x94>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_TIM5_Init+0x94>)
 80011c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011c4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_TIM5_Init+0x94>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_TIM5_Init+0x94>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011d2:	4814      	ldr	r0, [pc, #80]	; (8001224 <MX_TIM5_Init+0x94>)
 80011d4:	f002 f80e 	bl	80031f4 <HAL_TIM_Base_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80011de:	f000 fda1 	bl	8001d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	4619      	mov	r1, r3
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <MX_TIM5_Init+0x94>)
 80011f0:	f002 fcba 	bl	8003b68 <HAL_TIM_ConfigClockSource>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80011fa:	f000 fd93 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001206:	463b      	mov	r3, r7
 8001208:	4619      	mov	r1, r3
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <MX_TIM5_Init+0x94>)
 800120c:	f003 f868 	bl	80042e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001216:	f000 fd85 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000154 	.word	0x20000154
 8001228:	40000c00 	.word	0x40000c00

0800122c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	463b      	mov	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <MX_TIM9_Init+0x6c>)
 8001240:	4a16      	ldr	r2, [pc, #88]	; (800129c <MX_TIM9_Init+0x70>)
 8001242:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99;
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_TIM9_Init+0x6c>)
 8001246:	2263      	movs	r2, #99	; 0x63
 8001248:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <MX_TIM9_Init+0x6c>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_TIM9_Init+0x6c>)
 8001252:	f242 720f 	movw	r2, #9999	; 0x270f
 8001256:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_TIM9_Init+0x6c>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MX_TIM9_Init+0x6c>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <MX_TIM9_Init+0x6c>)
 8001266:	f001 ffc5 	bl	80031f4 <HAL_TIM_Base_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001270:	f000 fd58 	bl	8001d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001278:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_TIM9_Init+0x6c>)
 8001280:	f002 fc72 	bl	8003b68 <HAL_TIM_ConfigClockSource>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800128a:	f000 fd4b 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000019c 	.word	0x2000019c
 800129c:	40014000 	.word	0x40014000

080012a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <MX_USART2_UART_Init+0x50>)
 80012a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012d8:	f003 f8d6 	bl	8004488 <HAL_UART_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012e2:	f000 fd1f 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200001e4 	.word	0x200001e4
 80012f0:	40004400 	.word	0x40004400

080012f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b43      	ldr	r3, [pc, #268]	; (800141c <MX_GPIO_Init+0x128>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a42      	ldr	r2, [pc, #264]	; (800141c <MX_GPIO_Init+0x128>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b40      	ldr	r3, [pc, #256]	; (800141c <MX_GPIO_Init+0x128>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b3c      	ldr	r3, [pc, #240]	; (800141c <MX_GPIO_Init+0x128>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a3b      	ldr	r2, [pc, #236]	; (800141c <MX_GPIO_Init+0x128>)
 8001330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b39      	ldr	r3, [pc, #228]	; (800141c <MX_GPIO_Init+0x128>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	4b35      	ldr	r3, [pc, #212]	; (800141c <MX_GPIO_Init+0x128>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a34      	ldr	r2, [pc, #208]	; (800141c <MX_GPIO_Init+0x128>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b32      	ldr	r3, [pc, #200]	; (800141c <MX_GPIO_Init+0x128>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b2e      	ldr	r3, [pc, #184]	; (800141c <MX_GPIO_Init+0x128>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a2d      	ldr	r2, [pc, #180]	; (800141c <MX_GPIO_Init+0x128>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b2b      	ldr	r3, [pc, #172]	; (800141c <MX_GPIO_Init+0x128>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001380:	4827      	ldr	r0, [pc, #156]	; (8001420 <MX_GPIO_Init+0x12c>)
 8001382:	f001 fa6d 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	4826      	ldr	r0, [pc, #152]	; (8001424 <MX_GPIO_Init+0x130>)
 800138c:	f001 fa68 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001396:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	481f      	ldr	r0, [pc, #124]	; (8001424 <MX_GPIO_Init+0x130>)
 80013a8:	f001 f8d6 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013ac:	2320      	movs	r3, #32
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	4817      	ldr	r0, [pc, #92]	; (8001420 <MX_GPIO_Init+0x12c>)
 80013c4:	f001 f8c8 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013cc:	2311      	movs	r3, #17
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4811      	ldr	r0, [pc, #68]	; (8001424 <MX_GPIO_Init+0x130>)
 80013e0:	f001 f8ba 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013ea:	2311      	movs	r3, #17
 80013ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	4808      	ldr	r0, [pc, #32]	; (8001420 <MX_GPIO_Init+0x12c>)
 80013fe:	f001 f8ab 	bl	8002558 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	2028      	movs	r0, #40	; 0x28
 8001408:	f000 ffdd 	bl	80023c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800140c:	2028      	movs	r0, #40	; 0x28
 800140e:	f000 fff6 	bl	80023fe <HAL_NVIC_EnableIRQ>

}
 8001412:	bf00      	nop
 8001414:	3728      	adds	r7, #40	; 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40020000 	.word	0x40020000
 8001424:	40020800 	.word	0x40020800

08001428 <Unwrap>:

int diffen=0;
uint16_t ennow=0;
uint16_t enpre=0;
int roundOfencoder=0;
void Unwrap(){
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
	ennow=htim2.Instance->CNT;
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <Unwrap+0x5c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <Unwrap+0x60>)
 8001436:	801a      	strh	r2, [r3, #0]
	diffen=ennow-enpre;
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <Unwrap+0x60>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <Unwrap+0x64>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	4a12      	ldr	r2, [pc, #72]	; (8001490 <Unwrap+0x68>)
 8001446:	6013      	str	r3, [r2, #0]
	if(diffen>1200){
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <Unwrap+0x68>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001450:	dd05      	ble.n	800145e <Unwrap+0x36>
		roundOfencoder=roundOfencoder-1;
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <Unwrap+0x6c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3b01      	subs	r3, #1
 8001458:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <Unwrap+0x6c>)
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	e009      	b.n	8001472 <Unwrap+0x4a>
	}else if (-diffen>1200) {
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <Unwrap+0x68>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
 8001466:	da04      	bge.n	8001472 <Unwrap+0x4a>
		roundOfencoder=roundOfencoder+1;
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <Unwrap+0x6c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	4a09      	ldr	r2, [pc, #36]	; (8001494 <Unwrap+0x6c>)
 8001470:	6013      	str	r3, [r2, #0]
	}
	enpre=ennow;
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <Unwrap+0x60>)
 8001474:	881a      	ldrh	r2, [r3, #0]
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <Unwrap+0x64>)
 8001478:	801a      	strh	r2, [r3, #0]
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	2000010c 	.word	0x2000010c
 8001488:	20000238 	.word	0x20000238
 800148c:	2000023a 	.word	0x2000023a
 8001490:	20000234 	.word	0x20000234
 8001494:	2000023c 	.word	0x2000023c

08001498 <GetRealdegrees>:
float GetRealdegrees(){
 8001498:	b5b0      	push	{r4, r5, r7, lr}
 800149a:	af00      	add	r7, sp, #0

	return (roundOfencoder*360)+ ((htim2.Instance->CNT*360.00)/2399.00);
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <GetRealdegrees+0x70>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80014a4:	fb02 f303 	mul.w	r3, r2, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe ffe7 	bl	800047c <__aeabi_i2d>
 80014ae:	4604      	mov	r4, r0
 80014b0:	460d      	mov	r5, r1
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <GetRealdegrees+0x74>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ffcf 	bl	800045c <__aeabi_ui2d>
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <GetRealdegrees+0x78>)
 80014c4:	f7ff f844 	bl	8000550 <__aeabi_dmul>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	a30b      	add	r3, pc, #44	; (adr r3, 8001500 <GetRealdegrees+0x68>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7ff f965 	bl	80007a4 <__aeabi_ddiv>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4620      	mov	r0, r4
 80014e0:	4629      	mov	r1, r5
 80014e2:	f7fe fe7f 	bl	80001e4 <__adddf3>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff fadf 	bl	8000ab0 <__aeabi_d2f>
 80014f2:	4603      	mov	r3, r0
 80014f4:	ee07 3a90 	vmov	s15, r3
}
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	bdb0      	pop	{r4, r5, r7, pc}
 80014fe:	bf00      	nop
 8001500:	00000000 	.word	0x00000000
 8001504:	40a2be00 	.word	0x40a2be00
 8001508:	2000023c 	.word	0x2000023c
 800150c:	2000010c 	.word	0x2000010c
 8001510:	40768000 	.word	0x40768000
 8001514:	00000000 	.word	0x00000000

08001518 <GetRealrads>:
float GetRealrads(){
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	af00      	add	r7, sp, #0
	return (roundOfencoder*2*3.1415926535897932384626)+( (htim2.Instance->CNT*2*3.1415926535897932384626)/2399.00);
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <GetRealrads+0x80>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe ffaa 	bl	800047c <__aeabi_i2d>
 8001528:	a317      	add	r3, pc, #92	; (adr r3, 8001588 <GetRealrads+0x70>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f7ff f80f 	bl	8000550 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4614      	mov	r4, r2
 8001538:	461d      	mov	r5, r3
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <GetRealrads+0x84>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe ff8a 	bl	800045c <__aeabi_ui2d>
 8001548:	a30f      	add	r3, pc, #60	; (adr r3, 8001588 <GetRealrads+0x70>)
 800154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154e:	f7fe ffff 	bl	8000550 <__aeabi_dmul>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	a30d      	add	r3, pc, #52	; (adr r3, 8001590 <GetRealrads+0x78>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7ff f920 	bl	80007a4 <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4620      	mov	r0, r4
 800156a:	4629      	mov	r1, r5
 800156c:	f7fe fe3a 	bl	80001e4 <__adddf3>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff fa9a 	bl	8000ab0 <__aeabi_d2f>
 800157c:	4603      	mov	r3, r0
 800157e:	ee07 3a90 	vmov	s15, r3
}
 8001582:	eeb0 0a67 	vmov.f32	s0, s15
 8001586:	bdb0      	pop	{r4, r5, r7, pc}
 8001588:	54442d18 	.word	0x54442d18
 800158c:	400921fb 	.word	0x400921fb
 8001590:	00000000 	.word	0x00000000
 8001594:	40a2be00 	.word	0x40a2be00
 8001598:	2000023c 	.word	0x2000023c
 800159c:	2000010c 	.word	0x2000010c

080015a0 <Kalman>:
double gg=10;
double rr=0.1;

double ThetaPredict=0;
double OmegaPredict=0;
void Kalman(){
 80015a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a4:	af00      	add	r7, sp, #0

	G=pow(gg,2);
 80015a6:	4bc2      	ldr	r3, [pc, #776]	; (80018b0 <Kalman+0x310>)
 80015a8:	ed93 7b00 	vldr	d7, [r3]
 80015ac:	ed9f 1bba 	vldr	d1, [pc, #744]	; 8001898 <Kalman+0x2f8>
 80015b0:	eeb0 0a47 	vmov.f32	s0, s14
 80015b4:	eef0 0a67 	vmov.f32	s1, s15
 80015b8:	f003 fef0 	bl	800539c <pow>
 80015bc:	eeb0 7a40 	vmov.f32	s14, s0
 80015c0:	eef0 7a60 	vmov.f32	s15, s1
 80015c4:	4bbb      	ldr	r3, [pc, #748]	; (80018b4 <Kalman+0x314>)
 80015c6:	ed83 7b00 	vstr	d7, [r3]
	R=pow(rr,2);
 80015ca:	4bbb      	ldr	r3, [pc, #748]	; (80018b8 <Kalman+0x318>)
 80015cc:	ed93 7b00 	vldr	d7, [r3]
 80015d0:	ed9f 1bb1 	vldr	d1, [pc, #708]	; 8001898 <Kalman+0x2f8>
 80015d4:	eeb0 0a47 	vmov.f32	s0, s14
 80015d8:	eef0 0a67 	vmov.f32	s1, s15
 80015dc:	f003 fede 	bl	800539c <pow>
 80015e0:	eeb0 7a40 	vmov.f32	s14, s0
 80015e4:	eef0 7a60 	vmov.f32	s15, s1
 80015e8:	4bb4      	ldr	r3, [pc, #720]	; (80018bc <Kalman+0x31c>)
 80015ea:	ed83 7b00 	vstr	d7, [r3]
	StateTheta= ThetaPre  + (OmegaPre * t);
 80015ee:	4bb4      	ldr	r3, [pc, #720]	; (80018c0 <Kalman+0x320>)
 80015f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f4:	4bb3      	ldr	r3, [pc, #716]	; (80018c4 <Kalman+0x324>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7fe ffa9 	bl	8000550 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	4bb0      	ldr	r3, [pc, #704]	; (80018c8 <Kalman+0x328>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7fe fdea 	bl	80001e4 <__adddf3>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	49ad      	ldr	r1, [pc, #692]	; (80018cc <Kalman+0x32c>)
 8001616:	e9c1 2300 	strd	r2, r3, [r1]
	StateOmega= OmegaPre;
 800161a:	4ba9      	ldr	r3, [pc, #676]	; (80018c0 <Kalman+0x320>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	49ab      	ldr	r1, [pc, #684]	; (80018d0 <Kalman+0x330>)
 8001622:	e9c1 2300 	strd	r2, r3, [r1]
	YTheta_telda = GetRealrads() - ThetaPre;
 8001626:	f7ff ff77 	bl	8001518 <GetRealrads>
 800162a:	ee10 3a10 	vmov	r3, s0
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ff36 	bl	80004a0 <__aeabi_f2d>
 8001634:	4ba4      	ldr	r3, [pc, #656]	; (80018c8 <Kalman+0x328>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7fe fdd1 	bl	80001e0 <__aeabi_dsub>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	49a4      	ldr	r1, [pc, #656]	; (80018d4 <Kalman+0x334>)
 8001644:	e9c1 2300 	strd	r2, r3, [r1]
	CP11= CPpre11 + (CPpre12 * t) + (CPpre22*pow(t,2)) + (CPpre21*t) + (  (G*pow(t,4)/4 )   );
 8001648:	4ba3      	ldr	r3, [pc, #652]	; (80018d8 <Kalman+0x338>)
 800164a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800164e:	4b9d      	ldr	r3, [pc, #628]	; (80018c4 <Kalman+0x324>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7fe ff7c 	bl	8000550 <__aeabi_dmul>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	4b9e      	ldr	r3, [pc, #632]	; (80018dc <Kalman+0x33c>)
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	f7fe fdbd 	bl	80001e4 <__adddf3>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4692      	mov	sl, r2
 8001670:	469b      	mov	fp, r3
 8001672:	4b94      	ldr	r3, [pc, #592]	; (80018c4 <Kalman+0x324>)
 8001674:	ed93 7b00 	vldr	d7, [r3]
 8001678:	ed9f 1b87 	vldr	d1, [pc, #540]	; 8001898 <Kalman+0x2f8>
 800167c:	eeb0 0a47 	vmov.f32	s0, s14
 8001680:	eef0 0a67 	vmov.f32	s1, s15
 8001684:	f003 fe8a 	bl	800539c <pow>
 8001688:	ec51 0b10 	vmov	r0, r1, d0
 800168c:	4b94      	ldr	r3, [pc, #592]	; (80018e0 <Kalman+0x340>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f7fe ff5d 	bl	8000550 <__aeabi_dmul>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4650      	mov	r0, sl
 800169c:	4659      	mov	r1, fp
 800169e:	f7fe fda1 	bl	80001e4 <__adddf3>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4692      	mov	sl, r2
 80016a8:	469b      	mov	fp, r3
 80016aa:	4b8e      	ldr	r3, [pc, #568]	; (80018e4 <Kalman+0x344>)
 80016ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b0:	4b84      	ldr	r3, [pc, #528]	; (80018c4 <Kalman+0x324>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ff4b 	bl	8000550 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4650      	mov	r0, sl
 80016c0:	4659      	mov	r1, fp
 80016c2:	f7fe fd8f 	bl	80001e4 <__adddf3>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4692      	mov	sl, r2
 80016cc:	469b      	mov	fp, r3
 80016ce:	4b7d      	ldr	r3, [pc, #500]	; (80018c4 <Kalman+0x324>)
 80016d0:	ed93 7b00 	vldr	d7, [r3]
 80016d4:	ed9f 1b72 	vldr	d1, [pc, #456]	; 80018a0 <Kalman+0x300>
 80016d8:	eeb0 0a47 	vmov.f32	s0, s14
 80016dc:	eef0 0a67 	vmov.f32	s1, s15
 80016e0:	f003 fe5c 	bl	800539c <pow>
 80016e4:	ec51 0b10 	vmov	r0, r1, d0
 80016e8:	4b72      	ldr	r3, [pc, #456]	; (80018b4 <Kalman+0x314>)
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	f7fe ff2f 	bl	8000550 <__aeabi_dmul>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	4b7a      	ldr	r3, [pc, #488]	; (80018e8 <Kalman+0x348>)
 8001700:	f7ff f850 	bl	80007a4 <__aeabi_ddiv>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4650      	mov	r0, sl
 800170a:	4659      	mov	r1, fp
 800170c:	f7fe fd6a 	bl	80001e4 <__adddf3>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4975      	ldr	r1, [pc, #468]	; (80018ec <Kalman+0x34c>)
 8001716:	e9c1 2300 	strd	r2, r3, [r1]

	CP12 = CPpre12 + (CPpre22*t) +(  (G*pow(t,3)/2 )   );
 800171a:	4b71      	ldr	r3, [pc, #452]	; (80018e0 <Kalman+0x340>)
 800171c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001720:	4b68      	ldr	r3, [pc, #416]	; (80018c4 <Kalman+0x324>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	f7fe ff13 	bl	8000550 <__aeabi_dmul>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	4b69      	ldr	r3, [pc, #420]	; (80018d8 <Kalman+0x338>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	f7fe fd54 	bl	80001e4 <__adddf3>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4692      	mov	sl, r2
 8001742:	469b      	mov	fp, r3
 8001744:	4b5f      	ldr	r3, [pc, #380]	; (80018c4 <Kalman+0x324>)
 8001746:	ed93 7b00 	vldr	d7, [r3]
 800174a:	ed9f 1b57 	vldr	d1, [pc, #348]	; 80018a8 <Kalman+0x308>
 800174e:	eeb0 0a47 	vmov.f32	s0, s14
 8001752:	eef0 0a67 	vmov.f32	s1, s15
 8001756:	f003 fe21 	bl	800539c <pow>
 800175a:	ec51 0b10 	vmov	r0, r1, d0
 800175e:	4b55      	ldr	r3, [pc, #340]	; (80018b4 <Kalman+0x314>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7fe fef4 	bl	8000550 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001778:	f7ff f814 	bl	80007a4 <__aeabi_ddiv>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4650      	mov	r0, sl
 8001782:	4659      	mov	r1, fp
 8001784:	f7fe fd2e 	bl	80001e4 <__adddf3>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4958      	ldr	r1, [pc, #352]	; (80018f0 <Kalman+0x350>)
 800178e:	e9c1 2300 	strd	r2, r3, [r1]

	CP21 = (  (G*pow(t,3)/2 )   ) + (CPpre22*t) + CPpre21;
 8001792:	4b4c      	ldr	r3, [pc, #304]	; (80018c4 <Kalman+0x324>)
 8001794:	ed93 7b00 	vldr	d7, [r3]
 8001798:	ed9f 1b43 	vldr	d1, [pc, #268]	; 80018a8 <Kalman+0x308>
 800179c:	eeb0 0a47 	vmov.f32	s0, s14
 80017a0:	eef0 0a67 	vmov.f32	s1, s15
 80017a4:	f003 fdfa 	bl	800539c <pow>
 80017a8:	ec51 0b10 	vmov	r0, r1, d0
 80017ac:	4b41      	ldr	r3, [pc, #260]	; (80018b4 <Kalman+0x314>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	f7fe fecd 	bl	8000550 <__aeabi_dmul>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017c6:	f7fe ffed 	bl	80007a4 <__aeabi_ddiv>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4692      	mov	sl, r2
 80017d0:	469b      	mov	fp, r3
 80017d2:	4b43      	ldr	r3, [pc, #268]	; (80018e0 <Kalman+0x340>)
 80017d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017d8:	4b3a      	ldr	r3, [pc, #232]	; (80018c4 <Kalman+0x324>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7fe feb7 	bl	8000550 <__aeabi_dmul>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4650      	mov	r0, sl
 80017e8:	4659      	mov	r1, fp
 80017ea:	f7fe fcfb 	bl	80001e4 <__adddf3>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <Kalman+0x344>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	f7fe fcf2 	bl	80001e4 <__adddf3>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	493b      	ldr	r1, [pc, #236]	; (80018f4 <Kalman+0x354>)
 8001806:	e9c1 2300 	strd	r2, r3, [r1]

	CP22 = CPpre22 + (G*pow(t,2));
 800180a:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <Kalman+0x324>)
 800180c:	ed93 7b00 	vldr	d7, [r3]
 8001810:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001898 <Kalman+0x2f8>
 8001814:	eeb0 0a47 	vmov.f32	s0, s14
 8001818:	eef0 0a67 	vmov.f32	s1, s15
 800181c:	f003 fdbe 	bl	800539c <pow>
 8001820:	ec51 0b10 	vmov	r0, r1, d0
 8001824:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <Kalman+0x314>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f7fe fe91 	bl	8000550 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <Kalman+0x340>)
 8001838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183c:	f7fe fcd2 	bl	80001e4 <__adddf3>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	492c      	ldr	r1, [pc, #176]	; (80018f8 <Kalman+0x358>)
 8001846:	e9c1 2300 	strd	r2, r3, [r1]

	K11= CP11/(CP11+R);
 800184a:	4b28      	ldr	r3, [pc, #160]	; (80018ec <Kalman+0x34c>)
 800184c:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001850:	4b26      	ldr	r3, [pc, #152]	; (80018ec <Kalman+0x34c>)
 8001852:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <Kalman+0x31c>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe fcc2 	bl	80001e4 <__adddf3>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4650      	mov	r0, sl
 8001866:	4659      	mov	r1, fp
 8001868:	f7fe ff9c 	bl	80007a4 <__aeabi_ddiv>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4922      	ldr	r1, [pc, #136]	; (80018fc <Kalman+0x35c>)
 8001872:	e9c1 2300 	strd	r2, r3, [r1]
	K21=CP21/(CP11+R);
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <Kalman+0x354>)
 8001878:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <Kalman+0x34c>)
 800187e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <Kalman+0x31c>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe fcac 	bl	80001e4 <__adddf3>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4650      	mov	r0, sl
 8001892:	4659      	mov	r1, fp
 8001894:	e034      	b.n	8001900 <Kalman+0x360>
 8001896:	bf00      	nop
 8001898:	00000000 	.word	0x00000000
 800189c:	40000000 	.word	0x40000000
 80018a0:	00000000 	.word	0x00000000
 80018a4:	40100000 	.word	0x40100000
 80018a8:	00000000 	.word	0x00000000
 80018ac:	40080000 	.word	0x40080000
 80018b0:	20000028 	.word	0x20000028
 80018b4:	20000018 	.word	0x20000018
 80018b8:	20000030 	.word	0x20000030
 80018bc:	20000020 	.word	0x20000020
 80018c0:	20000258 	.word	0x20000258
 80018c4:	20000010 	.word	0x20000010
 80018c8:	20000250 	.word	0x20000250
 80018cc:	20000240 	.word	0x20000240
 80018d0:	20000248 	.word	0x20000248
 80018d4:	20000260 	.word	0x20000260
 80018d8:	20000290 	.word	0x20000290
 80018dc:	20000288 	.word	0x20000288
 80018e0:	200002a0 	.word	0x200002a0
 80018e4:	20000298 	.word	0x20000298
 80018e8:	40100000 	.word	0x40100000
 80018ec:	20000268 	.word	0x20000268
 80018f0:	20000270 	.word	0x20000270
 80018f4:	20000278 	.word	0x20000278
 80018f8:	20000280 	.word	0x20000280
 80018fc:	200002a8 	.word	0x200002a8
 8001900:	f7fe ff50 	bl	80007a4 <__aeabi_ddiv>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4971      	ldr	r1, [pc, #452]	; (8001ad0 <Kalman+0x530>)
 800190a:	e9c1 2300 	strd	r2, r3, [r1]

	ThetaPredict= StateTheta + (YTheta_telda*K11);
 800190e:	4b71      	ldr	r3, [pc, #452]	; (8001ad4 <Kalman+0x534>)
 8001910:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001914:	4b70      	ldr	r3, [pc, #448]	; (8001ad8 <Kalman+0x538>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	f7fe fe19 	bl	8000550 <__aeabi_dmul>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	4b6d      	ldr	r3, [pc, #436]	; (8001adc <Kalman+0x53c>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fc5a 	bl	80001e4 <__adddf3>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	496a      	ldr	r1, [pc, #424]	; (8001ae0 <Kalman+0x540>)
 8001936:	e9c1 2300 	strd	r2, r3, [r1]
	OmegaPredict= StateOmega + (YTheta_telda*K21);
 800193a:	4b66      	ldr	r3, [pc, #408]	; (8001ad4 <Kalman+0x534>)
 800193c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001940:	4b63      	ldr	r3, [pc, #396]	; (8001ad0 <Kalman+0x530>)
 8001942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001946:	f7fe fe03 	bl	8000550 <__aeabi_dmul>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	4b64      	ldr	r3, [pc, #400]	; (8001ae4 <Kalman+0x544>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7fe fc44 	bl	80001e4 <__adddf3>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4961      	ldr	r1, [pc, #388]	; (8001ae8 <Kalman+0x548>)
 8001962:	e9c1 2300 	strd	r2, r3, [r1]

	CPpre11= -1*(  (CP11/(CP11+R) ) -1)*CP11;
 8001966:	4b61      	ldr	r3, [pc, #388]	; (8001aec <Kalman+0x54c>)
 8001968:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800196c:	4b5f      	ldr	r3, [pc, #380]	; (8001aec <Kalman+0x54c>)
 800196e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001972:	4b5f      	ldr	r3, [pc, #380]	; (8001af0 <Kalman+0x550>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fc34 	bl	80001e4 <__adddf3>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4650      	mov	r0, sl
 8001982:	4659      	mov	r1, fp
 8001984:	f7fe ff0e 	bl	80007a4 <__aeabi_ddiv>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	4b57      	ldr	r3, [pc, #348]	; (8001af4 <Kalman+0x554>)
 8001996:	f7fe fc23 	bl	80001e0 <__aeabi_dsub>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4690      	mov	r8, r2
 80019a0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80019a4:	4b51      	ldr	r3, [pc, #324]	; (8001aec <Kalman+0x54c>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	4640      	mov	r0, r8
 80019ac:	4649      	mov	r1, r9
 80019ae:	f7fe fdcf 	bl	8000550 <__aeabi_dmul>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4950      	ldr	r1, [pc, #320]	; (8001af8 <Kalman+0x558>)
 80019b8:	e9c1 2300 	strd	r2, r3, [r1]
	CPpre12= -1*(  (CP11/(CP11+R) ) -1)* CP12;
 80019bc:	4b4b      	ldr	r3, [pc, #300]	; (8001aec <Kalman+0x54c>)
 80019be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80019c2:	4b4a      	ldr	r3, [pc, #296]	; (8001aec <Kalman+0x54c>)
 80019c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019c8:	4b49      	ldr	r3, [pc, #292]	; (8001af0 <Kalman+0x550>)
 80019ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ce:	f7fe fc09 	bl	80001e4 <__adddf3>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4640      	mov	r0, r8
 80019d8:	4649      	mov	r1, r9
 80019da:	f7fe fee3 	bl	80007a4 <__aeabi_ddiv>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <Kalman+0x554>)
 80019ec:	f7fe fbf8 	bl	80001e0 <__aeabi_dsub>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4614      	mov	r4, r2
 80019f6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80019fa:	4b40      	ldr	r3, [pc, #256]	; (8001afc <Kalman+0x55c>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	4620      	mov	r0, r4
 8001a02:	4629      	mov	r1, r5
 8001a04:	f7fe fda4 	bl	8000550 <__aeabi_dmul>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	493c      	ldr	r1, [pc, #240]	; (8001b00 <Kalman+0x560>)
 8001a0e:	e9c1 2300 	strd	r2, r3, [r1]
	CPpre21= CP21 - (  (CP21*CP11)/(CP11+R)    );
 8001a12:	4b3c      	ldr	r3, [pc, #240]	; (8001b04 <Kalman+0x564>)
 8001a14:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a18:	4b3a      	ldr	r3, [pc, #232]	; (8001b04 <Kalman+0x564>)
 8001a1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a1e:	4b33      	ldr	r3, [pc, #204]	; (8001aec <Kalman+0x54c>)
 8001a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a24:	f7fe fd94 	bl	8000550 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4690      	mov	r8, r2
 8001a2e:	4699      	mov	r9, r3
 8001a30:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <Kalman+0x54c>)
 8001a32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a36:	4b2e      	ldr	r3, [pc, #184]	; (8001af0 <Kalman+0x550>)
 8001a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3c:	f7fe fbd2 	bl	80001e4 <__adddf3>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4640      	mov	r0, r8
 8001a46:	4649      	mov	r1, r9
 8001a48:	f7fe feac 	bl	80007a4 <__aeabi_ddiv>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4620      	mov	r0, r4
 8001a52:	4629      	mov	r1, r5
 8001a54:	f7fe fbc4 	bl	80001e0 <__aeabi_dsub>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	492a      	ldr	r1, [pc, #168]	; (8001b08 <Kalman+0x568>)
 8001a5e:	e9c1 2300 	strd	r2, r3, [r1]

	CPpre22= CP22 -  (  (CP12*CP21)/(CP11+R)    );
 8001a62:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <Kalman+0x56c>)
 8001a64:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a68:	4b24      	ldr	r3, [pc, #144]	; (8001afc <Kalman+0x55c>)
 8001a6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a6e:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <Kalman+0x564>)
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	f7fe fd6c 	bl	8000550 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4690      	mov	r8, r2
 8001a7e:	4699      	mov	r9, r3
 8001a80:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <Kalman+0x54c>)
 8001a82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <Kalman+0x550>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	f7fe fbaa 	bl	80001e4 <__adddf3>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4640      	mov	r0, r8
 8001a96:	4649      	mov	r1, r9
 8001a98:	f7fe fe84 	bl	80007a4 <__aeabi_ddiv>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	f7fe fb9c 	bl	80001e0 <__aeabi_dsub>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4918      	ldr	r1, [pc, #96]	; (8001b10 <Kalman+0x570>)
 8001aae:	e9c1 2300 	strd	r2, r3, [r1]

	//update value
	ThetaPre=ThetaPredict;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <Kalman+0x540>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	4916      	ldr	r1, [pc, #88]	; (8001b14 <Kalman+0x574>)
 8001aba:	e9c1 2300 	strd	r2, r3, [r1]
	OmegaPre=OmegaPredict;
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <Kalman+0x548>)
 8001ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac4:	4914      	ldr	r1, [pc, #80]	; (8001b18 <Kalman+0x578>)
 8001ac6:	e9c1 2300 	strd	r2, r3, [r1]


}
 8001aca:	bf00      	nop
 8001acc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ad0:	200002b0 	.word	0x200002b0
 8001ad4:	20000260 	.word	0x20000260
 8001ad8:	200002a8 	.word	0x200002a8
 8001adc:	20000240 	.word	0x20000240
 8001ae0:	200002b8 	.word	0x200002b8
 8001ae4:	20000248 	.word	0x20000248
 8001ae8:	200002c0 	.word	0x200002c0
 8001aec:	20000268 	.word	0x20000268
 8001af0:	20000020 	.word	0x20000020
 8001af4:	3ff00000 	.word	0x3ff00000
 8001af8:	20000288 	.word	0x20000288
 8001afc:	20000270 	.word	0x20000270
 8001b00:	20000290 	.word	0x20000290
 8001b04:	20000278 	.word	0x20000278
 8001b08:	20000298 	.word	0x20000298
 8001b0c:	20000280 	.word	0x20000280
 8001b10:	200002a0 	.word	0x200002a0
 8001b14:	20000250 	.word	0x20000250
 8001b18:	20000258 	.word	0x20000258

08001b1c <HAL_TIM_PeriodElapsedCallback>:
//timer interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	if (htim == &htim5){
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d104      	bne.n	8001b36 <HAL_TIM_PeriodElapsedCallback+0x1a>
		Unwrap();
 8001b2c:	f7ff fc7c 	bl	8001428 <Unwrap>
		Kalman();
 8001b30:	f7ff fd36 	bl	80015a0 <Kalman>
	}else if(htim == &htim9){
		sendUartToROS2();
	}
}
 8001b34:	e005      	b.n	8001b42 <HAL_TIM_PeriodElapsedCallback+0x26>
	}else if(htim == &htim9){
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d101      	bne.n	8001b42 <HAL_TIM_PeriodElapsedCallback+0x26>
		sendUartToROS2();
 8001b3e:	f000 f8b9 	bl	8001cb4 <sendUartToROS2>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000154 	.word	0x20000154
 8001b50:	2000019c 	.word	0x2000019c

08001b54 <togle>:

//togle motor start stop
void togle(){
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
	static uint8_t t=0;
	if(t==0){
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <togle+0x34>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d107      	bne.n	8001b70 <togle+0x1c>
		t=1;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <togle+0x34>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
		PWMm=PWM;
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <togle+0x38>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a09      	ldr	r2, [pc, #36]	; (8001b90 <togle+0x3c>)
 8001b6c:	6013      	str	r3, [r2, #0]
	}else{
		t=0;
		PWMm=0;
	}

}
 8001b6e:	e005      	b.n	8001b7c <togle+0x28>
		t=0;
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <togle+0x34>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
		PWMm=0;
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <togle+0x3c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	200002ca 	.word	0x200002ca
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000230 	.word	0x20000230

08001b94 <HAL_GPIO_EXTI_Callback>:

//exit callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_13){
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba4:	d101      	bne.n	8001baa <HAL_GPIO_EXTI_Callback+0x16>
		togle();
 8001ba6:	f7ff ffd5 	bl	8001b54 <togle>
	}
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <aaabs>:


uint32_t aaabs(int x){
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]

	if(x<0){
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	da02      	bge.n	8001bc6 <aaabs+0x14>
		return x*-1;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	425b      	negs	r3, r3
 8001bc4:	e000      	b.n	8001bc8 <aaabs+0x16>
	}else{
		return x;
 8001bc6:	687b      	ldr	r3, [r7, #4]
	}
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <Drivemotor>:



//drive motor
void Drivemotor(int PWM){
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	if(PWM<=0 && PWM>=-10000){
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	dc16      	bgt.n	8001c10 <Drivemotor+0x3c>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a2f      	ldr	r2, [pc, #188]	; (8001ca4 <Drivemotor+0xd0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	db12      	blt.n	8001c10 <Drivemotor+0x3c>
		htim1.Instance->CCR1=aaabs(PWM);
 8001bea:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <Drivemotor+0xd4>)
 8001bec:	681c      	ldr	r4, [r3, #0]
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ffdf 	bl	8001bb2 <aaabs>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bfe:	482b      	ldr	r0, [pc, #172]	; (8001cac <Drivemotor+0xd8>)
 8001c00:	f000 fe2e 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	4829      	ldr	r0, [pc, #164]	; (8001cb0 <Drivemotor+0xdc>)
 8001c0a:	f000 fe29 	bl	8002860 <HAL_GPIO_WritePin>
 8001c0e:	e045      	b.n	8001c9c <Drivemotor+0xc8>
	}else if (PWM<-10000){
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a24      	ldr	r2, [pc, #144]	; (8001ca4 <Drivemotor+0xd0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	da10      	bge.n	8001c3a <Drivemotor+0x66>
		htim1.Instance->CCR1=10000;
 8001c18:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <Drivemotor+0xd4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c20:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8001c22:	2201      	movs	r2, #1
 8001c24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c28:	4820      	ldr	r0, [pc, #128]	; (8001cac <Drivemotor+0xd8>)
 8001c2a:	f000 fe19 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	481f      	ldr	r0, [pc, #124]	; (8001cb0 <Drivemotor+0xdc>)
 8001c34:	f000 fe14 	bl	8002860 <HAL_GPIO_WritePin>
		htim1.Instance->CCR1=10000;
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,1);
	}

}
 8001c38:	e030      	b.n	8001c9c <Drivemotor+0xc8>
	}else if(PWM>=0 && PWM<=10000){
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db17      	blt.n	8001c70 <Drivemotor+0x9c>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c46:	4293      	cmp	r3, r2
 8001c48:	dc12      	bgt.n	8001c70 <Drivemotor+0x9c>
		htim1.Instance->CCR1=aaabs(PWM);
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <Drivemotor+0xd4>)
 8001c4c:	681c      	ldr	r4, [r3, #0]
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ffaf 	bl	8001bb2 <aaabs>
 8001c54:	4603      	mov	r3, r0
 8001c56:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c5e:	4813      	ldr	r0, [pc, #76]	; (8001cac <Drivemotor+0xd8>)
 8001c60:	f000 fdfe 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,1);
 8001c64:	2201      	movs	r2, #1
 8001c66:	2180      	movs	r1, #128	; 0x80
 8001c68:	4811      	ldr	r0, [pc, #68]	; (8001cb0 <Drivemotor+0xdc>)
 8001c6a:	f000 fdf9 	bl	8002860 <HAL_GPIO_WritePin>
 8001c6e:	e015      	b.n	8001c9c <Drivemotor+0xc8>
	}else if(PWM>10000){
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c76:	4293      	cmp	r3, r2
 8001c78:	dd10      	ble.n	8001c9c <Drivemotor+0xc8>
		htim1.Instance->CCR1=10000;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <Drivemotor+0xd4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c82:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c8a:	4808      	ldr	r0, [pc, #32]	; (8001cac <Drivemotor+0xd8>)
 8001c8c:	f000 fde8 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,1);
 8001c90:	2201      	movs	r2, #1
 8001c92:	2180      	movs	r1, #128	; 0x80
 8001c94:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <Drivemotor+0xdc>)
 8001c96:	f000 fde3 	bl	8002860 <HAL_GPIO_WritePin>
}
 8001c9a:	e7ff      	b.n	8001c9c <Drivemotor+0xc8>
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd90      	pop	{r4, r7, pc}
 8001ca4:	ffffd8f0 	.word	0xffffd8f0
 8001ca8:	200000c4 	.word	0x200000c4
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	40020800 	.word	0x40020800

08001cb4 <sendUartToROS2>:



uint16_t value=0;
//Mark_serial_protocol
void sendUartToROS2(){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
//	datauartEncoder[11]=((uint64_t)ThetaPre>>16)&0b11111111;
//	datauartEncoder[12]=((uint64_t)ThetaPre>>8)&0b11111111;
//	datauartEncoder[13]=(uint64_t)ThetaPre&0b11111111;
//
//	datauartEncoder[17]=OmegaPre;
	value=htim2.Instance->CNT;
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <sendUartToROS2+0x58>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <sendUartToROS2+0x5c>)
 8001cc2:	801a      	strh	r2, [r3, #0]
	datauartEncoder[6]=(value&0b1111111100000000) >>8;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <sendUartToROS2+0x5c>)
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <sendUartToROS2+0x60>)
 8001cd0:	719a      	strb	r2, [r3, #6]
	datauartEncoder[7]=value&0b11111111;
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <sendUartToROS2+0x5c>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <sendUartToROS2+0x60>)
 8001cda:	71da      	strb	r2, [r3, #7]

	HAL_UART_Transmit_IT(&huart2, datauartEncoder, sizeof(datauartEncoder));
 8001cdc:	220a      	movs	r2, #10
 8001cde:	490d      	ldr	r1, [pc, #52]	; (8001d14 <sendUartToROS2+0x60>)
 8001ce0:	480d      	ldr	r0, [pc, #52]	; (8001d18 <sendUartToROS2+0x64>)
 8001ce2:	f002 fc1e 	bl	8004522 <HAL_UART_Transmit_IT>


	q=(q+1)%255;
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <sendUartToROS2+0x68>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <sendUartToROS2+0x6c>)
 8001cee:	fb83 1302 	smull	r1, r3, r3, r2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	11d9      	asrs	r1, r3, #7
 8001cf6:	17d3      	asrs	r3, r2, #31
 8001cf8:	1ac9      	subs	r1, r1, r3
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	1a5b      	subs	r3, r3, r1
 8001d00:	1ad1      	subs	r1, r2, r3
 8001d02:	b2ca      	uxtb	r2, r1
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <sendUartToROS2+0x68>)
 8001d06:	701a      	strb	r2, [r3, #0]




}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	2000010c 	.word	0x2000010c
 8001d10:	200002c8 	.word	0x200002c8
 8001d14:	20000004 	.word	0x20000004
 8001d18:	200001e4 	.word	0x200001e4
 8001d1c:	200002cb 	.word	0x200002cb
 8001d20:	80808081 	.word	0x80808081

08001d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d28:	b672      	cpsid	i
}
 8001d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <Error_Handler+0x8>
	...

08001d30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	4a0f      	ldr	r2, [pc, #60]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d44:	6453      	str	r3, [r2, #68]	; 0x44
 8001d46:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a08      	ldr	r2, [pc, #32]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d6e:	2007      	movs	r0, #7
 8001d70:	f000 fb1e 	bl	80023b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40023800 	.word	0x40023800

08001d80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a2e      	ldr	r2, [pc, #184]	; (8001e48 <HAL_TIM_Base_MspInit+0xc8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d11e      	bne.n	8001dd0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <HAL_TIM_Base_MspInit+0xcc>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	4a2c      	ldr	r2, [pc, #176]	; (8001e4c <HAL_TIM_Base_MspInit+0xcc>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6453      	str	r3, [r2, #68]	; 0x44
 8001da2:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_TIM_Base_MspInit+0xcc>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2100      	movs	r1, #0
 8001db2:	2018      	movs	r0, #24
 8001db4:	f000 fb07 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001db8:	2018      	movs	r0, #24
 8001dba:	f000 fb20 	bl	80023fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	201a      	movs	r0, #26
 8001dc4:	f000 faff 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001dc8:	201a      	movs	r0, #26
 8001dca:	f000 fb18 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001dce:	e036      	b.n	8001e3e <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM5)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1e      	ldr	r2, [pc, #120]	; (8001e50 <HAL_TIM_Base_MspInit+0xd0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d116      	bne.n	8001e08 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_TIM_Base_MspInit+0xcc>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <HAL_TIM_Base_MspInit+0xcc>)
 8001de4:	f043 0308 	orr.w	r3, r3, #8
 8001de8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_TIM_Base_MspInit+0xcc>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2032      	movs	r0, #50	; 0x32
 8001dfc:	f000 fae3 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e00:	2032      	movs	r0, #50	; 0x32
 8001e02:	f000 fafc 	bl	80023fe <HAL_NVIC_EnableIRQ>
}
 8001e06:	e01a      	b.n	8001e3e <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM9)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a11      	ldr	r2, [pc, #68]	; (8001e54 <HAL_TIM_Base_MspInit+0xd4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d115      	bne.n	8001e3e <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_TIM_Base_MspInit+0xcc>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <HAL_TIM_Base_MspInit+0xcc>)
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e20:	6453      	str	r3, [r2, #68]	; 0x44
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <HAL_TIM_Base_MspInit+0xcc>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2100      	movs	r1, #0
 8001e32:	2018      	movs	r0, #24
 8001e34:	f000 fac7 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001e38:	2018      	movs	r0, #24
 8001e3a:	f000 fae0 	bl	80023fe <HAL_NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40000c00 	.word	0x40000c00
 8001e54:	40014000 	.word	0x40014000

08001e58 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e78:	d12b      	bne.n	8001ed2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	4b17      	ldr	r3, [pc, #92]	; (8001edc <HAL_TIM_Encoder_MspInit+0x84>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a16      	ldr	r2, [pc, #88]	; (8001edc <HAL_TIM_Encoder_MspInit+0x84>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <HAL_TIM_Encoder_MspInit+0x84>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_TIM_Encoder_MspInit+0x84>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <HAL_TIM_Encoder_MspInit+0x84>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <HAL_TIM_Encoder_MspInit+0x84>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4804      	ldr	r0, [pc, #16]	; (8001ee0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001ece:	f000 fb43 	bl	8002558 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ed2:	bf00      	nop
 8001ed4:	3728      	adds	r7, #40	; 0x28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000

08001ee4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <HAL_TIM_MspPostInit+0x68>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d11e      	bne.n	8001f44 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_TIM_MspPostInit+0x6c>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <HAL_TIM_MspPostInit+0x6c>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <HAL_TIM_MspPostInit+0x6c>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f34:	2301      	movs	r3, #1
 8001f36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4805      	ldr	r0, [pc, #20]	; (8001f54 <HAL_TIM_MspPostInit+0x70>)
 8001f40:	f000 fb0a 	bl	8002558 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f44:	bf00      	nop
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020000 	.word	0x40020000

08001f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <HAL_UART_MspInit+0x94>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d133      	bne.n	8001fe2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <HAL_UART_MspInit+0x98>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	4a1b      	ldr	r2, [pc, #108]	; (8001ff0 <HAL_UART_MspInit+0x98>)
 8001f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f88:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8a:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_UART_MspInit+0x98>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <HAL_UART_MspInit+0x98>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a14      	ldr	r2, [pc, #80]	; (8001ff0 <HAL_UART_MspInit+0x98>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_UART_MspInit+0x98>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fb2:	230c      	movs	r3, #12
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fc2:	2307      	movs	r3, #7
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <HAL_UART_MspInit+0x9c>)
 8001fce:	f000 fac3 	bl	8002558 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2026      	movs	r0, #38	; 0x26
 8001fd8:	f000 f9f5 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fdc:	2026      	movs	r0, #38	; 0x26
 8001fde:	f000 fa0e 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fe2:	bf00      	nop
 8001fe4:	3728      	adds	r7, #40	; 0x28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40004400 	.word	0x40004400
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <NMI_Handler+0x4>

08001ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <MemManage_Handler+0x4>

0800200a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <UsageFault_Handler+0x4>

08002016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002044:	f000 f8c4 	bl	80021d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}

0800204c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002050:	4803      	ldr	r0, [pc, #12]	; (8002060 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002052:	f001 fbbf 	bl	80037d4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002056:	4803      	ldr	r0, [pc, #12]	; (8002064 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002058:	f001 fbbc 	bl	80037d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	200000c4 	.word	0x200000c4
 8002064:	2000019c 	.word	0x2000019c

08002068 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800206e:	f001 fbb1 	bl	80037d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200000c4 	.word	0x200000c4

0800207c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <USART2_IRQHandler+0x10>)
 8002082:	f002 fa93 	bl	80045ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200001e4 	.word	0x200001e4

08002090 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002094:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002098:	f000 fbfc 	bl	8002894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}

080020a0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <TIM5_IRQHandler+0x10>)
 80020a6:	f001 fb95 	bl	80037d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000154 	.word	0x20000154

080020b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <SystemInit+0x20>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <SystemInit+0x20>)
 80020c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002110 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020dc:	480d      	ldr	r0, [pc, #52]	; (8002114 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020de:	490e      	ldr	r1, [pc, #56]	; (8002118 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020e0:	4a0e      	ldr	r2, [pc, #56]	; (800211c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e4:	e002      	b.n	80020ec <LoopCopyDataInit>

080020e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ea:	3304      	adds	r3, #4

080020ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f0:	d3f9      	bcc.n	80020e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f2:	4a0b      	ldr	r2, [pc, #44]	; (8002120 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020f4:	4c0b      	ldr	r4, [pc, #44]	; (8002124 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f8:	e001      	b.n	80020fe <LoopFillZerobss>

080020fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020fc:	3204      	adds	r2, #4

080020fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002100:	d3fb      	bcc.n	80020fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002102:	f7ff ffd7 	bl	80020b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002106:	f003 f91d 	bl	8005344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210a:	f7fe fea3 	bl	8000e54 <main>
  bx  lr    
 800210e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002118:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 800211c:	08006248 	.word	0x08006248
  ldr r2, =_sbss
 8002120:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002124:	200002d0 	.word	0x200002d0

08002128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002128:	e7fe      	b.n	8002128 <ADC_IRQHandler>
	...

0800212c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002130:	4b0e      	ldr	r3, [pc, #56]	; (800216c <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0d      	ldr	r2, [pc, #52]	; (800216c <HAL_Init+0x40>)
 8002136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800213a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_Init+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0a      	ldr	r2, [pc, #40]	; (800216c <HAL_Init+0x40>)
 8002142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_Init+0x40>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a07      	ldr	r2, [pc, #28]	; (800216c <HAL_Init+0x40>)
 800214e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002154:	2003      	movs	r0, #3
 8002156:	f000 f92b 	bl	80023b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215a:	2000      	movs	r0, #0
 800215c:	f000 f808 	bl	8002170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002160:	f7ff fde6 	bl	8001d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40023c00 	.word	0x40023c00

08002170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_InitTick+0x54>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_InitTick+0x58>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002186:	fbb3 f3f1 	udiv	r3, r3, r1
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f943 	bl	800241a <HAL_SYSTICK_Config>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e00e      	b.n	80021bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b0f      	cmp	r3, #15
 80021a2:	d80a      	bhi.n	80021ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a4:	2200      	movs	r2, #0
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ac:	f000 f90b 	bl	80023c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b0:	4a06      	ldr	r2, [pc, #24]	; (80021cc <HAL_InitTick+0x5c>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e000      	b.n	80021bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000038 	.word	0x20000038
 80021c8:	20000040 	.word	0x20000040
 80021cc:	2000003c 	.word	0x2000003c

080021d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_IncTick+0x20>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_IncTick+0x24>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <HAL_IncTick+0x24>)
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000040 	.word	0x20000040
 80021f4:	200002cc 	.word	0x200002cc

080021f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return uwTick;
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <HAL_GetTick+0x14>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	200002cc 	.word	0x200002cc

08002210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800222c:	4013      	ands	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800223c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002242:	4a04      	ldr	r2, [pc, #16]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	60d3      	str	r3, [r2, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <__NVIC_GetPriorityGrouping+0x18>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	f003 0307 	and.w	r3, r3, #7
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	db0b      	blt.n	800229e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4907      	ldr	r1, [pc, #28]	; (80022ac <__NVIC_EnableIRQ+0x38>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2001      	movs	r0, #1
 8002296:	fa00 f202 	lsl.w	r2, r0, r2
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db0a      	blt.n	80022da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	490c      	ldr	r1, [pc, #48]	; (80022fc <__NVIC_SetPriority+0x4c>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	0112      	lsls	r2, r2, #4
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	440b      	add	r3, r1
 80022d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d8:	e00a      	b.n	80022f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4908      	ldr	r1, [pc, #32]	; (8002300 <__NVIC_SetPriority+0x50>)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	3b04      	subs	r3, #4
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	440b      	add	r3, r1
 80022ee:	761a      	strb	r2, [r3, #24]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000e100 	.word	0xe000e100
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f1c3 0307 	rsb	r3, r3, #7
 800231e:	2b04      	cmp	r3, #4
 8002320:	bf28      	it	cs
 8002322:	2304      	movcs	r3, #4
 8002324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3304      	adds	r3, #4
 800232a:	2b06      	cmp	r3, #6
 800232c:	d902      	bls.n	8002334 <NVIC_EncodePriority+0x30>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3b03      	subs	r3, #3
 8002332:	e000      	b.n	8002336 <NVIC_EncodePriority+0x32>
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	401a      	ands	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800234c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43d9      	mvns	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	4313      	orrs	r3, r2
         );
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800237c:	d301      	bcc.n	8002382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237e:	2301      	movs	r3, #1
 8002380:	e00f      	b.n	80023a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <SysTick_Config+0x40>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238a:	210f      	movs	r1, #15
 800238c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002390:	f7ff ff8e 	bl	80022b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <SysTick_Config+0x40>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239a:	4b04      	ldr	r3, [pc, #16]	; (80023ac <SysTick_Config+0x40>)
 800239c:	2207      	movs	r2, #7
 800239e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	e000e010 	.word	0xe000e010

080023b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff29 	bl	8002210 <__NVIC_SetPriorityGrouping>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d8:	f7ff ff3e 	bl	8002258 <__NVIC_GetPriorityGrouping>
 80023dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	6978      	ldr	r0, [r7, #20]
 80023e4:	f7ff ff8e 	bl	8002304 <NVIC_EncodePriority>
 80023e8:	4602      	mov	r2, r0
 80023ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff5d 	bl	80022b0 <__NVIC_SetPriority>
}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff31 	bl	8002274 <__NVIC_EnableIRQ>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ffa2 	bl	800236c <SysTick_Config>
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002440:	f7ff feda 	bl	80021f8 <HAL_GetTick>
 8002444:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d008      	beq.n	8002464 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2280      	movs	r2, #128	; 0x80
 8002456:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e052      	b.n	800250a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0216 	bic.w	r2, r2, #22
 8002472:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002482:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	d103      	bne.n	8002494 <HAL_DMA_Abort+0x62>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0208 	bic.w	r2, r2, #8
 80024a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b4:	e013      	b.n	80024de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024b6:	f7ff fe9f 	bl	80021f8 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b05      	cmp	r3, #5
 80024c2:	d90c      	bls.n	80024de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2220      	movs	r2, #32
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2203      	movs	r2, #3
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e015      	b.n	800250a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1e4      	bne.n	80024b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	223f      	movs	r2, #63	; 0x3f
 80024f2:	409a      	lsls	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d004      	beq.n	8002530 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2280      	movs	r2, #128	; 0x80
 800252a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e00c      	b.n	800254a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2205      	movs	r2, #5
 8002534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0201 	bic.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002558:	b480      	push	{r7}
 800255a:	b089      	sub	sp, #36	; 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800256a:	2300      	movs	r3, #0
 800256c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	e159      	b.n	8002828 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002574:	2201      	movs	r2, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	429a      	cmp	r2, r3
 800258e:	f040 8148 	bne.w	8002822 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	2b01      	cmp	r3, #1
 800259c:	d005      	beq.n	80025aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d130      	bne.n	800260c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	2203      	movs	r2, #3
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025e0:	2201      	movs	r2, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 0201 	and.w	r2, r3, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b03      	cmp	r3, #3
 8002616:	d017      	beq.n	8002648 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	2203      	movs	r2, #3
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d123      	bne.n	800269c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	08da      	lsrs	r2, r3, #3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3208      	adds	r2, #8
 800265c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	220f      	movs	r2, #15
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	08da      	lsrs	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3208      	adds	r2, #8
 8002696:	69b9      	ldr	r1, [r7, #24]
 8002698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	2203      	movs	r2, #3
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0203 	and.w	r2, r3, #3
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80a2 	beq.w	8002822 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b57      	ldr	r3, [pc, #348]	; (8002840 <HAL_GPIO_Init+0x2e8>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a56      	ldr	r2, [pc, #344]	; (8002840 <HAL_GPIO_Init+0x2e8>)
 80026e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b54      	ldr	r3, [pc, #336]	; (8002840 <HAL_GPIO_Init+0x2e8>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026fa:	4a52      	ldr	r2, [pc, #328]	; (8002844 <HAL_GPIO_Init+0x2ec>)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	3302      	adds	r3, #2
 8002702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	220f      	movs	r2, #15
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a49      	ldr	r2, [pc, #292]	; (8002848 <HAL_GPIO_Init+0x2f0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d019      	beq.n	800275a <HAL_GPIO_Init+0x202>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a48      	ldr	r2, [pc, #288]	; (800284c <HAL_GPIO_Init+0x2f4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <HAL_GPIO_Init+0x1fe>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a47      	ldr	r2, [pc, #284]	; (8002850 <HAL_GPIO_Init+0x2f8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00d      	beq.n	8002752 <HAL_GPIO_Init+0x1fa>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a46      	ldr	r2, [pc, #280]	; (8002854 <HAL_GPIO_Init+0x2fc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d007      	beq.n	800274e <HAL_GPIO_Init+0x1f6>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a45      	ldr	r2, [pc, #276]	; (8002858 <HAL_GPIO_Init+0x300>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d101      	bne.n	800274a <HAL_GPIO_Init+0x1f2>
 8002746:	2304      	movs	r3, #4
 8002748:	e008      	b.n	800275c <HAL_GPIO_Init+0x204>
 800274a:	2307      	movs	r3, #7
 800274c:	e006      	b.n	800275c <HAL_GPIO_Init+0x204>
 800274e:	2303      	movs	r3, #3
 8002750:	e004      	b.n	800275c <HAL_GPIO_Init+0x204>
 8002752:	2302      	movs	r3, #2
 8002754:	e002      	b.n	800275c <HAL_GPIO_Init+0x204>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_GPIO_Init+0x204>
 800275a:	2300      	movs	r3, #0
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	f002 0203 	and.w	r2, r2, #3
 8002762:	0092      	lsls	r2, r2, #2
 8002764:	4093      	lsls	r3, r2
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800276c:	4935      	ldr	r1, [pc, #212]	; (8002844 <HAL_GPIO_Init+0x2ec>)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	089b      	lsrs	r3, r3, #2
 8002772:	3302      	adds	r3, #2
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800277a:	4b38      	ldr	r3, [pc, #224]	; (800285c <HAL_GPIO_Init+0x304>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800279e:	4a2f      	ldr	r2, [pc, #188]	; (800285c <HAL_GPIO_Init+0x304>)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027a4:	4b2d      	ldr	r3, [pc, #180]	; (800285c <HAL_GPIO_Init+0x304>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027c8:	4a24      	ldr	r2, [pc, #144]	; (800285c <HAL_GPIO_Init+0x304>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ce:	4b23      	ldr	r3, [pc, #140]	; (800285c <HAL_GPIO_Init+0x304>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027f2:	4a1a      	ldr	r2, [pc, #104]	; (800285c <HAL_GPIO_Init+0x304>)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f8:	4b18      	ldr	r3, [pc, #96]	; (800285c <HAL_GPIO_Init+0x304>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800281c:	4a0f      	ldr	r2, [pc, #60]	; (800285c <HAL_GPIO_Init+0x304>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3301      	adds	r3, #1
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b0f      	cmp	r3, #15
 800282c:	f67f aea2 	bls.w	8002574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3724      	adds	r7, #36	; 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800
 8002844:	40013800 	.word	0x40013800
 8002848:	40020000 	.word	0x40020000
 800284c:	40020400 	.word	0x40020400
 8002850:	40020800 	.word	0x40020800
 8002854:	40020c00 	.word	0x40020c00
 8002858:	40021000 	.word	0x40021000
 800285c:	40013c00 	.word	0x40013c00

08002860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800287c:	e003      	b.n	8002886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	041a      	lsls	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	619a      	str	r2, [r3, #24]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d006      	beq.n	80028b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028aa:	4a05      	ldr	r2, [pc, #20]	; (80028c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff f96e 	bl	8001b94 <HAL_GPIO_EXTI_Callback>
  }
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40013c00 	.word	0x40013c00

080028c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e267      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d075      	beq.n	80029ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028e2:	4b88      	ldr	r3, [pc, #544]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d00c      	beq.n	8002908 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ee:	4b85      	ldr	r3, [pc, #532]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d112      	bne.n	8002920 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028fa:	4b82      	ldr	r3, [pc, #520]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002906:	d10b      	bne.n	8002920 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002908:	4b7e      	ldr	r3, [pc, #504]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d05b      	beq.n	80029cc <HAL_RCC_OscConfig+0x108>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d157      	bne.n	80029cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e242      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002928:	d106      	bne.n	8002938 <HAL_RCC_OscConfig+0x74>
 800292a:	4b76      	ldr	r3, [pc, #472]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a75      	ldr	r2, [pc, #468]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e01d      	b.n	8002974 <HAL_RCC_OscConfig+0xb0>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0x98>
 8002942:	4b70      	ldr	r3, [pc, #448]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a6f      	ldr	r2, [pc, #444]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b6d      	ldr	r3, [pc, #436]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a6c      	ldr	r2, [pc, #432]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e00b      	b.n	8002974 <HAL_RCC_OscConfig+0xb0>
 800295c:	4b69      	ldr	r3, [pc, #420]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a68      	ldr	r2, [pc, #416]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b66      	ldr	r3, [pc, #408]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a65      	ldr	r2, [pc, #404]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 800296e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d013      	beq.n	80029a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7ff fc3c 	bl	80021f8 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002984:	f7ff fc38 	bl	80021f8 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	; 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e207      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	4b5b      	ldr	r3, [pc, #364]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0xc0>
 80029a2:	e014      	b.n	80029ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7ff fc28 	bl	80021f8 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ac:	f7ff fc24 	bl	80021f8 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e1f3      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029be:	4b51      	ldr	r3, [pc, #324]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0xe8>
 80029ca:	e000      	b.n	80029ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d063      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029da:	4b4a      	ldr	r3, [pc, #296]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00b      	beq.n	80029fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029e6:	4b47      	ldr	r3, [pc, #284]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d11c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029f2:	4b44      	ldr	r3, [pc, #272]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d116      	bne.n	8002a2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	4b41      	ldr	r3, [pc, #260]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_RCC_OscConfig+0x152>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d001      	beq.n	8002a16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e1c7      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a16:	4b3b      	ldr	r3, [pc, #236]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4937      	ldr	r1, [pc, #220]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2a:	e03a      	b.n	8002aa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d020      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a34:	4b34      	ldr	r3, [pc, #208]	; (8002b08 <HAL_RCC_OscConfig+0x244>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3a:	f7ff fbdd 	bl	80021f8 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a42:	f7ff fbd9 	bl	80021f8 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e1a8      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a54:	4b2b      	ldr	r3, [pc, #172]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a60:	4b28      	ldr	r3, [pc, #160]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4925      	ldr	r1, [pc, #148]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]
 8002a74:	e015      	b.n	8002aa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <HAL_RCC_OscConfig+0x244>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7ff fbbc 	bl	80021f8 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a84:	f7ff fbb8 	bl	80021f8 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e187      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a96:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d036      	beq.n	8002b1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d016      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <HAL_RCC_OscConfig+0x248>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7ff fb9c 	bl	80021f8 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac4:	f7ff fb98 	bl	80021f8 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e167      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x200>
 8002ae2:	e01b      	b.n	8002b1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae4:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <HAL_RCC_OscConfig+0x248>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aea:	f7ff fb85 	bl	80021f8 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af0:	e00e      	b.n	8002b10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af2:	f7ff fb81 	bl	80021f8 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d907      	bls.n	8002b10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e150      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
 8002b04:	40023800 	.word	0x40023800
 8002b08:	42470000 	.word	0x42470000
 8002b0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b10:	4b88      	ldr	r3, [pc, #544]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1ea      	bne.n	8002af2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 8097 	beq.w	8002c58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b2e:	4b81      	ldr	r3, [pc, #516]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10f      	bne.n	8002b5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	4b7d      	ldr	r3, [pc, #500]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	4a7c      	ldr	r2, [pc, #496]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b48:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4a:	4b7a      	ldr	r3, [pc, #488]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b56:	2301      	movs	r3, #1
 8002b58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5a:	4b77      	ldr	r3, [pc, #476]	; (8002d38 <HAL_RCC_OscConfig+0x474>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d118      	bne.n	8002b98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b66:	4b74      	ldr	r3, [pc, #464]	; (8002d38 <HAL_RCC_OscConfig+0x474>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a73      	ldr	r2, [pc, #460]	; (8002d38 <HAL_RCC_OscConfig+0x474>)
 8002b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b72:	f7ff fb41 	bl	80021f8 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7a:	f7ff fb3d 	bl	80021f8 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e10c      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	4b6a      	ldr	r3, [pc, #424]	; (8002d38 <HAL_RCC_OscConfig+0x474>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x2ea>
 8002ba0:	4b64      	ldr	r3, [pc, #400]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	4a63      	ldr	r2, [pc, #396]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6713      	str	r3, [r2, #112]	; 0x70
 8002bac:	e01c      	b.n	8002be8 <HAL_RCC_OscConfig+0x324>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b05      	cmp	r3, #5
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x30c>
 8002bb6:	4b5f      	ldr	r3, [pc, #380]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a5e      	ldr	r2, [pc, #376]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	f043 0304 	orr.w	r3, r3, #4
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc2:	4b5c      	ldr	r3, [pc, #368]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	4a5b      	ldr	r2, [pc, #364]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bce:	e00b      	b.n	8002be8 <HAL_RCC_OscConfig+0x324>
 8002bd0:	4b58      	ldr	r3, [pc, #352]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	4a57      	ldr	r2, [pc, #348]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	f023 0301 	bic.w	r3, r3, #1
 8002bda:	6713      	str	r3, [r2, #112]	; 0x70
 8002bdc:	4b55      	ldr	r3, [pc, #340]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be0:	4a54      	ldr	r2, [pc, #336]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002be2:	f023 0304 	bic.w	r3, r3, #4
 8002be6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d015      	beq.n	8002c1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf0:	f7ff fb02 	bl	80021f8 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7ff fafe 	bl	80021f8 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e0cb      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0e:	4b49      	ldr	r3, [pc, #292]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0ee      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x334>
 8002c1a:	e014      	b.n	8002c46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1c:	f7ff faec 	bl	80021f8 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c24:	f7ff fae8 	bl	80021f8 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e0b5      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3a:	4b3e      	ldr	r3, [pc, #248]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1ee      	bne.n	8002c24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d105      	bne.n	8002c58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c4c:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	4a38      	ldr	r2, [pc, #224]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80a1 	beq.w	8002da4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c62:	4b34      	ldr	r3, [pc, #208]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d05c      	beq.n	8002d28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d141      	bne.n	8002cfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c76:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <HAL_RCC_OscConfig+0x478>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7ff fabc 	bl	80021f8 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c84:	f7ff fab8 	bl	80021f8 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e087      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c96:	4b27      	ldr	r3, [pc, #156]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69da      	ldr	r2, [r3, #28]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	019b      	lsls	r3, r3, #6
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	085b      	lsrs	r3, r3, #1
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	041b      	lsls	r3, r3, #16
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	061b      	lsls	r3, r3, #24
 8002cc6:	491b      	ldr	r1, [pc, #108]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <HAL_RCC_OscConfig+0x478>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd2:	f7ff fa91 	bl	80021f8 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cda:	f7ff fa8d 	bl	80021f8 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e05c      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cec:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x416>
 8002cf8:	e054      	b.n	8002da4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfa:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <HAL_RCC_OscConfig+0x478>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7ff fa7a 	bl	80021f8 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d08:	f7ff fa76 	bl	80021f8 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e045      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x444>
 8002d26:	e03d      	b.n	8002da4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e038      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40007000 	.word	0x40007000
 8002d3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_RCC_OscConfig+0x4ec>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d028      	beq.n	8002da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d121      	bne.n	8002da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d11a      	bne.n	8002da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d70:	4013      	ands	r3, r2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d111      	bne.n	8002da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d107      	bne.n	8002da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800

08002db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0cc      	b.n	8002f62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b68      	ldr	r3, [pc, #416]	; (8002f6c <HAL_RCC_ClockConfig+0x1b8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d90c      	bls.n	8002df0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b65      	ldr	r3, [pc, #404]	; (8002f6c <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dde:	4b63      	ldr	r3, [pc, #396]	; (8002f6c <HAL_RCC_ClockConfig+0x1b8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0b8      	b.n	8002f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d020      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e08:	4b59      	ldr	r3, [pc, #356]	; (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	4a58      	ldr	r2, [pc, #352]	; (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e20:	4b53      	ldr	r3, [pc, #332]	; (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	4a52      	ldr	r2, [pc, #328]	; (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e2c:	4b50      	ldr	r3, [pc, #320]	; (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	494d      	ldr	r1, [pc, #308]	; (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d044      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d107      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e52:	4b47      	ldr	r3, [pc, #284]	; (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d119      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e07f      	b.n	8002f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d003      	beq.n	8002e72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e72:	4b3f      	ldr	r3, [pc, #252]	; (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e06f      	b.n	8002f62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e82:	4b3b      	ldr	r3, [pc, #236]	; (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e067      	b.n	8002f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e92:	4b37      	ldr	r3, [pc, #220]	; (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f023 0203 	bic.w	r2, r3, #3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4934      	ldr	r1, [pc, #208]	; (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea4:	f7ff f9a8 	bl	80021f8 <HAL_GetTick>
 8002ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eaa:	e00a      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eac:	f7ff f9a4 	bl	80021f8 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e04f      	b.n	8002f62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec2:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 020c 	and.w	r2, r3, #12
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d1eb      	bne.n	8002eac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b25      	ldr	r3, [pc, #148]	; (8002f6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d20c      	bcs.n	8002efc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b22      	ldr	r3, [pc, #136]	; (8002f6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eea:	4b20      	ldr	r3, [pc, #128]	; (8002f6c <HAL_RCC_ClockConfig+0x1b8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e032      	b.n	8002f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f08:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	4916      	ldr	r1, [pc, #88]	; (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d009      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f26:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	490e      	ldr	r1, [pc, #56]	; (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f3a:	f000 f821 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	091b      	lsrs	r3, r3, #4
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	490a      	ldr	r1, [pc, #40]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4c:	5ccb      	ldrb	r3, [r1, r3]
 8002f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f52:	4a09      	ldr	r2, [pc, #36]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f56:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff f908 	bl	8002170 <HAL_InitTick>

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40023c00 	.word	0x40023c00
 8002f70:	40023800 	.word	0x40023800
 8002f74:	080061f0 	.word	0x080061f0
 8002f78:	20000038 	.word	0x20000038
 8002f7c:	2000003c 	.word	0x2000003c

08002f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f84:	b094      	sub	sp, #80	; 0x50
 8002f86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f90:	2300      	movs	r3, #0
 8002f92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f98:	4b79      	ldr	r3, [pc, #484]	; (8003180 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 030c 	and.w	r3, r3, #12
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d00d      	beq.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	f200 80e1 	bhi.w	800316c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d003      	beq.n	8002fba <HAL_RCC_GetSysClockFreq+0x3a>
 8002fb2:	e0db      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fb4:	4b73      	ldr	r3, [pc, #460]	; (8003184 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fb6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fb8:	e0db      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fba:	4b73      	ldr	r3, [pc, #460]	; (8003188 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fbe:	e0d8      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fc0:	4b6f      	ldr	r3, [pc, #444]	; (8003180 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fc8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fca:	4b6d      	ldr	r3, [pc, #436]	; (8003180 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d063      	beq.n	800309e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd6:	4b6a      	ldr	r3, [pc, #424]	; (8003180 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	099b      	lsrs	r3, r3, #6
 8002fdc:	2200      	movs	r2, #0
 8002fde:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fe0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8002fea:	2300      	movs	r3, #0
 8002fec:	637b      	str	r3, [r7, #52]	; 0x34
 8002fee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ff2:	4622      	mov	r2, r4
 8002ff4:	462b      	mov	r3, r5
 8002ff6:	f04f 0000 	mov.w	r0, #0
 8002ffa:	f04f 0100 	mov.w	r1, #0
 8002ffe:	0159      	lsls	r1, r3, #5
 8003000:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003004:	0150      	lsls	r0, r2, #5
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4621      	mov	r1, r4
 800300c:	1a51      	subs	r1, r2, r1
 800300e:	6139      	str	r1, [r7, #16]
 8003010:	4629      	mov	r1, r5
 8003012:	eb63 0301 	sbc.w	r3, r3, r1
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003024:	4659      	mov	r1, fp
 8003026:	018b      	lsls	r3, r1, #6
 8003028:	4651      	mov	r1, sl
 800302a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800302e:	4651      	mov	r1, sl
 8003030:	018a      	lsls	r2, r1, #6
 8003032:	4651      	mov	r1, sl
 8003034:	ebb2 0801 	subs.w	r8, r2, r1
 8003038:	4659      	mov	r1, fp
 800303a:	eb63 0901 	sbc.w	r9, r3, r1
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800304a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800304e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003052:	4690      	mov	r8, r2
 8003054:	4699      	mov	r9, r3
 8003056:	4623      	mov	r3, r4
 8003058:	eb18 0303 	adds.w	r3, r8, r3
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	462b      	mov	r3, r5
 8003060:	eb49 0303 	adc.w	r3, r9, r3
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003072:	4629      	mov	r1, r5
 8003074:	024b      	lsls	r3, r1, #9
 8003076:	4621      	mov	r1, r4
 8003078:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800307c:	4621      	mov	r1, r4
 800307e:	024a      	lsls	r2, r1, #9
 8003080:	4610      	mov	r0, r2
 8003082:	4619      	mov	r1, r3
 8003084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003086:	2200      	movs	r2, #0
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28
 800308a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800308c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003090:	f7fd fd5e 	bl	8000b50 <__aeabi_uldivmod>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4613      	mov	r3, r2
 800309a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800309c:	e058      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309e:	4b38      	ldr	r3, [pc, #224]	; (8003180 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	099b      	lsrs	r3, r3, #6
 80030a4:	2200      	movs	r2, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	4611      	mov	r1, r2
 80030aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030ae:	623b      	str	r3, [r7, #32]
 80030b0:	2300      	movs	r3, #0
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
 80030b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030b8:	4642      	mov	r2, r8
 80030ba:	464b      	mov	r3, r9
 80030bc:	f04f 0000 	mov.w	r0, #0
 80030c0:	f04f 0100 	mov.w	r1, #0
 80030c4:	0159      	lsls	r1, r3, #5
 80030c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ca:	0150      	lsls	r0, r2, #5
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4641      	mov	r1, r8
 80030d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80030d6:	4649      	mov	r1, r9
 80030d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030f0:	ebb2 040a 	subs.w	r4, r2, sl
 80030f4:	eb63 050b 	sbc.w	r5, r3, fp
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	00eb      	lsls	r3, r5, #3
 8003102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003106:	00e2      	lsls	r2, r4, #3
 8003108:	4614      	mov	r4, r2
 800310a:	461d      	mov	r5, r3
 800310c:	4643      	mov	r3, r8
 800310e:	18e3      	adds	r3, r4, r3
 8003110:	603b      	str	r3, [r7, #0]
 8003112:	464b      	mov	r3, r9
 8003114:	eb45 0303 	adc.w	r3, r5, r3
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003126:	4629      	mov	r1, r5
 8003128:	028b      	lsls	r3, r1, #10
 800312a:	4621      	mov	r1, r4
 800312c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003130:	4621      	mov	r1, r4
 8003132:	028a      	lsls	r2, r1, #10
 8003134:	4610      	mov	r0, r2
 8003136:	4619      	mov	r1, r3
 8003138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800313a:	2200      	movs	r2, #0
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	61fa      	str	r2, [r7, #28]
 8003140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003144:	f7fd fd04 	bl	8000b50 <__aeabi_uldivmod>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4613      	mov	r3, r2
 800314e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_RCC_GetSysClockFreq+0x200>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	3301      	adds	r3, #1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003160:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800316a:	e002      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_RCC_GetSysClockFreq+0x204>)
 800316e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003174:	4618      	mov	r0, r3
 8003176:	3750      	adds	r7, #80	; 0x50
 8003178:	46bd      	mov	sp, r7
 800317a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800
 8003184:	00f42400 	.word	0x00f42400
 8003188:	007a1200 	.word	0x007a1200

0800318c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003190:	4b03      	ldr	r3, [pc, #12]	; (80031a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003192:	681b      	ldr	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000038 	.word	0x20000038

080031a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031a8:	f7ff fff0 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	0a9b      	lsrs	r3, r3, #10
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	4903      	ldr	r1, [pc, #12]	; (80031c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40023800 	.word	0x40023800
 80031c8:	08006200 	.word	0x08006200

080031cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031d0:	f7ff ffdc 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	0b5b      	lsrs	r3, r3, #13
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	4903      	ldr	r1, [pc, #12]	; (80031f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e2:	5ccb      	ldrb	r3, [r1, r3]
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40023800 	.word	0x40023800
 80031f0:	08006200 	.word	0x08006200

080031f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e041      	b.n	800328a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fe fdb0 	bl	8001d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	4619      	mov	r1, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f000 fd88 	bl	8003d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d001      	beq.n	80032ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e044      	b.n	8003336 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1e      	ldr	r2, [pc, #120]	; (8003344 <HAL_TIM_Base_Start_IT+0xb0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d018      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x6c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d6:	d013      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x6c>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a1a      	ldr	r2, [pc, #104]	; (8003348 <HAL_TIM_Base_Start_IT+0xb4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00e      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x6c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a19      	ldr	r2, [pc, #100]	; (800334c <HAL_TIM_Base_Start_IT+0xb8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d009      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x6c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a17      	ldr	r2, [pc, #92]	; (8003350 <HAL_TIM_Base_Start_IT+0xbc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d004      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x6c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a16      	ldr	r2, [pc, #88]	; (8003354 <HAL_TIM_Base_Start_IT+0xc0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d111      	bne.n	8003324 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b06      	cmp	r3, #6
 8003310:	d010      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0201 	orr.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003322:	e007      	b.n	8003334 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40010000 	.word	0x40010000
 8003348:	40000400 	.word	0x40000400
 800334c:	40000800 	.word	0x40000800
 8003350:	40000c00 	.word	0x40000c00
 8003354:	40014000 	.word	0x40014000

08003358 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e041      	b.n	80033ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f839 	bl	80033f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3304      	adds	r3, #4
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f000 fcd6 	bl	8003d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d109      	bne.n	8003430 <HAL_TIM_PWM_Start+0x24>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	bf14      	ite	ne
 8003428:	2301      	movne	r3, #1
 800342a:	2300      	moveq	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	e022      	b.n	8003476 <HAL_TIM_PWM_Start+0x6a>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b04      	cmp	r3, #4
 8003434:	d109      	bne.n	800344a <HAL_TIM_PWM_Start+0x3e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b01      	cmp	r3, #1
 8003440:	bf14      	ite	ne
 8003442:	2301      	movne	r3, #1
 8003444:	2300      	moveq	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	e015      	b.n	8003476 <HAL_TIM_PWM_Start+0x6a>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b08      	cmp	r3, #8
 800344e:	d109      	bne.n	8003464 <HAL_TIM_PWM_Start+0x58>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	bf14      	ite	ne
 800345c:	2301      	movne	r3, #1
 800345e:	2300      	moveq	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	e008      	b.n	8003476 <HAL_TIM_PWM_Start+0x6a>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	bf14      	ite	ne
 8003470:	2301      	movne	r3, #1
 8003472:	2300      	moveq	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e068      	b.n	8003550 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d104      	bne.n	800348e <HAL_TIM_PWM_Start+0x82>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800348c:	e013      	b.n	80034b6 <HAL_TIM_PWM_Start+0xaa>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b04      	cmp	r3, #4
 8003492:	d104      	bne.n	800349e <HAL_TIM_PWM_Start+0x92>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800349c:	e00b      	b.n	80034b6 <HAL_TIM_PWM_Start+0xaa>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d104      	bne.n	80034ae <HAL_TIM_PWM_Start+0xa2>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034ac:	e003      	b.n	80034b6 <HAL_TIM_PWM_Start+0xaa>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2202      	movs	r2, #2
 80034b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2201      	movs	r2, #1
 80034bc:	6839      	ldr	r1, [r7, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fee8 	bl	8004294 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a23      	ldr	r2, [pc, #140]	; (8003558 <HAL_TIM_PWM_Start+0x14c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d107      	bne.n	80034de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1d      	ldr	r2, [pc, #116]	; (8003558 <HAL_TIM_PWM_Start+0x14c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d018      	beq.n	800351a <HAL_TIM_PWM_Start+0x10e>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f0:	d013      	beq.n	800351a <HAL_TIM_PWM_Start+0x10e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a19      	ldr	r2, [pc, #100]	; (800355c <HAL_TIM_PWM_Start+0x150>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00e      	beq.n	800351a <HAL_TIM_PWM_Start+0x10e>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a17      	ldr	r2, [pc, #92]	; (8003560 <HAL_TIM_PWM_Start+0x154>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d009      	beq.n	800351a <HAL_TIM_PWM_Start+0x10e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a16      	ldr	r2, [pc, #88]	; (8003564 <HAL_TIM_PWM_Start+0x158>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d004      	beq.n	800351a <HAL_TIM_PWM_Start+0x10e>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a14      	ldr	r2, [pc, #80]	; (8003568 <HAL_TIM_PWM_Start+0x15c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d111      	bne.n	800353e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b06      	cmp	r3, #6
 800352a:	d010      	beq.n	800354e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353c:	e007      	b.n	800354e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40010000 	.word	0x40010000
 800355c:	40000400 	.word	0x40000400
 8003560:	40000800 	.word	0x40000800
 8003564:	40000c00 	.word	0x40000c00
 8003568:	40014000 	.word	0x40014000

0800356c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e097      	b.n	80036b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d106      	bne.n	800359a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7fe fc5f 	bl	8001e58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2202      	movs	r2, #2
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035b0:	f023 0307 	bic.w	r3, r3, #7
 80035b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3304      	adds	r3, #4
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f000 fbc1 	bl	8003d48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ee:	f023 0303 	bic.w	r3, r3, #3
 80035f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	4313      	orrs	r3, r2
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800360c:	f023 030c 	bic.w	r3, r3, #12
 8003610:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003618:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800361c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	4313      	orrs	r3, r2
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	011a      	lsls	r2, r3, #4
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	031b      	lsls	r3, r3, #12
 800363c:	4313      	orrs	r3, r2
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800364a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003652:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	4313      	orrs	r3, r2
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d110      	bne.n	800370a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d102      	bne.n	80036f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80036ee:	7b7b      	ldrb	r3, [r7, #13]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d001      	beq.n	80036f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e069      	b.n	80037cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003708:	e031      	b.n	800376e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b04      	cmp	r3, #4
 800370e:	d110      	bne.n	8003732 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003710:	7bbb      	ldrb	r3, [r7, #14]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d102      	bne.n	800371c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003716:	7b3b      	ldrb	r3, [r7, #12]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d001      	beq.n	8003720 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e055      	b.n	80037cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003730:	e01d      	b.n	800376e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d108      	bne.n	800374a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003738:	7bbb      	ldrb	r3, [r7, #14]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d105      	bne.n	800374a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800373e:	7b7b      	ldrb	r3, [r7, #13]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d102      	bne.n	800374a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003744:	7b3b      	ldrb	r3, [r7, #12]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d001      	beq.n	800374e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e03e      	b.n	80037cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2202      	movs	r2, #2
 8003752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2202      	movs	r2, #2
 800375a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2202      	movs	r2, #2
 8003762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_TIM_Encoder_Start+0xc4>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2b04      	cmp	r3, #4
 8003778:	d008      	beq.n	800378c <HAL_TIM_Encoder_Start+0xd4>
 800377a:	e00f      	b.n	800379c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2201      	movs	r2, #1
 8003782:	2100      	movs	r1, #0
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fd85 	bl	8004294 <TIM_CCxChannelCmd>
      break;
 800378a:	e016      	b.n	80037ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2201      	movs	r2, #1
 8003792:	2104      	movs	r1, #4
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fd7d 	bl	8004294 <TIM_CCxChannelCmd>
      break;
 800379a:	e00e      	b.n	80037ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2201      	movs	r2, #1
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fd75 	bl	8004294 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2201      	movs	r2, #1
 80037b0:	2104      	movs	r1, #4
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fd6e 	bl	8004294 <TIM_CCxChannelCmd>
      break;
 80037b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0201 	orr.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d122      	bne.n	8003830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d11b      	bne.n	8003830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0202 	mvn.w	r2, #2
 8003800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fa77 	bl	8003d0a <HAL_TIM_IC_CaptureCallback>
 800381c:	e005      	b.n	800382a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fa69 	bl	8003cf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fa7a 	bl	8003d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d122      	bne.n	8003884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b04      	cmp	r3, #4
 800384a:	d11b      	bne.n	8003884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0204 	mvn.w	r2, #4
 8003854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fa4d 	bl	8003d0a <HAL_TIM_IC_CaptureCallback>
 8003870:	e005      	b.n	800387e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fa3f 	bl	8003cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fa50 	bl	8003d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b08      	cmp	r3, #8
 8003890:	d122      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b08      	cmp	r3, #8
 800389e:	d11b      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0208 	mvn.w	r2, #8
 80038a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2204      	movs	r2, #4
 80038ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fa23 	bl	8003d0a <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fa15 	bl	8003cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fa26 	bl	8003d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b10      	cmp	r3, #16
 80038e4:	d122      	bne.n	800392c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b10      	cmp	r3, #16
 80038f2:	d11b      	bne.n	800392c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0210 	mvn.w	r2, #16
 80038fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2208      	movs	r2, #8
 8003902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f9f9 	bl	8003d0a <HAL_TIM_IC_CaptureCallback>
 8003918:	e005      	b.n	8003926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f9eb 	bl	8003cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f9fc 	bl	8003d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d10e      	bne.n	8003958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b01      	cmp	r3, #1
 8003946:	d107      	bne.n	8003958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0201 	mvn.w	r2, #1
 8003950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fe f8e2 	bl	8001b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b80      	cmp	r3, #128	; 0x80
 8003964:	d10e      	bne.n	8003984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003970:	2b80      	cmp	r3, #128	; 0x80
 8003972:	d107      	bne.n	8003984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fd78 	bl	8004474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d10e      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b40      	cmp	r3, #64	; 0x40
 800399e:	d107      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f9c1 	bl	8003d32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d10e      	bne.n	80039dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d107      	bne.n	80039dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0220 	mvn.w	r2, #32
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fd42 	bl	8004460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e0ae      	b.n	8003b60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b0c      	cmp	r3, #12
 8003a0e:	f200 809f 	bhi.w	8003b50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a12:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a18:	08003a4d 	.word	0x08003a4d
 8003a1c:	08003b51 	.word	0x08003b51
 8003a20:	08003b51 	.word	0x08003b51
 8003a24:	08003b51 	.word	0x08003b51
 8003a28:	08003a8d 	.word	0x08003a8d
 8003a2c:	08003b51 	.word	0x08003b51
 8003a30:	08003b51 	.word	0x08003b51
 8003a34:	08003b51 	.word	0x08003b51
 8003a38:	08003acf 	.word	0x08003acf
 8003a3c:	08003b51 	.word	0x08003b51
 8003a40:	08003b51 	.word	0x08003b51
 8003a44:	08003b51 	.word	0x08003b51
 8003a48:	08003b0f 	.word	0x08003b0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f9f8 	bl	8003e48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0208 	orr.w	r2, r2, #8
 8003a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0204 	bic.w	r2, r2, #4
 8003a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6999      	ldr	r1, [r3, #24]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	619a      	str	r2, [r3, #24]
      break;
 8003a8a:	e064      	b.n	8003b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fa3e 	bl	8003f14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6999      	ldr	r1, [r3, #24]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	021a      	lsls	r2, r3, #8
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	619a      	str	r2, [r3, #24]
      break;
 8003acc:	e043      	b.n	8003b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fa89 	bl	8003fec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0208 	orr.w	r2, r2, #8
 8003ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0204 	bic.w	r2, r2, #4
 8003af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69d9      	ldr	r1, [r3, #28]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	61da      	str	r2, [r3, #28]
      break;
 8003b0c:	e023      	b.n	8003b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68b9      	ldr	r1, [r7, #8]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 fad3 	bl	80040c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69d9      	ldr	r1, [r3, #28]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	021a      	lsls	r2, r3, #8
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	61da      	str	r2, [r3, #28]
      break;
 8003b4e:	e002      	b.n	8003b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	75fb      	strb	r3, [r7, #23]
      break;
 8003b54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_TIM_ConfigClockSource+0x1c>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e0b4      	b.n	8003cee <HAL_TIM_ConfigClockSource+0x186>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003baa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bbc:	d03e      	beq.n	8003c3c <HAL_TIM_ConfigClockSource+0xd4>
 8003bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc2:	f200 8087 	bhi.w	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bca:	f000 8086 	beq.w	8003cda <HAL_TIM_ConfigClockSource+0x172>
 8003bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd2:	d87f      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b70      	cmp	r3, #112	; 0x70
 8003bd6:	d01a      	beq.n	8003c0e <HAL_TIM_ConfigClockSource+0xa6>
 8003bd8:	2b70      	cmp	r3, #112	; 0x70
 8003bda:	d87b      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b60      	cmp	r3, #96	; 0x60
 8003bde:	d050      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x11a>
 8003be0:	2b60      	cmp	r3, #96	; 0x60
 8003be2:	d877      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b50      	cmp	r3, #80	; 0x50
 8003be6:	d03c      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0xfa>
 8003be8:	2b50      	cmp	r3, #80	; 0x50
 8003bea:	d873      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d058      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x13a>
 8003bf0:	2b40      	cmp	r3, #64	; 0x40
 8003bf2:	d86f      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf4:	2b30      	cmp	r3, #48	; 0x30
 8003bf6:	d064      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bf8:	2b30      	cmp	r3, #48	; 0x30
 8003bfa:	d86b      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d060      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d867      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d05c      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d05a      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c0c:	e062      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6899      	ldr	r1, [r3, #8]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f000 fb19 	bl	8004254 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	609a      	str	r2, [r3, #8]
      break;
 8003c3a:	e04f      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	6899      	ldr	r1, [r3, #8]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f000 fb02 	bl	8004254 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c5e:	609a      	str	r2, [r3, #8]
      break;
 8003c60:	e03c      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6859      	ldr	r1, [r3, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f000 fa76 	bl	8004160 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2150      	movs	r1, #80	; 0x50
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 facf 	bl	800421e <TIM_ITRx_SetConfig>
      break;
 8003c80:	e02c      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6859      	ldr	r1, [r3, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f000 fa95 	bl	80041be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2160      	movs	r1, #96	; 0x60
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fabf 	bl	800421e <TIM_ITRx_SetConfig>
      break;
 8003ca0:	e01c      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f000 fa56 	bl	8004160 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2140      	movs	r1, #64	; 0x40
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 faaf 	bl	800421e <TIM_ITRx_SetConfig>
      break;
 8003cc0:	e00c      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4610      	mov	r0, r2
 8003cce:	f000 faa6 	bl	800421e <TIM_ITRx_SetConfig>
      break;
 8003cd2:	e003      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd8:	e000      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a34      	ldr	r2, [pc, #208]	; (8003e2c <TIM_Base_SetConfig+0xe4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00f      	beq.n	8003d80 <TIM_Base_SetConfig+0x38>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d66:	d00b      	beq.n	8003d80 <TIM_Base_SetConfig+0x38>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a31      	ldr	r2, [pc, #196]	; (8003e30 <TIM_Base_SetConfig+0xe8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d007      	beq.n	8003d80 <TIM_Base_SetConfig+0x38>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a30      	ldr	r2, [pc, #192]	; (8003e34 <TIM_Base_SetConfig+0xec>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <TIM_Base_SetConfig+0x38>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a2f      	ldr	r2, [pc, #188]	; (8003e38 <TIM_Base_SetConfig+0xf0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d108      	bne.n	8003d92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a25      	ldr	r2, [pc, #148]	; (8003e2c <TIM_Base_SetConfig+0xe4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d01b      	beq.n	8003dd2 <TIM_Base_SetConfig+0x8a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da0:	d017      	beq.n	8003dd2 <TIM_Base_SetConfig+0x8a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a22      	ldr	r2, [pc, #136]	; (8003e30 <TIM_Base_SetConfig+0xe8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <TIM_Base_SetConfig+0x8a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a21      	ldr	r2, [pc, #132]	; (8003e34 <TIM_Base_SetConfig+0xec>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00f      	beq.n	8003dd2 <TIM_Base_SetConfig+0x8a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a20      	ldr	r2, [pc, #128]	; (8003e38 <TIM_Base_SetConfig+0xf0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00b      	beq.n	8003dd2 <TIM_Base_SetConfig+0x8a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <TIM_Base_SetConfig+0xf4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d007      	beq.n	8003dd2 <TIM_Base_SetConfig+0x8a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a1e      	ldr	r2, [pc, #120]	; (8003e40 <TIM_Base_SetConfig+0xf8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_Base_SetConfig+0x8a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a1d      	ldr	r2, [pc, #116]	; (8003e44 <TIM_Base_SetConfig+0xfc>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d108      	bne.n	8003de4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a08      	ldr	r2, [pc, #32]	; (8003e2c <TIM_Base_SetConfig+0xe4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d103      	bne.n	8003e18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	615a      	str	r2, [r3, #20]
}
 8003e1e:	bf00      	nop
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40010000 	.word	0x40010000
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40000800 	.word	0x40000800
 8003e38:	40000c00 	.word	0x40000c00
 8003e3c:	40014000 	.word	0x40014000
 8003e40:	40014400 	.word	0x40014400
 8003e44:	40014800 	.word	0x40014800

08003e48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f023 0201 	bic.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0303 	bic.w	r3, r3, #3
 8003e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f023 0302 	bic.w	r3, r3, #2
 8003e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a1c      	ldr	r2, [pc, #112]	; (8003f10 <TIM_OC1_SetConfig+0xc8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d10c      	bne.n	8003ebe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f023 0308 	bic.w	r3, r3, #8
 8003eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f023 0304 	bic.w	r3, r3, #4
 8003ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a13      	ldr	r2, [pc, #76]	; (8003f10 <TIM_OC1_SetConfig+0xc8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d111      	bne.n	8003eea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	621a      	str	r2, [r3, #32]
}
 8003f04:	bf00      	nop
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	40010000 	.word	0x40010000

08003f14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f023 0210 	bic.w	r2, r3, #16
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	021b      	lsls	r3, r3, #8
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f023 0320 	bic.w	r3, r3, #32
 8003f5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a1e      	ldr	r2, [pc, #120]	; (8003fe8 <TIM_OC2_SetConfig+0xd4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d10d      	bne.n	8003f90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <TIM_OC2_SetConfig+0xd4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d113      	bne.n	8003fc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	621a      	str	r2, [r3, #32]
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40010000 	.word	0x40010000

08003fec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a1d      	ldr	r2, [pc, #116]	; (80040bc <TIM_OC3_SetConfig+0xd0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d10d      	bne.n	8004066 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004050:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a14      	ldr	r2, [pc, #80]	; (80040bc <TIM_OC3_SetConfig+0xd0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d113      	bne.n	8004096 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800407c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	621a      	str	r2, [r3, #32]
}
 80040b0:	bf00      	nop
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	40010000 	.word	0x40010000

080040c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	021b      	lsls	r3, r3, #8
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800410a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	031b      	lsls	r3, r3, #12
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a10      	ldr	r2, [pc, #64]	; (800415c <TIM_OC4_SetConfig+0x9c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d109      	bne.n	8004134 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	019b      	lsls	r3, r3, #6
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	621a      	str	r2, [r3, #32]
}
 800414e:	bf00      	nop
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40010000 	.word	0x40010000

08004160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f023 0201 	bic.w	r2, r3, #1
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800418a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f023 030a 	bic.w	r3, r3, #10
 800419c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	621a      	str	r2, [r3, #32]
}
 80041b2:	bf00      	nop
 80041b4:	371c      	adds	r7, #28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041be:	b480      	push	{r7}
 80041c0:	b087      	sub	sp, #28
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f023 0210 	bic.w	r2, r3, #16
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	031b      	lsls	r3, r3, #12
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	621a      	str	r2, [r3, #32]
}
 8004212:	bf00      	nop
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800421e:	b480      	push	{r7}
 8004220:	b085      	sub	sp, #20
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004234:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	f043 0307 	orr.w	r3, r3, #7
 8004240:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	609a      	str	r2, [r3, #8]
}
 8004248:	bf00      	nop
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800426e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	021a      	lsls	r2, r3, #8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	431a      	orrs	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4313      	orrs	r3, r2
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	609a      	str	r2, [r3, #8]
}
 8004288:	bf00      	nop
 800428a:	371c      	adds	r7, #28
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f003 031f 	and.w	r3, r3, #31
 80042a6:	2201      	movs	r2, #1
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a1a      	ldr	r2, [r3, #32]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	43db      	mvns	r3, r3
 80042b6:	401a      	ands	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a1a      	ldr	r2, [r3, #32]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	fa01 f303 	lsl.w	r3, r1, r3
 80042cc:	431a      	orrs	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e050      	b.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a1c      	ldr	r2, [pc, #112]	; (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d018      	beq.n	800436e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004344:	d013      	beq.n	800436e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a18      	ldr	r2, [pc, #96]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00e      	beq.n	800436e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a16      	ldr	r2, [pc, #88]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d009      	beq.n	800436e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a15      	ldr	r2, [pc, #84]	; (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d004      	beq.n	800436e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a13      	ldr	r2, [pc, #76]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d10c      	bne.n	8004388 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004374:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	4313      	orrs	r3, r2
 800437e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40010000 	.word	0x40010000
 80043ac:	40000400 	.word	0x40000400
 80043b0:	40000800 	.word	0x40000800
 80043b4:	40000c00 	.word	0x40000c00
 80043b8:	40014000 	.word	0x40014000

080043bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e03d      	b.n	8004454 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e03f      	b.n	800451a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fd fd52 	bl	8001f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2224      	movs	r2, #36	; 0x24
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fcbf 	bl	8004e50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695a      	ldr	r2, [r3, #20]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004500:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004522:	b480      	push	{r7}
 8004524:	b085      	sub	sp, #20
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	4613      	mov	r3, r2
 800452e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b20      	cmp	r3, #32
 800453a:	d130      	bne.n	800459e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <HAL_UART_Transmit_IT+0x26>
 8004542:	88fb      	ldrh	r3, [r7, #6]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e029      	b.n	80045a0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_UART_Transmit_IT+0x38>
 8004556:	2302      	movs	r3, #2
 8004558:	e022      	b.n	80045a0 <HAL_UART_Transmit_IT+0x7e>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	88fa      	ldrh	r2, [r7, #6]
 800456c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	88fa      	ldrh	r2, [r7, #6]
 8004572:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2221      	movs	r2, #33	; 0x21
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004598:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	e000      	b.n	80045a0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800459e:	2302      	movs	r3, #2
  }
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b0ba      	sub	sp, #232	; 0xe8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045d8:	2300      	movs	r3, #0
 80045da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10f      	bne.n	8004612 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d009      	beq.n	8004612 <HAL_UART_IRQHandler+0x66>
 80045fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fb65 	bl	8004cda <UART_Receive_IT>
      return;
 8004610:	e256      	b.n	8004ac0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 80de 	beq.w	80047d8 <HAL_UART_IRQHandler+0x22c>
 800461c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d106      	bne.n	8004636 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800462c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 80d1 	beq.w	80047d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00b      	beq.n	800465a <HAL_UART_IRQHandler+0xae>
 8004642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464a:	2b00      	cmp	r3, #0
 800464c:	d005      	beq.n	800465a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f043 0201 	orr.w	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800465a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00b      	beq.n	800467e <HAL_UART_IRQHandler+0xd2>
 8004666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f043 0202 	orr.w	r2, r3, #2
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800467e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00b      	beq.n	80046a2 <HAL_UART_IRQHandler+0xf6>
 800468a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d005      	beq.n	80046a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f043 0204 	orr.w	r2, r3, #4
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d011      	beq.n	80046d2 <HAL_UART_IRQHandler+0x126>
 80046ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d105      	bne.n	80046c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f043 0208 	orr.w	r2, r3, #8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 81ed 	beq.w	8004ab6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d008      	beq.n	80046fa <HAL_UART_IRQHandler+0x14e>
 80046e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ec:	f003 0320 	and.w	r3, r3, #32
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 faf0 	bl	8004cda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004704:	2b40      	cmp	r3, #64	; 0x40
 8004706:	bf0c      	ite	eq
 8004708:	2301      	moveq	r3, #1
 800470a:	2300      	movne	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <HAL_UART_IRQHandler+0x17a>
 800471e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004722:	2b00      	cmp	r3, #0
 8004724:	d04f      	beq.n	80047c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f9f8 	bl	8004b1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004736:	2b40      	cmp	r3, #64	; 0x40
 8004738:	d141      	bne.n	80047be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3314      	adds	r3, #20
 8004740:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004750:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3314      	adds	r3, #20
 8004762:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004766:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800476a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004772:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004776:	e841 2300 	strex	r3, r2, [r1]
 800477a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800477e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1d9      	bne.n	800473a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	2b00      	cmp	r3, #0
 800478c:	d013      	beq.n	80047b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004792:	4a7d      	ldr	r2, [pc, #500]	; (8004988 <HAL_UART_IRQHandler+0x3dc>)
 8004794:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	4618      	mov	r0, r3
 800479c:	f7fd feb9 	bl	8002512 <HAL_DMA_Abort_IT>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d016      	beq.n	80047d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047b0:	4610      	mov	r0, r2
 80047b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	e00e      	b.n	80047d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f99a 	bl	8004af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047bc:	e00a      	b.n	80047d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f996 	bl	8004af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c4:	e006      	b.n	80047d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f992 	bl	8004af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80047d2:	e170      	b.n	8004ab6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d4:	bf00      	nop
    return;
 80047d6:	e16e      	b.n	8004ab6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	2b01      	cmp	r3, #1
 80047de:	f040 814a 	bne.w	8004a76 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e6:	f003 0310 	and.w	r3, r3, #16
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8143 	beq.w	8004a76 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 813c 	beq.w	8004a76 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047fe:	2300      	movs	r3, #0
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	60bb      	str	r3, [r7, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481e:	2b40      	cmp	r3, #64	; 0x40
 8004820:	f040 80b4 	bne.w	800498c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004830:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8140 	beq.w	8004aba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800483e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004842:	429a      	cmp	r2, r3
 8004844:	f080 8139 	bcs.w	8004aba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800484e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800485a:	f000 8088 	beq.w	800496e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	330c      	adds	r3, #12
 8004864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800487c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	330c      	adds	r3, #12
 8004886:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800488a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800488e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004896:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1d9      	bne.n	800485e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3314      	adds	r3, #20
 80048b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048bc:	f023 0301 	bic.w	r3, r3, #1
 80048c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3314      	adds	r3, #20
 80048ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e1      	bne.n	80048aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3314      	adds	r3, #20
 80048ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3314      	adds	r3, #20
 8004906:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800490a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800490c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004910:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004912:	e841 2300 	strex	r3, r2, [r1]
 8004916:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1e3      	bne.n	80048e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	330c      	adds	r3, #12
 8004932:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800493c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800493e:	f023 0310 	bic.w	r3, r3, #16
 8004942:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	330c      	adds	r3, #12
 800494c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004950:	65ba      	str	r2, [r7, #88]	; 0x58
 8004952:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004956:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800495e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e3      	bne.n	800492c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	4618      	mov	r0, r3
 800496a:	f7fd fd62 	bl	8002432 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004976:	b29b      	uxth	r3, r3
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	b29b      	uxth	r3, r3
 800497c:	4619      	mov	r1, r3
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f8c0 	bl	8004b04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004984:	e099      	b.n	8004aba <HAL_UART_IRQHandler+0x50e>
 8004986:	bf00      	nop
 8004988:	08004be3 	.word	0x08004be3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004994:	b29b      	uxth	r3, r3
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 808b 	beq.w	8004abe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80049a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 8086 	beq.w	8004abe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	330c      	adds	r3, #12
 80049b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	330c      	adds	r3, #12
 80049d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049d6:	647a      	str	r2, [r7, #68]	; 0x44
 80049d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e3      	bne.n	80049b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3314      	adds	r3, #20
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	623b      	str	r3, [r7, #32]
   return(result);
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	f023 0301 	bic.w	r3, r3, #1
 8004a00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3314      	adds	r3, #20
 8004a0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a0e:	633a      	str	r2, [r7, #48]	; 0x30
 8004a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e3      	bne.n	80049ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0310 	bic.w	r3, r3, #16
 8004a46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	330c      	adds	r3, #12
 8004a50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a54:	61fa      	str	r2, [r7, #28]
 8004a56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	69b9      	ldr	r1, [r7, #24]
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	e841 2300 	strex	r3, r2, [r1]
 8004a60:	617b      	str	r3, [r7, #20]
   return(result);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e3      	bne.n	8004a30 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f848 	bl	8004b04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a74:	e023      	b.n	8004abe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <HAL_UART_IRQHandler+0x4ea>
 8004a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f8bb 	bl	8004c0a <UART_Transmit_IT>
    return;
 8004a94:	e014      	b.n	8004ac0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00e      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x514>
 8004aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d008      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f8fb 	bl	8004caa <UART_EndTransmit_IT>
    return;
 8004ab4:	e004      	b.n	8004ac0 <HAL_UART_IRQHandler+0x514>
    return;
 8004ab6:	bf00      	nop
 8004ab8:	e002      	b.n	8004ac0 <HAL_UART_IRQHandler+0x514>
      return;
 8004aba:	bf00      	nop
 8004abc:	e000      	b.n	8004ac0 <HAL_UART_IRQHandler+0x514>
      return;
 8004abe:	bf00      	nop
  }
}
 8004ac0:	37e8      	adds	r7, #232	; 0xe8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop

08004ac8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b095      	sub	sp, #84	; 0x54
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	330c      	adds	r3, #12
 8004b2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	330c      	adds	r3, #12
 8004b42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b44:	643a      	str	r2, [r7, #64]	; 0x40
 8004b46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b4c:	e841 2300 	strex	r3, r2, [r1]
 8004b50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1e5      	bne.n	8004b24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3314      	adds	r3, #20
 8004b5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	e853 3f00 	ldrex	r3, [r3]
 8004b66:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3314      	adds	r3, #20
 8004b76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b80:	e841 2300 	strex	r3, r2, [r1]
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1e5      	bne.n	8004b58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d119      	bne.n	8004bc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	330c      	adds	r3, #12
 8004b9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	e853 3f00 	ldrex	r3, [r3]
 8004ba2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f023 0310 	bic.w	r3, r3, #16
 8004baa:	647b      	str	r3, [r7, #68]	; 0x44
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bb4:	61ba      	str	r2, [r7, #24]
 8004bb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb8:	6979      	ldr	r1, [r7, #20]
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	e841 2300 	strex	r3, r2, [r1]
 8004bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e5      	bne.n	8004b94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bd6:	bf00      	nop
 8004bd8:	3754      	adds	r7, #84	; 0x54
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b084      	sub	sp, #16
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f7ff ff77 	bl	8004af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c02:	bf00      	nop
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b085      	sub	sp, #20
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b21      	cmp	r3, #33	; 0x21
 8004c1c:	d13e      	bne.n	8004c9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c26:	d114      	bne.n	8004c52 <UART_Transmit_IT+0x48>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d110      	bne.n	8004c52 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	1c9a      	adds	r2, r3, #2
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	621a      	str	r2, [r3, #32]
 8004c50:	e008      	b.n	8004c64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	1c59      	adds	r1, r3, #1
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6211      	str	r1, [r2, #32]
 8004c5c:	781a      	ldrb	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	4619      	mov	r1, r3
 8004c72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10f      	bne.n	8004c98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e000      	b.n	8004c9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c9c:	2302      	movs	r3, #2
  }
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b082      	sub	sp, #8
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff fefc 	bl	8004ac8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b08c      	sub	sp, #48	; 0x30
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b22      	cmp	r3, #34	; 0x22
 8004cec:	f040 80ab 	bne.w	8004e46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf8:	d117      	bne.n	8004d2a <UART_Receive_IT+0x50>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d113      	bne.n	8004d2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d22:	1c9a      	adds	r2, r3, #2
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28
 8004d28:	e026      	b.n	8004d78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d3c:	d007      	beq.n	8004d4e <UART_Receive_IT+0x74>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10a      	bne.n	8004d5c <UART_Receive_IT+0x82>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d106      	bne.n	8004d5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	e008      	b.n	8004d6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	4619      	mov	r1, r3
 8004d86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d15a      	bne.n	8004e42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0220 	bic.w	r2, r2, #32
 8004d9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004daa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695a      	ldr	r2, [r3, #20]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0201 	bic.w	r2, r2, #1
 8004dba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d135      	bne.n	8004e38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	330c      	adds	r3, #12
 8004dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	613b      	str	r3, [r7, #16]
   return(result);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f023 0310 	bic.w	r3, r3, #16
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	330c      	adds	r3, #12
 8004df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df2:	623a      	str	r2, [r7, #32]
 8004df4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	69f9      	ldr	r1, [r7, #28]
 8004df8:	6a3a      	ldr	r2, [r7, #32]
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e5      	bne.n	8004dd2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0310 	and.w	r3, r3, #16
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d10a      	bne.n	8004e2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff fe67 	bl	8004b04 <HAL_UARTEx_RxEventCallback>
 8004e36:	e002      	b.n	8004e3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff fe4f 	bl	8004adc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e002      	b.n	8004e48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	e000      	b.n	8004e48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004e46:	2302      	movs	r3, #2
  }
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3730      	adds	r7, #48	; 0x30
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e54:	b0c0      	sub	sp, #256	; 0x100
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	68d9      	ldr	r1, [r3, #12]
 8004e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	ea40 0301 	orr.w	r3, r0, r1
 8004e78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ea8:	f021 010c 	bic.w	r1, r1, #12
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004eb6:	430b      	orrs	r3, r1
 8004eb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eca:	6999      	ldr	r1, [r3, #24]
 8004ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	ea40 0301 	orr.w	r3, r0, r1
 8004ed6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4b8f      	ldr	r3, [pc, #572]	; (800511c <UART_SetConfig+0x2cc>)
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d005      	beq.n	8004ef0 <UART_SetConfig+0xa0>
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4b8d      	ldr	r3, [pc, #564]	; (8005120 <UART_SetConfig+0x2d0>)
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d104      	bne.n	8004efa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ef0:	f7fe f96c 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
 8004ef4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ef8:	e003      	b.n	8004f02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004efa:	f7fe f953 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 8004efe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f0c:	f040 810c 	bne.w	8005128 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f22:	4622      	mov	r2, r4
 8004f24:	462b      	mov	r3, r5
 8004f26:	1891      	adds	r1, r2, r2
 8004f28:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f2a:	415b      	adcs	r3, r3
 8004f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f32:	4621      	mov	r1, r4
 8004f34:	eb12 0801 	adds.w	r8, r2, r1
 8004f38:	4629      	mov	r1, r5
 8004f3a:	eb43 0901 	adc.w	r9, r3, r1
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f52:	4690      	mov	r8, r2
 8004f54:	4699      	mov	r9, r3
 8004f56:	4623      	mov	r3, r4
 8004f58:	eb18 0303 	adds.w	r3, r8, r3
 8004f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f60:	462b      	mov	r3, r5
 8004f62:	eb49 0303 	adc.w	r3, r9, r3
 8004f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f7e:	460b      	mov	r3, r1
 8004f80:	18db      	adds	r3, r3, r3
 8004f82:	653b      	str	r3, [r7, #80]	; 0x50
 8004f84:	4613      	mov	r3, r2
 8004f86:	eb42 0303 	adc.w	r3, r2, r3
 8004f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f94:	f7fb fddc 	bl	8000b50 <__aeabi_uldivmod>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4b61      	ldr	r3, [pc, #388]	; (8005124 <UART_SetConfig+0x2d4>)
 8004f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	011c      	lsls	r4, r3, #4
 8004fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fb0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004fb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004fb8:	4642      	mov	r2, r8
 8004fba:	464b      	mov	r3, r9
 8004fbc:	1891      	adds	r1, r2, r2
 8004fbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fc0:	415b      	adcs	r3, r3
 8004fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fc8:	4641      	mov	r1, r8
 8004fca:	eb12 0a01 	adds.w	sl, r2, r1
 8004fce:	4649      	mov	r1, r9
 8004fd0:	eb43 0b01 	adc.w	fp, r3, r1
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fe0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fe4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fe8:	4692      	mov	sl, r2
 8004fea:	469b      	mov	fp, r3
 8004fec:	4643      	mov	r3, r8
 8004fee:	eb1a 0303 	adds.w	r3, sl, r3
 8004ff2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	eb4b 0303 	adc.w	r3, fp, r3
 8004ffc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800500c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005010:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005014:	460b      	mov	r3, r1
 8005016:	18db      	adds	r3, r3, r3
 8005018:	643b      	str	r3, [r7, #64]	; 0x40
 800501a:	4613      	mov	r3, r2
 800501c:	eb42 0303 	adc.w	r3, r2, r3
 8005020:	647b      	str	r3, [r7, #68]	; 0x44
 8005022:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005026:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800502a:	f7fb fd91 	bl	8000b50 <__aeabi_uldivmod>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4611      	mov	r1, r2
 8005034:	4b3b      	ldr	r3, [pc, #236]	; (8005124 <UART_SetConfig+0x2d4>)
 8005036:	fba3 2301 	umull	r2, r3, r3, r1
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	2264      	movs	r2, #100	; 0x64
 800503e:	fb02 f303 	mul.w	r3, r2, r3
 8005042:	1acb      	subs	r3, r1, r3
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800504a:	4b36      	ldr	r3, [pc, #216]	; (8005124 <UART_SetConfig+0x2d4>)
 800504c:	fba3 2302 	umull	r2, r3, r3, r2
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005058:	441c      	add	r4, r3
 800505a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800505e:	2200      	movs	r2, #0
 8005060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005064:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005068:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800506c:	4642      	mov	r2, r8
 800506e:	464b      	mov	r3, r9
 8005070:	1891      	adds	r1, r2, r2
 8005072:	63b9      	str	r1, [r7, #56]	; 0x38
 8005074:	415b      	adcs	r3, r3
 8005076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005078:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800507c:	4641      	mov	r1, r8
 800507e:	1851      	adds	r1, r2, r1
 8005080:	6339      	str	r1, [r7, #48]	; 0x30
 8005082:	4649      	mov	r1, r9
 8005084:	414b      	adcs	r3, r1
 8005086:	637b      	str	r3, [r7, #52]	; 0x34
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005094:	4659      	mov	r1, fp
 8005096:	00cb      	lsls	r3, r1, #3
 8005098:	4651      	mov	r1, sl
 800509a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800509e:	4651      	mov	r1, sl
 80050a0:	00ca      	lsls	r2, r1, #3
 80050a2:	4610      	mov	r0, r2
 80050a4:	4619      	mov	r1, r3
 80050a6:	4603      	mov	r3, r0
 80050a8:	4642      	mov	r2, r8
 80050aa:	189b      	adds	r3, r3, r2
 80050ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050b0:	464b      	mov	r3, r9
 80050b2:	460a      	mov	r2, r1
 80050b4:	eb42 0303 	adc.w	r3, r2, r3
 80050b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050d0:	460b      	mov	r3, r1
 80050d2:	18db      	adds	r3, r3, r3
 80050d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050d6:	4613      	mov	r3, r2
 80050d8:	eb42 0303 	adc.w	r3, r2, r3
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050e6:	f7fb fd33 	bl	8000b50 <__aeabi_uldivmod>
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <UART_SetConfig+0x2d4>)
 80050f0:	fba3 1302 	umull	r1, r3, r3, r2
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	2164      	movs	r1, #100	; 0x64
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	3332      	adds	r3, #50	; 0x32
 8005102:	4a08      	ldr	r2, [pc, #32]	; (8005124 <UART_SetConfig+0x2d4>)
 8005104:	fba2 2303 	umull	r2, r3, r2, r3
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	f003 0207 	and.w	r2, r3, #7
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4422      	add	r2, r4
 8005116:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005118:	e105      	b.n	8005326 <UART_SetConfig+0x4d6>
 800511a:	bf00      	nop
 800511c:	40011000 	.word	0x40011000
 8005120:	40011400 	.word	0x40011400
 8005124:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800512c:	2200      	movs	r2, #0
 800512e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005132:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005136:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800513a:	4642      	mov	r2, r8
 800513c:	464b      	mov	r3, r9
 800513e:	1891      	adds	r1, r2, r2
 8005140:	6239      	str	r1, [r7, #32]
 8005142:	415b      	adcs	r3, r3
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
 8005146:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800514a:	4641      	mov	r1, r8
 800514c:	1854      	adds	r4, r2, r1
 800514e:	4649      	mov	r1, r9
 8005150:	eb43 0501 	adc.w	r5, r3, r1
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	00eb      	lsls	r3, r5, #3
 800515e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005162:	00e2      	lsls	r2, r4, #3
 8005164:	4614      	mov	r4, r2
 8005166:	461d      	mov	r5, r3
 8005168:	4643      	mov	r3, r8
 800516a:	18e3      	adds	r3, r4, r3
 800516c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005170:	464b      	mov	r3, r9
 8005172:	eb45 0303 	adc.w	r3, r5, r3
 8005176:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800517a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005186:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005196:	4629      	mov	r1, r5
 8005198:	008b      	lsls	r3, r1, #2
 800519a:	4621      	mov	r1, r4
 800519c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051a0:	4621      	mov	r1, r4
 80051a2:	008a      	lsls	r2, r1, #2
 80051a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051a8:	f7fb fcd2 	bl	8000b50 <__aeabi_uldivmod>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4b60      	ldr	r3, [pc, #384]	; (8005334 <UART_SetConfig+0x4e4>)
 80051b2:	fba3 2302 	umull	r2, r3, r3, r2
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	011c      	lsls	r4, r3, #4
 80051ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051be:	2200      	movs	r2, #0
 80051c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051cc:	4642      	mov	r2, r8
 80051ce:	464b      	mov	r3, r9
 80051d0:	1891      	adds	r1, r2, r2
 80051d2:	61b9      	str	r1, [r7, #24]
 80051d4:	415b      	adcs	r3, r3
 80051d6:	61fb      	str	r3, [r7, #28]
 80051d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051dc:	4641      	mov	r1, r8
 80051de:	1851      	adds	r1, r2, r1
 80051e0:	6139      	str	r1, [r7, #16]
 80051e2:	4649      	mov	r1, r9
 80051e4:	414b      	adcs	r3, r1
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051f4:	4659      	mov	r1, fp
 80051f6:	00cb      	lsls	r3, r1, #3
 80051f8:	4651      	mov	r1, sl
 80051fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051fe:	4651      	mov	r1, sl
 8005200:	00ca      	lsls	r2, r1, #3
 8005202:	4610      	mov	r0, r2
 8005204:	4619      	mov	r1, r3
 8005206:	4603      	mov	r3, r0
 8005208:	4642      	mov	r2, r8
 800520a:	189b      	adds	r3, r3, r2
 800520c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005210:	464b      	mov	r3, r9
 8005212:	460a      	mov	r2, r1
 8005214:	eb42 0303 	adc.w	r3, r2, r3
 8005218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	67bb      	str	r3, [r7, #120]	; 0x78
 8005226:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005234:	4649      	mov	r1, r9
 8005236:	008b      	lsls	r3, r1, #2
 8005238:	4641      	mov	r1, r8
 800523a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800523e:	4641      	mov	r1, r8
 8005240:	008a      	lsls	r2, r1, #2
 8005242:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005246:	f7fb fc83 	bl	8000b50 <__aeabi_uldivmod>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4b39      	ldr	r3, [pc, #228]	; (8005334 <UART_SetConfig+0x4e4>)
 8005250:	fba3 1302 	umull	r1, r3, r3, r2
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	2164      	movs	r1, #100	; 0x64
 8005258:	fb01 f303 	mul.w	r3, r1, r3
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	3332      	adds	r3, #50	; 0x32
 8005262:	4a34      	ldr	r2, [pc, #208]	; (8005334 <UART_SetConfig+0x4e4>)
 8005264:	fba2 2303 	umull	r2, r3, r2, r3
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800526e:	441c      	add	r4, r3
 8005270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005274:	2200      	movs	r2, #0
 8005276:	673b      	str	r3, [r7, #112]	; 0x70
 8005278:	677a      	str	r2, [r7, #116]	; 0x74
 800527a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800527e:	4642      	mov	r2, r8
 8005280:	464b      	mov	r3, r9
 8005282:	1891      	adds	r1, r2, r2
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	415b      	adcs	r3, r3
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800528e:	4641      	mov	r1, r8
 8005290:	1851      	adds	r1, r2, r1
 8005292:	6039      	str	r1, [r7, #0]
 8005294:	4649      	mov	r1, r9
 8005296:	414b      	adcs	r3, r1
 8005298:	607b      	str	r3, [r7, #4]
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052a6:	4659      	mov	r1, fp
 80052a8:	00cb      	lsls	r3, r1, #3
 80052aa:	4651      	mov	r1, sl
 80052ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052b0:	4651      	mov	r1, sl
 80052b2:	00ca      	lsls	r2, r1, #3
 80052b4:	4610      	mov	r0, r2
 80052b6:	4619      	mov	r1, r3
 80052b8:	4603      	mov	r3, r0
 80052ba:	4642      	mov	r2, r8
 80052bc:	189b      	adds	r3, r3, r2
 80052be:	66bb      	str	r3, [r7, #104]	; 0x68
 80052c0:	464b      	mov	r3, r9
 80052c2:	460a      	mov	r2, r1
 80052c4:	eb42 0303 	adc.w	r3, r2, r3
 80052c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	663b      	str	r3, [r7, #96]	; 0x60
 80052d4:	667a      	str	r2, [r7, #100]	; 0x64
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052e2:	4649      	mov	r1, r9
 80052e4:	008b      	lsls	r3, r1, #2
 80052e6:	4641      	mov	r1, r8
 80052e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052ec:	4641      	mov	r1, r8
 80052ee:	008a      	lsls	r2, r1, #2
 80052f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052f4:	f7fb fc2c 	bl	8000b50 <__aeabi_uldivmod>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <UART_SetConfig+0x4e4>)
 80052fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	2164      	movs	r1, #100	; 0x64
 8005306:	fb01 f303 	mul.w	r3, r1, r3
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	3332      	adds	r3, #50	; 0x32
 8005310:	4a08      	ldr	r2, [pc, #32]	; (8005334 <UART_SetConfig+0x4e4>)
 8005312:	fba2 2303 	umull	r2, r3, r2, r3
 8005316:	095b      	lsrs	r3, r3, #5
 8005318:	f003 020f 	and.w	r2, r3, #15
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4422      	add	r2, r4
 8005324:	609a      	str	r2, [r3, #8]
}
 8005326:	bf00      	nop
 8005328:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800532c:	46bd      	mov	sp, r7
 800532e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005332:	bf00      	nop
 8005334:	51eb851f 	.word	0x51eb851f

08005338 <__errno>:
 8005338:	4b01      	ldr	r3, [pc, #4]	; (8005340 <__errno+0x8>)
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000044 	.word	0x20000044

08005344 <__libc_init_array>:
 8005344:	b570      	push	{r4, r5, r6, lr}
 8005346:	4d0d      	ldr	r5, [pc, #52]	; (800537c <__libc_init_array+0x38>)
 8005348:	4c0d      	ldr	r4, [pc, #52]	; (8005380 <__libc_init_array+0x3c>)
 800534a:	1b64      	subs	r4, r4, r5
 800534c:	10a4      	asrs	r4, r4, #2
 800534e:	2600      	movs	r6, #0
 8005350:	42a6      	cmp	r6, r4
 8005352:	d109      	bne.n	8005368 <__libc_init_array+0x24>
 8005354:	4d0b      	ldr	r5, [pc, #44]	; (8005384 <__libc_init_array+0x40>)
 8005356:	4c0c      	ldr	r4, [pc, #48]	; (8005388 <__libc_init_array+0x44>)
 8005358:	f000 ff3c 	bl	80061d4 <_init>
 800535c:	1b64      	subs	r4, r4, r5
 800535e:	10a4      	asrs	r4, r4, #2
 8005360:	2600      	movs	r6, #0
 8005362:	42a6      	cmp	r6, r4
 8005364:	d105      	bne.n	8005372 <__libc_init_array+0x2e>
 8005366:	bd70      	pop	{r4, r5, r6, pc}
 8005368:	f855 3b04 	ldr.w	r3, [r5], #4
 800536c:	4798      	blx	r3
 800536e:	3601      	adds	r6, #1
 8005370:	e7ee      	b.n	8005350 <__libc_init_array+0xc>
 8005372:	f855 3b04 	ldr.w	r3, [r5], #4
 8005376:	4798      	blx	r3
 8005378:	3601      	adds	r6, #1
 800537a:	e7f2      	b.n	8005362 <__libc_init_array+0x1e>
 800537c:	08006240 	.word	0x08006240
 8005380:	08006240 	.word	0x08006240
 8005384:	08006240 	.word	0x08006240
 8005388:	08006244 	.word	0x08006244

0800538c <memset>:
 800538c:	4402      	add	r2, r0
 800538e:	4603      	mov	r3, r0
 8005390:	4293      	cmp	r3, r2
 8005392:	d100      	bne.n	8005396 <memset+0xa>
 8005394:	4770      	bx	lr
 8005396:	f803 1b01 	strb.w	r1, [r3], #1
 800539a:	e7f9      	b.n	8005390 <memset+0x4>

0800539c <pow>:
 800539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539e:	ed2d 8b02 	vpush	{d8}
 80053a2:	eeb0 8a40 	vmov.f32	s16, s0
 80053a6:	eef0 8a60 	vmov.f32	s17, s1
 80053aa:	ec55 4b11 	vmov	r4, r5, d1
 80053ae:	f000 f867 	bl	8005480 <__ieee754_pow>
 80053b2:	4622      	mov	r2, r4
 80053b4:	462b      	mov	r3, r5
 80053b6:	4620      	mov	r0, r4
 80053b8:	4629      	mov	r1, r5
 80053ba:	ec57 6b10 	vmov	r6, r7, d0
 80053be:	f7fb fb61 	bl	8000a84 <__aeabi_dcmpun>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d13b      	bne.n	800543e <pow+0xa2>
 80053c6:	ec51 0b18 	vmov	r0, r1, d8
 80053ca:	2200      	movs	r2, #0
 80053cc:	2300      	movs	r3, #0
 80053ce:	f7fb fb27 	bl	8000a20 <__aeabi_dcmpeq>
 80053d2:	b1b8      	cbz	r0, 8005404 <pow+0x68>
 80053d4:	2200      	movs	r2, #0
 80053d6:	2300      	movs	r3, #0
 80053d8:	4620      	mov	r0, r4
 80053da:	4629      	mov	r1, r5
 80053dc:	f7fb fb20 	bl	8000a20 <__aeabi_dcmpeq>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d146      	bne.n	8005472 <pow+0xd6>
 80053e4:	ec45 4b10 	vmov	d0, r4, r5
 80053e8:	f000 fe63 	bl	80060b2 <finite>
 80053ec:	b338      	cbz	r0, 800543e <pow+0xa2>
 80053ee:	2200      	movs	r2, #0
 80053f0:	2300      	movs	r3, #0
 80053f2:	4620      	mov	r0, r4
 80053f4:	4629      	mov	r1, r5
 80053f6:	f7fb fb1d 	bl	8000a34 <__aeabi_dcmplt>
 80053fa:	b300      	cbz	r0, 800543e <pow+0xa2>
 80053fc:	f7ff ff9c 	bl	8005338 <__errno>
 8005400:	2322      	movs	r3, #34	; 0x22
 8005402:	e01b      	b.n	800543c <pow+0xa0>
 8005404:	ec47 6b10 	vmov	d0, r6, r7
 8005408:	f000 fe53 	bl	80060b2 <finite>
 800540c:	b9e0      	cbnz	r0, 8005448 <pow+0xac>
 800540e:	eeb0 0a48 	vmov.f32	s0, s16
 8005412:	eef0 0a68 	vmov.f32	s1, s17
 8005416:	f000 fe4c 	bl	80060b2 <finite>
 800541a:	b1a8      	cbz	r0, 8005448 <pow+0xac>
 800541c:	ec45 4b10 	vmov	d0, r4, r5
 8005420:	f000 fe47 	bl	80060b2 <finite>
 8005424:	b180      	cbz	r0, 8005448 <pow+0xac>
 8005426:	4632      	mov	r2, r6
 8005428:	463b      	mov	r3, r7
 800542a:	4630      	mov	r0, r6
 800542c:	4639      	mov	r1, r7
 800542e:	f7fb fb29 	bl	8000a84 <__aeabi_dcmpun>
 8005432:	2800      	cmp	r0, #0
 8005434:	d0e2      	beq.n	80053fc <pow+0x60>
 8005436:	f7ff ff7f 	bl	8005338 <__errno>
 800543a:	2321      	movs	r3, #33	; 0x21
 800543c:	6003      	str	r3, [r0, #0]
 800543e:	ecbd 8b02 	vpop	{d8}
 8005442:	ec47 6b10 	vmov	d0, r6, r7
 8005446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005448:	2200      	movs	r2, #0
 800544a:	2300      	movs	r3, #0
 800544c:	4630      	mov	r0, r6
 800544e:	4639      	mov	r1, r7
 8005450:	f7fb fae6 	bl	8000a20 <__aeabi_dcmpeq>
 8005454:	2800      	cmp	r0, #0
 8005456:	d0f2      	beq.n	800543e <pow+0xa2>
 8005458:	eeb0 0a48 	vmov.f32	s0, s16
 800545c:	eef0 0a68 	vmov.f32	s1, s17
 8005460:	f000 fe27 	bl	80060b2 <finite>
 8005464:	2800      	cmp	r0, #0
 8005466:	d0ea      	beq.n	800543e <pow+0xa2>
 8005468:	ec45 4b10 	vmov	d0, r4, r5
 800546c:	f000 fe21 	bl	80060b2 <finite>
 8005470:	e7c3      	b.n	80053fa <pow+0x5e>
 8005472:	4f01      	ldr	r7, [pc, #4]	; (8005478 <pow+0xdc>)
 8005474:	2600      	movs	r6, #0
 8005476:	e7e2      	b.n	800543e <pow+0xa2>
 8005478:	3ff00000 	.word	0x3ff00000
 800547c:	00000000 	.word	0x00000000

08005480 <__ieee754_pow>:
 8005480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005484:	ed2d 8b06 	vpush	{d8-d10}
 8005488:	b089      	sub	sp, #36	; 0x24
 800548a:	ed8d 1b00 	vstr	d1, [sp]
 800548e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005492:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005496:	ea58 0102 	orrs.w	r1, r8, r2
 800549a:	ec57 6b10 	vmov	r6, r7, d0
 800549e:	d115      	bne.n	80054cc <__ieee754_pow+0x4c>
 80054a0:	19b3      	adds	r3, r6, r6
 80054a2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80054a6:	4152      	adcs	r2, r2
 80054a8:	4299      	cmp	r1, r3
 80054aa:	4b89      	ldr	r3, [pc, #548]	; (80056d0 <__ieee754_pow+0x250>)
 80054ac:	4193      	sbcs	r3, r2
 80054ae:	f080 84d2 	bcs.w	8005e56 <__ieee754_pow+0x9d6>
 80054b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054b6:	4630      	mov	r0, r6
 80054b8:	4639      	mov	r1, r7
 80054ba:	f7fa fe93 	bl	80001e4 <__adddf3>
 80054be:	ec41 0b10 	vmov	d0, r0, r1
 80054c2:	b009      	add	sp, #36	; 0x24
 80054c4:	ecbd 8b06 	vpop	{d8-d10}
 80054c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054cc:	4b81      	ldr	r3, [pc, #516]	; (80056d4 <__ieee754_pow+0x254>)
 80054ce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80054d2:	429c      	cmp	r4, r3
 80054d4:	ee10 aa10 	vmov	sl, s0
 80054d8:	463d      	mov	r5, r7
 80054da:	dc06      	bgt.n	80054ea <__ieee754_pow+0x6a>
 80054dc:	d101      	bne.n	80054e2 <__ieee754_pow+0x62>
 80054de:	2e00      	cmp	r6, #0
 80054e0:	d1e7      	bne.n	80054b2 <__ieee754_pow+0x32>
 80054e2:	4598      	cmp	r8, r3
 80054e4:	dc01      	bgt.n	80054ea <__ieee754_pow+0x6a>
 80054e6:	d10f      	bne.n	8005508 <__ieee754_pow+0x88>
 80054e8:	b172      	cbz	r2, 8005508 <__ieee754_pow+0x88>
 80054ea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80054ee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80054f2:	ea55 050a 	orrs.w	r5, r5, sl
 80054f6:	d1dc      	bne.n	80054b2 <__ieee754_pow+0x32>
 80054f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80054fc:	18db      	adds	r3, r3, r3
 80054fe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005502:	4152      	adcs	r2, r2
 8005504:	429d      	cmp	r5, r3
 8005506:	e7d0      	b.n	80054aa <__ieee754_pow+0x2a>
 8005508:	2d00      	cmp	r5, #0
 800550a:	da3b      	bge.n	8005584 <__ieee754_pow+0x104>
 800550c:	4b72      	ldr	r3, [pc, #456]	; (80056d8 <__ieee754_pow+0x258>)
 800550e:	4598      	cmp	r8, r3
 8005510:	dc51      	bgt.n	80055b6 <__ieee754_pow+0x136>
 8005512:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005516:	4598      	cmp	r8, r3
 8005518:	f340 84ac 	ble.w	8005e74 <__ieee754_pow+0x9f4>
 800551c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005520:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005524:	2b14      	cmp	r3, #20
 8005526:	dd0f      	ble.n	8005548 <__ieee754_pow+0xc8>
 8005528:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800552c:	fa22 f103 	lsr.w	r1, r2, r3
 8005530:	fa01 f303 	lsl.w	r3, r1, r3
 8005534:	4293      	cmp	r3, r2
 8005536:	f040 849d 	bne.w	8005e74 <__ieee754_pow+0x9f4>
 800553a:	f001 0101 	and.w	r1, r1, #1
 800553e:	f1c1 0302 	rsb	r3, r1, #2
 8005542:	9304      	str	r3, [sp, #16]
 8005544:	b182      	cbz	r2, 8005568 <__ieee754_pow+0xe8>
 8005546:	e05f      	b.n	8005608 <__ieee754_pow+0x188>
 8005548:	2a00      	cmp	r2, #0
 800554a:	d15b      	bne.n	8005604 <__ieee754_pow+0x184>
 800554c:	f1c3 0314 	rsb	r3, r3, #20
 8005550:	fa48 f103 	asr.w	r1, r8, r3
 8005554:	fa01 f303 	lsl.w	r3, r1, r3
 8005558:	4543      	cmp	r3, r8
 800555a:	f040 8488 	bne.w	8005e6e <__ieee754_pow+0x9ee>
 800555e:	f001 0101 	and.w	r1, r1, #1
 8005562:	f1c1 0302 	rsb	r3, r1, #2
 8005566:	9304      	str	r3, [sp, #16]
 8005568:	4b5c      	ldr	r3, [pc, #368]	; (80056dc <__ieee754_pow+0x25c>)
 800556a:	4598      	cmp	r8, r3
 800556c:	d132      	bne.n	80055d4 <__ieee754_pow+0x154>
 800556e:	f1b9 0f00 	cmp.w	r9, #0
 8005572:	f280 8478 	bge.w	8005e66 <__ieee754_pow+0x9e6>
 8005576:	4959      	ldr	r1, [pc, #356]	; (80056dc <__ieee754_pow+0x25c>)
 8005578:	4632      	mov	r2, r6
 800557a:	463b      	mov	r3, r7
 800557c:	2000      	movs	r0, #0
 800557e:	f7fb f911 	bl	80007a4 <__aeabi_ddiv>
 8005582:	e79c      	b.n	80054be <__ieee754_pow+0x3e>
 8005584:	2300      	movs	r3, #0
 8005586:	9304      	str	r3, [sp, #16]
 8005588:	2a00      	cmp	r2, #0
 800558a:	d13d      	bne.n	8005608 <__ieee754_pow+0x188>
 800558c:	4b51      	ldr	r3, [pc, #324]	; (80056d4 <__ieee754_pow+0x254>)
 800558e:	4598      	cmp	r8, r3
 8005590:	d1ea      	bne.n	8005568 <__ieee754_pow+0xe8>
 8005592:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005596:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800559a:	ea53 030a 	orrs.w	r3, r3, sl
 800559e:	f000 845a 	beq.w	8005e56 <__ieee754_pow+0x9d6>
 80055a2:	4b4f      	ldr	r3, [pc, #316]	; (80056e0 <__ieee754_pow+0x260>)
 80055a4:	429c      	cmp	r4, r3
 80055a6:	dd08      	ble.n	80055ba <__ieee754_pow+0x13a>
 80055a8:	f1b9 0f00 	cmp.w	r9, #0
 80055ac:	f2c0 8457 	blt.w	8005e5e <__ieee754_pow+0x9de>
 80055b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055b4:	e783      	b.n	80054be <__ieee754_pow+0x3e>
 80055b6:	2302      	movs	r3, #2
 80055b8:	e7e5      	b.n	8005586 <__ieee754_pow+0x106>
 80055ba:	f1b9 0f00 	cmp.w	r9, #0
 80055be:	f04f 0000 	mov.w	r0, #0
 80055c2:	f04f 0100 	mov.w	r1, #0
 80055c6:	f6bf af7a 	bge.w	80054be <__ieee754_pow+0x3e>
 80055ca:	e9dd 0300 	ldrd	r0, r3, [sp]
 80055ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80055d2:	e774      	b.n	80054be <__ieee754_pow+0x3e>
 80055d4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80055d8:	d106      	bne.n	80055e8 <__ieee754_pow+0x168>
 80055da:	4632      	mov	r2, r6
 80055dc:	463b      	mov	r3, r7
 80055de:	4630      	mov	r0, r6
 80055e0:	4639      	mov	r1, r7
 80055e2:	f7fa ffb5 	bl	8000550 <__aeabi_dmul>
 80055e6:	e76a      	b.n	80054be <__ieee754_pow+0x3e>
 80055e8:	4b3e      	ldr	r3, [pc, #248]	; (80056e4 <__ieee754_pow+0x264>)
 80055ea:	4599      	cmp	r9, r3
 80055ec:	d10c      	bne.n	8005608 <__ieee754_pow+0x188>
 80055ee:	2d00      	cmp	r5, #0
 80055f0:	db0a      	blt.n	8005608 <__ieee754_pow+0x188>
 80055f2:	ec47 6b10 	vmov	d0, r6, r7
 80055f6:	b009      	add	sp, #36	; 0x24
 80055f8:	ecbd 8b06 	vpop	{d8-d10}
 80055fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005600:	f000 bc6c 	b.w	8005edc <__ieee754_sqrt>
 8005604:	2300      	movs	r3, #0
 8005606:	9304      	str	r3, [sp, #16]
 8005608:	ec47 6b10 	vmov	d0, r6, r7
 800560c:	f000 fd48 	bl	80060a0 <fabs>
 8005610:	ec51 0b10 	vmov	r0, r1, d0
 8005614:	f1ba 0f00 	cmp.w	sl, #0
 8005618:	d129      	bne.n	800566e <__ieee754_pow+0x1ee>
 800561a:	b124      	cbz	r4, 8005626 <__ieee754_pow+0x1a6>
 800561c:	4b2f      	ldr	r3, [pc, #188]	; (80056dc <__ieee754_pow+0x25c>)
 800561e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005622:	429a      	cmp	r2, r3
 8005624:	d123      	bne.n	800566e <__ieee754_pow+0x1ee>
 8005626:	f1b9 0f00 	cmp.w	r9, #0
 800562a:	da05      	bge.n	8005638 <__ieee754_pow+0x1b8>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	2000      	movs	r0, #0
 8005632:	492a      	ldr	r1, [pc, #168]	; (80056dc <__ieee754_pow+0x25c>)
 8005634:	f7fb f8b6 	bl	80007a4 <__aeabi_ddiv>
 8005638:	2d00      	cmp	r5, #0
 800563a:	f6bf af40 	bge.w	80054be <__ieee754_pow+0x3e>
 800563e:	9b04      	ldr	r3, [sp, #16]
 8005640:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005644:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005648:	4323      	orrs	r3, r4
 800564a:	d108      	bne.n	800565e <__ieee754_pow+0x1de>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4610      	mov	r0, r2
 8005652:	4619      	mov	r1, r3
 8005654:	f7fa fdc4 	bl	80001e0 <__aeabi_dsub>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	e78f      	b.n	800557e <__ieee754_pow+0xfe>
 800565e:	9b04      	ldr	r3, [sp, #16]
 8005660:	2b01      	cmp	r3, #1
 8005662:	f47f af2c 	bne.w	80054be <__ieee754_pow+0x3e>
 8005666:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800566a:	4619      	mov	r1, r3
 800566c:	e727      	b.n	80054be <__ieee754_pow+0x3e>
 800566e:	0feb      	lsrs	r3, r5, #31
 8005670:	3b01      	subs	r3, #1
 8005672:	9306      	str	r3, [sp, #24]
 8005674:	9a06      	ldr	r2, [sp, #24]
 8005676:	9b04      	ldr	r3, [sp, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	d102      	bne.n	8005682 <__ieee754_pow+0x202>
 800567c:	4632      	mov	r2, r6
 800567e:	463b      	mov	r3, r7
 8005680:	e7e6      	b.n	8005650 <__ieee754_pow+0x1d0>
 8005682:	4b19      	ldr	r3, [pc, #100]	; (80056e8 <__ieee754_pow+0x268>)
 8005684:	4598      	cmp	r8, r3
 8005686:	f340 80fb 	ble.w	8005880 <__ieee754_pow+0x400>
 800568a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800568e:	4598      	cmp	r8, r3
 8005690:	4b13      	ldr	r3, [pc, #76]	; (80056e0 <__ieee754_pow+0x260>)
 8005692:	dd0c      	ble.n	80056ae <__ieee754_pow+0x22e>
 8005694:	429c      	cmp	r4, r3
 8005696:	dc0f      	bgt.n	80056b8 <__ieee754_pow+0x238>
 8005698:	f1b9 0f00 	cmp.w	r9, #0
 800569c:	da0f      	bge.n	80056be <__ieee754_pow+0x23e>
 800569e:	2000      	movs	r0, #0
 80056a0:	b009      	add	sp, #36	; 0x24
 80056a2:	ecbd 8b06 	vpop	{d8-d10}
 80056a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056aa:	f000 bcf0 	b.w	800608e <__math_oflow>
 80056ae:	429c      	cmp	r4, r3
 80056b0:	dbf2      	blt.n	8005698 <__ieee754_pow+0x218>
 80056b2:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <__ieee754_pow+0x25c>)
 80056b4:	429c      	cmp	r4, r3
 80056b6:	dd19      	ble.n	80056ec <__ieee754_pow+0x26c>
 80056b8:	f1b9 0f00 	cmp.w	r9, #0
 80056bc:	dcef      	bgt.n	800569e <__ieee754_pow+0x21e>
 80056be:	2000      	movs	r0, #0
 80056c0:	b009      	add	sp, #36	; 0x24
 80056c2:	ecbd 8b06 	vpop	{d8-d10}
 80056c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ca:	f000 bcd7 	b.w	800607c <__math_uflow>
 80056ce:	bf00      	nop
 80056d0:	fff00000 	.word	0xfff00000
 80056d4:	7ff00000 	.word	0x7ff00000
 80056d8:	433fffff 	.word	0x433fffff
 80056dc:	3ff00000 	.word	0x3ff00000
 80056e0:	3fefffff 	.word	0x3fefffff
 80056e4:	3fe00000 	.word	0x3fe00000
 80056e8:	41e00000 	.word	0x41e00000
 80056ec:	4b60      	ldr	r3, [pc, #384]	; (8005870 <__ieee754_pow+0x3f0>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	f7fa fd76 	bl	80001e0 <__aeabi_dsub>
 80056f4:	a354      	add	r3, pc, #336	; (adr r3, 8005848 <__ieee754_pow+0x3c8>)
 80056f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fa:	4604      	mov	r4, r0
 80056fc:	460d      	mov	r5, r1
 80056fe:	f7fa ff27 	bl	8000550 <__aeabi_dmul>
 8005702:	a353      	add	r3, pc, #332	; (adr r3, 8005850 <__ieee754_pow+0x3d0>)
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	4606      	mov	r6, r0
 800570a:	460f      	mov	r7, r1
 800570c:	4620      	mov	r0, r4
 800570e:	4629      	mov	r1, r5
 8005710:	f7fa ff1e 	bl	8000550 <__aeabi_dmul>
 8005714:	4b57      	ldr	r3, [pc, #348]	; (8005874 <__ieee754_pow+0x3f4>)
 8005716:	4682      	mov	sl, r0
 8005718:	468b      	mov	fp, r1
 800571a:	2200      	movs	r2, #0
 800571c:	4620      	mov	r0, r4
 800571e:	4629      	mov	r1, r5
 8005720:	f7fa ff16 	bl	8000550 <__aeabi_dmul>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	a14b      	add	r1, pc, #300	; (adr r1, 8005858 <__ieee754_pow+0x3d8>)
 800572a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800572e:	f7fa fd57 	bl	80001e0 <__aeabi_dsub>
 8005732:	4622      	mov	r2, r4
 8005734:	462b      	mov	r3, r5
 8005736:	f7fa ff0b 	bl	8000550 <__aeabi_dmul>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	2000      	movs	r0, #0
 8005740:	494d      	ldr	r1, [pc, #308]	; (8005878 <__ieee754_pow+0x3f8>)
 8005742:	f7fa fd4d 	bl	80001e0 <__aeabi_dsub>
 8005746:	4622      	mov	r2, r4
 8005748:	4680      	mov	r8, r0
 800574a:	4689      	mov	r9, r1
 800574c:	462b      	mov	r3, r5
 800574e:	4620      	mov	r0, r4
 8005750:	4629      	mov	r1, r5
 8005752:	f7fa fefd 	bl	8000550 <__aeabi_dmul>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4640      	mov	r0, r8
 800575c:	4649      	mov	r1, r9
 800575e:	f7fa fef7 	bl	8000550 <__aeabi_dmul>
 8005762:	a33f      	add	r3, pc, #252	; (adr r3, 8005860 <__ieee754_pow+0x3e0>)
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	f7fa fef2 	bl	8000550 <__aeabi_dmul>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4650      	mov	r0, sl
 8005772:	4659      	mov	r1, fp
 8005774:	f7fa fd34 	bl	80001e0 <__aeabi_dsub>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4680      	mov	r8, r0
 800577e:	4689      	mov	r9, r1
 8005780:	4630      	mov	r0, r6
 8005782:	4639      	mov	r1, r7
 8005784:	f7fa fd2e 	bl	80001e4 <__adddf3>
 8005788:	2000      	movs	r0, #0
 800578a:	4632      	mov	r2, r6
 800578c:	463b      	mov	r3, r7
 800578e:	4604      	mov	r4, r0
 8005790:	460d      	mov	r5, r1
 8005792:	f7fa fd25 	bl	80001e0 <__aeabi_dsub>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4640      	mov	r0, r8
 800579c:	4649      	mov	r1, r9
 800579e:	f7fa fd1f 	bl	80001e0 <__aeabi_dsub>
 80057a2:	9b04      	ldr	r3, [sp, #16]
 80057a4:	9a06      	ldr	r2, [sp, #24]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	4313      	orrs	r3, r2
 80057aa:	4682      	mov	sl, r0
 80057ac:	468b      	mov	fp, r1
 80057ae:	f040 81e7 	bne.w	8005b80 <__ieee754_pow+0x700>
 80057b2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005868 <__ieee754_pow+0x3e8>
 80057b6:	eeb0 8a47 	vmov.f32	s16, s14
 80057ba:	eef0 8a67 	vmov.f32	s17, s15
 80057be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80057c2:	2600      	movs	r6, #0
 80057c4:	4632      	mov	r2, r6
 80057c6:	463b      	mov	r3, r7
 80057c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057cc:	f7fa fd08 	bl	80001e0 <__aeabi_dsub>
 80057d0:	4622      	mov	r2, r4
 80057d2:	462b      	mov	r3, r5
 80057d4:	f7fa febc 	bl	8000550 <__aeabi_dmul>
 80057d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057dc:	4680      	mov	r8, r0
 80057de:	4689      	mov	r9, r1
 80057e0:	4650      	mov	r0, sl
 80057e2:	4659      	mov	r1, fp
 80057e4:	f7fa feb4 	bl	8000550 <__aeabi_dmul>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4640      	mov	r0, r8
 80057ee:	4649      	mov	r1, r9
 80057f0:	f7fa fcf8 	bl	80001e4 <__adddf3>
 80057f4:	4632      	mov	r2, r6
 80057f6:	463b      	mov	r3, r7
 80057f8:	4680      	mov	r8, r0
 80057fa:	4689      	mov	r9, r1
 80057fc:	4620      	mov	r0, r4
 80057fe:	4629      	mov	r1, r5
 8005800:	f7fa fea6 	bl	8000550 <__aeabi_dmul>
 8005804:	460b      	mov	r3, r1
 8005806:	4604      	mov	r4, r0
 8005808:	460d      	mov	r5, r1
 800580a:	4602      	mov	r2, r0
 800580c:	4649      	mov	r1, r9
 800580e:	4640      	mov	r0, r8
 8005810:	f7fa fce8 	bl	80001e4 <__adddf3>
 8005814:	4b19      	ldr	r3, [pc, #100]	; (800587c <__ieee754_pow+0x3fc>)
 8005816:	4299      	cmp	r1, r3
 8005818:	ec45 4b19 	vmov	d9, r4, r5
 800581c:	4606      	mov	r6, r0
 800581e:	460f      	mov	r7, r1
 8005820:	468b      	mov	fp, r1
 8005822:	f340 82f1 	ble.w	8005e08 <__ieee754_pow+0x988>
 8005826:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800582a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800582e:	4303      	orrs	r3, r0
 8005830:	f000 81e4 	beq.w	8005bfc <__ieee754_pow+0x77c>
 8005834:	ec51 0b18 	vmov	r0, r1, d8
 8005838:	2200      	movs	r2, #0
 800583a:	2300      	movs	r3, #0
 800583c:	f7fb f8fa 	bl	8000a34 <__aeabi_dcmplt>
 8005840:	3800      	subs	r0, #0
 8005842:	bf18      	it	ne
 8005844:	2001      	movne	r0, #1
 8005846:	e72b      	b.n	80056a0 <__ieee754_pow+0x220>
 8005848:	60000000 	.word	0x60000000
 800584c:	3ff71547 	.word	0x3ff71547
 8005850:	f85ddf44 	.word	0xf85ddf44
 8005854:	3e54ae0b 	.word	0x3e54ae0b
 8005858:	55555555 	.word	0x55555555
 800585c:	3fd55555 	.word	0x3fd55555
 8005860:	652b82fe 	.word	0x652b82fe
 8005864:	3ff71547 	.word	0x3ff71547
 8005868:	00000000 	.word	0x00000000
 800586c:	bff00000 	.word	0xbff00000
 8005870:	3ff00000 	.word	0x3ff00000
 8005874:	3fd00000 	.word	0x3fd00000
 8005878:	3fe00000 	.word	0x3fe00000
 800587c:	408fffff 	.word	0x408fffff
 8005880:	4bd5      	ldr	r3, [pc, #852]	; (8005bd8 <__ieee754_pow+0x758>)
 8005882:	402b      	ands	r3, r5
 8005884:	2200      	movs	r2, #0
 8005886:	b92b      	cbnz	r3, 8005894 <__ieee754_pow+0x414>
 8005888:	4bd4      	ldr	r3, [pc, #848]	; (8005bdc <__ieee754_pow+0x75c>)
 800588a:	f7fa fe61 	bl	8000550 <__aeabi_dmul>
 800588e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005892:	460c      	mov	r4, r1
 8005894:	1523      	asrs	r3, r4, #20
 8005896:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800589a:	4413      	add	r3, r2
 800589c:	9305      	str	r3, [sp, #20]
 800589e:	4bd0      	ldr	r3, [pc, #832]	; (8005be0 <__ieee754_pow+0x760>)
 80058a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80058a4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80058a8:	429c      	cmp	r4, r3
 80058aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80058ae:	dd08      	ble.n	80058c2 <__ieee754_pow+0x442>
 80058b0:	4bcc      	ldr	r3, [pc, #816]	; (8005be4 <__ieee754_pow+0x764>)
 80058b2:	429c      	cmp	r4, r3
 80058b4:	f340 8162 	ble.w	8005b7c <__ieee754_pow+0x6fc>
 80058b8:	9b05      	ldr	r3, [sp, #20]
 80058ba:	3301      	adds	r3, #1
 80058bc:	9305      	str	r3, [sp, #20]
 80058be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80058c2:	2400      	movs	r4, #0
 80058c4:	00e3      	lsls	r3, r4, #3
 80058c6:	9307      	str	r3, [sp, #28]
 80058c8:	4bc7      	ldr	r3, [pc, #796]	; (8005be8 <__ieee754_pow+0x768>)
 80058ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058ce:	ed93 7b00 	vldr	d7, [r3]
 80058d2:	4629      	mov	r1, r5
 80058d4:	ec53 2b17 	vmov	r2, r3, d7
 80058d8:	eeb0 9a47 	vmov.f32	s18, s14
 80058dc:	eef0 9a67 	vmov.f32	s19, s15
 80058e0:	4682      	mov	sl, r0
 80058e2:	f7fa fc7d 	bl	80001e0 <__aeabi_dsub>
 80058e6:	4652      	mov	r2, sl
 80058e8:	4606      	mov	r6, r0
 80058ea:	460f      	mov	r7, r1
 80058ec:	462b      	mov	r3, r5
 80058ee:	ec51 0b19 	vmov	r0, r1, d9
 80058f2:	f7fa fc77 	bl	80001e4 <__adddf3>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	2000      	movs	r0, #0
 80058fc:	49bb      	ldr	r1, [pc, #748]	; (8005bec <__ieee754_pow+0x76c>)
 80058fe:	f7fa ff51 	bl	80007a4 <__aeabi_ddiv>
 8005902:	ec41 0b1a 	vmov	d10, r0, r1
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4630      	mov	r0, r6
 800590c:	4639      	mov	r1, r7
 800590e:	f7fa fe1f 	bl	8000550 <__aeabi_dmul>
 8005912:	2300      	movs	r3, #0
 8005914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005918:	9302      	str	r3, [sp, #8]
 800591a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800591e:	46ab      	mov	fp, r5
 8005920:	106d      	asrs	r5, r5, #1
 8005922:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005926:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800592a:	ec41 0b18 	vmov	d8, r0, r1
 800592e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005932:	2200      	movs	r2, #0
 8005934:	4640      	mov	r0, r8
 8005936:	4649      	mov	r1, r9
 8005938:	4614      	mov	r4, r2
 800593a:	461d      	mov	r5, r3
 800593c:	f7fa fe08 	bl	8000550 <__aeabi_dmul>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4630      	mov	r0, r6
 8005946:	4639      	mov	r1, r7
 8005948:	f7fa fc4a 	bl	80001e0 <__aeabi_dsub>
 800594c:	ec53 2b19 	vmov	r2, r3, d9
 8005950:	4606      	mov	r6, r0
 8005952:	460f      	mov	r7, r1
 8005954:	4620      	mov	r0, r4
 8005956:	4629      	mov	r1, r5
 8005958:	f7fa fc42 	bl	80001e0 <__aeabi_dsub>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4650      	mov	r0, sl
 8005962:	4659      	mov	r1, fp
 8005964:	f7fa fc3c 	bl	80001e0 <__aeabi_dsub>
 8005968:	4642      	mov	r2, r8
 800596a:	464b      	mov	r3, r9
 800596c:	f7fa fdf0 	bl	8000550 <__aeabi_dmul>
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4630      	mov	r0, r6
 8005976:	4639      	mov	r1, r7
 8005978:	f7fa fc32 	bl	80001e0 <__aeabi_dsub>
 800597c:	ec53 2b1a 	vmov	r2, r3, d10
 8005980:	f7fa fde6 	bl	8000550 <__aeabi_dmul>
 8005984:	ec53 2b18 	vmov	r2, r3, d8
 8005988:	ec41 0b19 	vmov	d9, r0, r1
 800598c:	ec51 0b18 	vmov	r0, r1, d8
 8005990:	f7fa fdde 	bl	8000550 <__aeabi_dmul>
 8005994:	a37c      	add	r3, pc, #496	; (adr r3, 8005b88 <__ieee754_pow+0x708>)
 8005996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599a:	4604      	mov	r4, r0
 800599c:	460d      	mov	r5, r1
 800599e:	f7fa fdd7 	bl	8000550 <__aeabi_dmul>
 80059a2:	a37b      	add	r3, pc, #492	; (adr r3, 8005b90 <__ieee754_pow+0x710>)
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	f7fa fc1c 	bl	80001e4 <__adddf3>
 80059ac:	4622      	mov	r2, r4
 80059ae:	462b      	mov	r3, r5
 80059b0:	f7fa fdce 	bl	8000550 <__aeabi_dmul>
 80059b4:	a378      	add	r3, pc, #480	; (adr r3, 8005b98 <__ieee754_pow+0x718>)
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	f7fa fc13 	bl	80001e4 <__adddf3>
 80059be:	4622      	mov	r2, r4
 80059c0:	462b      	mov	r3, r5
 80059c2:	f7fa fdc5 	bl	8000550 <__aeabi_dmul>
 80059c6:	a376      	add	r3, pc, #472	; (adr r3, 8005ba0 <__ieee754_pow+0x720>)
 80059c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059cc:	f7fa fc0a 	bl	80001e4 <__adddf3>
 80059d0:	4622      	mov	r2, r4
 80059d2:	462b      	mov	r3, r5
 80059d4:	f7fa fdbc 	bl	8000550 <__aeabi_dmul>
 80059d8:	a373      	add	r3, pc, #460	; (adr r3, 8005ba8 <__ieee754_pow+0x728>)
 80059da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059de:	f7fa fc01 	bl	80001e4 <__adddf3>
 80059e2:	4622      	mov	r2, r4
 80059e4:	462b      	mov	r3, r5
 80059e6:	f7fa fdb3 	bl	8000550 <__aeabi_dmul>
 80059ea:	a371      	add	r3, pc, #452	; (adr r3, 8005bb0 <__ieee754_pow+0x730>)
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	f7fa fbf8 	bl	80001e4 <__adddf3>
 80059f4:	4622      	mov	r2, r4
 80059f6:	4606      	mov	r6, r0
 80059f8:	460f      	mov	r7, r1
 80059fa:	462b      	mov	r3, r5
 80059fc:	4620      	mov	r0, r4
 80059fe:	4629      	mov	r1, r5
 8005a00:	f7fa fda6 	bl	8000550 <__aeabi_dmul>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4630      	mov	r0, r6
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	f7fa fda0 	bl	8000550 <__aeabi_dmul>
 8005a10:	4642      	mov	r2, r8
 8005a12:	4604      	mov	r4, r0
 8005a14:	460d      	mov	r5, r1
 8005a16:	464b      	mov	r3, r9
 8005a18:	ec51 0b18 	vmov	r0, r1, d8
 8005a1c:	f7fa fbe2 	bl	80001e4 <__adddf3>
 8005a20:	ec53 2b19 	vmov	r2, r3, d9
 8005a24:	f7fa fd94 	bl	8000550 <__aeabi_dmul>
 8005a28:	4622      	mov	r2, r4
 8005a2a:	462b      	mov	r3, r5
 8005a2c:	f7fa fbda 	bl	80001e4 <__adddf3>
 8005a30:	4642      	mov	r2, r8
 8005a32:	4682      	mov	sl, r0
 8005a34:	468b      	mov	fp, r1
 8005a36:	464b      	mov	r3, r9
 8005a38:	4640      	mov	r0, r8
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	f7fa fd88 	bl	8000550 <__aeabi_dmul>
 8005a40:	4b6b      	ldr	r3, [pc, #428]	; (8005bf0 <__ieee754_pow+0x770>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	4606      	mov	r6, r0
 8005a46:	460f      	mov	r7, r1
 8005a48:	f7fa fbcc 	bl	80001e4 <__adddf3>
 8005a4c:	4652      	mov	r2, sl
 8005a4e:	465b      	mov	r3, fp
 8005a50:	f7fa fbc8 	bl	80001e4 <__adddf3>
 8005a54:	2000      	movs	r0, #0
 8005a56:	4604      	mov	r4, r0
 8005a58:	460d      	mov	r5, r1
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4640      	mov	r0, r8
 8005a60:	4649      	mov	r1, r9
 8005a62:	f7fa fd75 	bl	8000550 <__aeabi_dmul>
 8005a66:	4b62      	ldr	r3, [pc, #392]	; (8005bf0 <__ieee754_pow+0x770>)
 8005a68:	4680      	mov	r8, r0
 8005a6a:	4689      	mov	r9, r1
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	4620      	mov	r0, r4
 8005a70:	4629      	mov	r1, r5
 8005a72:	f7fa fbb5 	bl	80001e0 <__aeabi_dsub>
 8005a76:	4632      	mov	r2, r6
 8005a78:	463b      	mov	r3, r7
 8005a7a:	f7fa fbb1 	bl	80001e0 <__aeabi_dsub>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4650      	mov	r0, sl
 8005a84:	4659      	mov	r1, fp
 8005a86:	f7fa fbab 	bl	80001e0 <__aeabi_dsub>
 8005a8a:	ec53 2b18 	vmov	r2, r3, d8
 8005a8e:	f7fa fd5f 	bl	8000550 <__aeabi_dmul>
 8005a92:	4622      	mov	r2, r4
 8005a94:	4606      	mov	r6, r0
 8005a96:	460f      	mov	r7, r1
 8005a98:	462b      	mov	r3, r5
 8005a9a:	ec51 0b19 	vmov	r0, r1, d9
 8005a9e:	f7fa fd57 	bl	8000550 <__aeabi_dmul>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	4639      	mov	r1, r7
 8005aaa:	f7fa fb9b 	bl	80001e4 <__adddf3>
 8005aae:	4606      	mov	r6, r0
 8005ab0:	460f      	mov	r7, r1
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4640      	mov	r0, r8
 8005ab8:	4649      	mov	r1, r9
 8005aba:	f7fa fb93 	bl	80001e4 <__adddf3>
 8005abe:	a33e      	add	r3, pc, #248	; (adr r3, 8005bb8 <__ieee754_pow+0x738>)
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	460d      	mov	r5, r1
 8005aca:	f7fa fd41 	bl	8000550 <__aeabi_dmul>
 8005ace:	4642      	mov	r2, r8
 8005ad0:	ec41 0b18 	vmov	d8, r0, r1
 8005ad4:	464b      	mov	r3, r9
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	4629      	mov	r1, r5
 8005ada:	f7fa fb81 	bl	80001e0 <__aeabi_dsub>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	4639      	mov	r1, r7
 8005ae6:	f7fa fb7b 	bl	80001e0 <__aeabi_dsub>
 8005aea:	a335      	add	r3, pc, #212	; (adr r3, 8005bc0 <__ieee754_pow+0x740>)
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	f7fa fd2e 	bl	8000550 <__aeabi_dmul>
 8005af4:	a334      	add	r3, pc, #208	; (adr r3, 8005bc8 <__ieee754_pow+0x748>)
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	4606      	mov	r6, r0
 8005afc:	460f      	mov	r7, r1
 8005afe:	4620      	mov	r0, r4
 8005b00:	4629      	mov	r1, r5
 8005b02:	f7fa fd25 	bl	8000550 <__aeabi_dmul>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	4639      	mov	r1, r7
 8005b0e:	f7fa fb69 	bl	80001e4 <__adddf3>
 8005b12:	9a07      	ldr	r2, [sp, #28]
 8005b14:	4b37      	ldr	r3, [pc, #220]	; (8005bf4 <__ieee754_pow+0x774>)
 8005b16:	4413      	add	r3, r2
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	f7fa fb62 	bl	80001e4 <__adddf3>
 8005b20:	4682      	mov	sl, r0
 8005b22:	9805      	ldr	r0, [sp, #20]
 8005b24:	468b      	mov	fp, r1
 8005b26:	f7fa fca9 	bl	800047c <__aeabi_i2d>
 8005b2a:	9a07      	ldr	r2, [sp, #28]
 8005b2c:	4b32      	ldr	r3, [pc, #200]	; (8005bf8 <__ieee754_pow+0x778>)
 8005b2e:	4413      	add	r3, r2
 8005b30:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b34:	4606      	mov	r6, r0
 8005b36:	460f      	mov	r7, r1
 8005b38:	4652      	mov	r2, sl
 8005b3a:	465b      	mov	r3, fp
 8005b3c:	ec51 0b18 	vmov	r0, r1, d8
 8005b40:	f7fa fb50 	bl	80001e4 <__adddf3>
 8005b44:	4642      	mov	r2, r8
 8005b46:	464b      	mov	r3, r9
 8005b48:	f7fa fb4c 	bl	80001e4 <__adddf3>
 8005b4c:	4632      	mov	r2, r6
 8005b4e:	463b      	mov	r3, r7
 8005b50:	f7fa fb48 	bl	80001e4 <__adddf3>
 8005b54:	2000      	movs	r0, #0
 8005b56:	4632      	mov	r2, r6
 8005b58:	463b      	mov	r3, r7
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	460d      	mov	r5, r1
 8005b5e:	f7fa fb3f 	bl	80001e0 <__aeabi_dsub>
 8005b62:	4642      	mov	r2, r8
 8005b64:	464b      	mov	r3, r9
 8005b66:	f7fa fb3b 	bl	80001e0 <__aeabi_dsub>
 8005b6a:	ec53 2b18 	vmov	r2, r3, d8
 8005b6e:	f7fa fb37 	bl	80001e0 <__aeabi_dsub>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4650      	mov	r0, sl
 8005b78:	4659      	mov	r1, fp
 8005b7a:	e610      	b.n	800579e <__ieee754_pow+0x31e>
 8005b7c:	2401      	movs	r4, #1
 8005b7e:	e6a1      	b.n	80058c4 <__ieee754_pow+0x444>
 8005b80:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005bd0 <__ieee754_pow+0x750>
 8005b84:	e617      	b.n	80057b6 <__ieee754_pow+0x336>
 8005b86:	bf00      	nop
 8005b88:	4a454eef 	.word	0x4a454eef
 8005b8c:	3fca7e28 	.word	0x3fca7e28
 8005b90:	93c9db65 	.word	0x93c9db65
 8005b94:	3fcd864a 	.word	0x3fcd864a
 8005b98:	a91d4101 	.word	0xa91d4101
 8005b9c:	3fd17460 	.word	0x3fd17460
 8005ba0:	518f264d 	.word	0x518f264d
 8005ba4:	3fd55555 	.word	0x3fd55555
 8005ba8:	db6fabff 	.word	0xdb6fabff
 8005bac:	3fdb6db6 	.word	0x3fdb6db6
 8005bb0:	33333303 	.word	0x33333303
 8005bb4:	3fe33333 	.word	0x3fe33333
 8005bb8:	e0000000 	.word	0xe0000000
 8005bbc:	3feec709 	.word	0x3feec709
 8005bc0:	dc3a03fd 	.word	0xdc3a03fd
 8005bc4:	3feec709 	.word	0x3feec709
 8005bc8:	145b01f5 	.word	0x145b01f5
 8005bcc:	be3e2fe0 	.word	0xbe3e2fe0
 8005bd0:	00000000 	.word	0x00000000
 8005bd4:	3ff00000 	.word	0x3ff00000
 8005bd8:	7ff00000 	.word	0x7ff00000
 8005bdc:	43400000 	.word	0x43400000
 8005be0:	0003988e 	.word	0x0003988e
 8005be4:	000bb679 	.word	0x000bb679
 8005be8:	08006208 	.word	0x08006208
 8005bec:	3ff00000 	.word	0x3ff00000
 8005bf0:	40080000 	.word	0x40080000
 8005bf4:	08006228 	.word	0x08006228
 8005bf8:	08006218 	.word	0x08006218
 8005bfc:	a3b5      	add	r3, pc, #724	; (adr r3, 8005ed4 <__ieee754_pow+0xa54>)
 8005bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c02:	4640      	mov	r0, r8
 8005c04:	4649      	mov	r1, r9
 8005c06:	f7fa faed 	bl	80001e4 <__adddf3>
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	ec41 0b1a 	vmov	d10, r0, r1
 8005c10:	462b      	mov	r3, r5
 8005c12:	4630      	mov	r0, r6
 8005c14:	4639      	mov	r1, r7
 8005c16:	f7fa fae3 	bl	80001e0 <__aeabi_dsub>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	ec51 0b1a 	vmov	r0, r1, d10
 8005c22:	f7fa ff25 	bl	8000a70 <__aeabi_dcmpgt>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	f47f ae04 	bne.w	8005834 <__ieee754_pow+0x3b4>
 8005c2c:	4aa4      	ldr	r2, [pc, #656]	; (8005ec0 <__ieee754_pow+0xa40>)
 8005c2e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005c32:	4293      	cmp	r3, r2
 8005c34:	f340 8108 	ble.w	8005e48 <__ieee754_pow+0x9c8>
 8005c38:	151b      	asrs	r3, r3, #20
 8005c3a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005c3e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005c42:	fa4a f303 	asr.w	r3, sl, r3
 8005c46:	445b      	add	r3, fp
 8005c48:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005c4c:	4e9d      	ldr	r6, [pc, #628]	; (8005ec4 <__ieee754_pow+0xa44>)
 8005c4e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005c52:	4116      	asrs	r6, r2
 8005c54:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005c58:	2000      	movs	r0, #0
 8005c5a:	ea23 0106 	bic.w	r1, r3, r6
 8005c5e:	f1c2 0214 	rsb	r2, r2, #20
 8005c62:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005c66:	fa4a fa02 	asr.w	sl, sl, r2
 8005c6a:	f1bb 0f00 	cmp.w	fp, #0
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4620      	mov	r0, r4
 8005c74:	4629      	mov	r1, r5
 8005c76:	bfb8      	it	lt
 8005c78:	f1ca 0a00 	rsblt	sl, sl, #0
 8005c7c:	f7fa fab0 	bl	80001e0 <__aeabi_dsub>
 8005c80:	ec41 0b19 	vmov	d9, r0, r1
 8005c84:	4642      	mov	r2, r8
 8005c86:	464b      	mov	r3, r9
 8005c88:	ec51 0b19 	vmov	r0, r1, d9
 8005c8c:	f7fa faaa 	bl	80001e4 <__adddf3>
 8005c90:	a37b      	add	r3, pc, #492	; (adr r3, 8005e80 <__ieee754_pow+0xa00>)
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	2000      	movs	r0, #0
 8005c98:	4604      	mov	r4, r0
 8005c9a:	460d      	mov	r5, r1
 8005c9c:	f7fa fc58 	bl	8000550 <__aeabi_dmul>
 8005ca0:	ec53 2b19 	vmov	r2, r3, d9
 8005ca4:	4606      	mov	r6, r0
 8005ca6:	460f      	mov	r7, r1
 8005ca8:	4620      	mov	r0, r4
 8005caa:	4629      	mov	r1, r5
 8005cac:	f7fa fa98 	bl	80001e0 <__aeabi_dsub>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4640      	mov	r0, r8
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	f7fa fa92 	bl	80001e0 <__aeabi_dsub>
 8005cbc:	a372      	add	r3, pc, #456	; (adr r3, 8005e88 <__ieee754_pow+0xa08>)
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	f7fa fc45 	bl	8000550 <__aeabi_dmul>
 8005cc6:	a372      	add	r3, pc, #456	; (adr r3, 8005e90 <__ieee754_pow+0xa10>)
 8005cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ccc:	4680      	mov	r8, r0
 8005cce:	4689      	mov	r9, r1
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	f7fa fc3c 	bl	8000550 <__aeabi_dmul>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4640      	mov	r0, r8
 8005cde:	4649      	mov	r1, r9
 8005ce0:	f7fa fa80 	bl	80001e4 <__adddf3>
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	460d      	mov	r5, r1
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4630      	mov	r0, r6
 8005cee:	4639      	mov	r1, r7
 8005cf0:	f7fa fa78 	bl	80001e4 <__adddf3>
 8005cf4:	4632      	mov	r2, r6
 8005cf6:	463b      	mov	r3, r7
 8005cf8:	4680      	mov	r8, r0
 8005cfa:	4689      	mov	r9, r1
 8005cfc:	f7fa fa70 	bl	80001e0 <__aeabi_dsub>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4620      	mov	r0, r4
 8005d06:	4629      	mov	r1, r5
 8005d08:	f7fa fa6a 	bl	80001e0 <__aeabi_dsub>
 8005d0c:	4642      	mov	r2, r8
 8005d0e:	4606      	mov	r6, r0
 8005d10:	460f      	mov	r7, r1
 8005d12:	464b      	mov	r3, r9
 8005d14:	4640      	mov	r0, r8
 8005d16:	4649      	mov	r1, r9
 8005d18:	f7fa fc1a 	bl	8000550 <__aeabi_dmul>
 8005d1c:	a35e      	add	r3, pc, #376	; (adr r3, 8005e98 <__ieee754_pow+0xa18>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	4604      	mov	r4, r0
 8005d24:	460d      	mov	r5, r1
 8005d26:	f7fa fc13 	bl	8000550 <__aeabi_dmul>
 8005d2a:	a35d      	add	r3, pc, #372	; (adr r3, 8005ea0 <__ieee754_pow+0xa20>)
 8005d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d30:	f7fa fa56 	bl	80001e0 <__aeabi_dsub>
 8005d34:	4622      	mov	r2, r4
 8005d36:	462b      	mov	r3, r5
 8005d38:	f7fa fc0a 	bl	8000550 <__aeabi_dmul>
 8005d3c:	a35a      	add	r3, pc, #360	; (adr r3, 8005ea8 <__ieee754_pow+0xa28>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	f7fa fa4f 	bl	80001e4 <__adddf3>
 8005d46:	4622      	mov	r2, r4
 8005d48:	462b      	mov	r3, r5
 8005d4a:	f7fa fc01 	bl	8000550 <__aeabi_dmul>
 8005d4e:	a358      	add	r3, pc, #352	; (adr r3, 8005eb0 <__ieee754_pow+0xa30>)
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	f7fa fa44 	bl	80001e0 <__aeabi_dsub>
 8005d58:	4622      	mov	r2, r4
 8005d5a:	462b      	mov	r3, r5
 8005d5c:	f7fa fbf8 	bl	8000550 <__aeabi_dmul>
 8005d60:	a355      	add	r3, pc, #340	; (adr r3, 8005eb8 <__ieee754_pow+0xa38>)
 8005d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d66:	f7fa fa3d 	bl	80001e4 <__adddf3>
 8005d6a:	4622      	mov	r2, r4
 8005d6c:	462b      	mov	r3, r5
 8005d6e:	f7fa fbef 	bl	8000550 <__aeabi_dmul>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4640      	mov	r0, r8
 8005d78:	4649      	mov	r1, r9
 8005d7a:	f7fa fa31 	bl	80001e0 <__aeabi_dsub>
 8005d7e:	4604      	mov	r4, r0
 8005d80:	460d      	mov	r5, r1
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	4640      	mov	r0, r8
 8005d88:	4649      	mov	r1, r9
 8005d8a:	f7fa fbe1 	bl	8000550 <__aeabi_dmul>
 8005d8e:	2200      	movs	r2, #0
 8005d90:	ec41 0b19 	vmov	d9, r0, r1
 8005d94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d98:	4620      	mov	r0, r4
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	f7fa fa20 	bl	80001e0 <__aeabi_dsub>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	ec51 0b19 	vmov	r0, r1, d9
 8005da8:	f7fa fcfc 	bl	80007a4 <__aeabi_ddiv>
 8005dac:	4632      	mov	r2, r6
 8005dae:	4604      	mov	r4, r0
 8005db0:	460d      	mov	r5, r1
 8005db2:	463b      	mov	r3, r7
 8005db4:	4640      	mov	r0, r8
 8005db6:	4649      	mov	r1, r9
 8005db8:	f7fa fbca 	bl	8000550 <__aeabi_dmul>
 8005dbc:	4632      	mov	r2, r6
 8005dbe:	463b      	mov	r3, r7
 8005dc0:	f7fa fa10 	bl	80001e4 <__adddf3>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4620      	mov	r0, r4
 8005dca:	4629      	mov	r1, r5
 8005dcc:	f7fa fa08 	bl	80001e0 <__aeabi_dsub>
 8005dd0:	4642      	mov	r2, r8
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	f7fa fa04 	bl	80001e0 <__aeabi_dsub>
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4602      	mov	r2, r0
 8005ddc:	493a      	ldr	r1, [pc, #232]	; (8005ec8 <__ieee754_pow+0xa48>)
 8005dde:	2000      	movs	r0, #0
 8005de0:	f7fa f9fe 	bl	80001e0 <__aeabi_dsub>
 8005de4:	ec41 0b10 	vmov	d0, r0, r1
 8005de8:	ee10 3a90 	vmov	r3, s1
 8005dec:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005df4:	da2b      	bge.n	8005e4e <__ieee754_pow+0x9ce>
 8005df6:	4650      	mov	r0, sl
 8005df8:	f000 f966 	bl	80060c8 <scalbn>
 8005dfc:	ec51 0b10 	vmov	r0, r1, d0
 8005e00:	ec53 2b18 	vmov	r2, r3, d8
 8005e04:	f7ff bbed 	b.w	80055e2 <__ieee754_pow+0x162>
 8005e08:	4b30      	ldr	r3, [pc, #192]	; (8005ecc <__ieee754_pow+0xa4c>)
 8005e0a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005e0e:	429e      	cmp	r6, r3
 8005e10:	f77f af0c 	ble.w	8005c2c <__ieee754_pow+0x7ac>
 8005e14:	4b2e      	ldr	r3, [pc, #184]	; (8005ed0 <__ieee754_pow+0xa50>)
 8005e16:	440b      	add	r3, r1
 8005e18:	4303      	orrs	r3, r0
 8005e1a:	d009      	beq.n	8005e30 <__ieee754_pow+0x9b0>
 8005e1c:	ec51 0b18 	vmov	r0, r1, d8
 8005e20:	2200      	movs	r2, #0
 8005e22:	2300      	movs	r3, #0
 8005e24:	f7fa fe06 	bl	8000a34 <__aeabi_dcmplt>
 8005e28:	3800      	subs	r0, #0
 8005e2a:	bf18      	it	ne
 8005e2c:	2001      	movne	r0, #1
 8005e2e:	e447      	b.n	80056c0 <__ieee754_pow+0x240>
 8005e30:	4622      	mov	r2, r4
 8005e32:	462b      	mov	r3, r5
 8005e34:	f7fa f9d4 	bl	80001e0 <__aeabi_dsub>
 8005e38:	4642      	mov	r2, r8
 8005e3a:	464b      	mov	r3, r9
 8005e3c:	f7fa fe0e 	bl	8000a5c <__aeabi_dcmpge>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	f43f aef3 	beq.w	8005c2c <__ieee754_pow+0x7ac>
 8005e46:	e7e9      	b.n	8005e1c <__ieee754_pow+0x99c>
 8005e48:	f04f 0a00 	mov.w	sl, #0
 8005e4c:	e71a      	b.n	8005c84 <__ieee754_pow+0x804>
 8005e4e:	ec51 0b10 	vmov	r0, r1, d0
 8005e52:	4619      	mov	r1, r3
 8005e54:	e7d4      	b.n	8005e00 <__ieee754_pow+0x980>
 8005e56:	491c      	ldr	r1, [pc, #112]	; (8005ec8 <__ieee754_pow+0xa48>)
 8005e58:	2000      	movs	r0, #0
 8005e5a:	f7ff bb30 	b.w	80054be <__ieee754_pow+0x3e>
 8005e5e:	2000      	movs	r0, #0
 8005e60:	2100      	movs	r1, #0
 8005e62:	f7ff bb2c 	b.w	80054be <__ieee754_pow+0x3e>
 8005e66:	4630      	mov	r0, r6
 8005e68:	4639      	mov	r1, r7
 8005e6a:	f7ff bb28 	b.w	80054be <__ieee754_pow+0x3e>
 8005e6e:	9204      	str	r2, [sp, #16]
 8005e70:	f7ff bb7a 	b.w	8005568 <__ieee754_pow+0xe8>
 8005e74:	2300      	movs	r3, #0
 8005e76:	f7ff bb64 	b.w	8005542 <__ieee754_pow+0xc2>
 8005e7a:	bf00      	nop
 8005e7c:	f3af 8000 	nop.w
 8005e80:	00000000 	.word	0x00000000
 8005e84:	3fe62e43 	.word	0x3fe62e43
 8005e88:	fefa39ef 	.word	0xfefa39ef
 8005e8c:	3fe62e42 	.word	0x3fe62e42
 8005e90:	0ca86c39 	.word	0x0ca86c39
 8005e94:	be205c61 	.word	0xbe205c61
 8005e98:	72bea4d0 	.word	0x72bea4d0
 8005e9c:	3e663769 	.word	0x3e663769
 8005ea0:	c5d26bf1 	.word	0xc5d26bf1
 8005ea4:	3ebbbd41 	.word	0x3ebbbd41
 8005ea8:	af25de2c 	.word	0xaf25de2c
 8005eac:	3f11566a 	.word	0x3f11566a
 8005eb0:	16bebd93 	.word	0x16bebd93
 8005eb4:	3f66c16c 	.word	0x3f66c16c
 8005eb8:	5555553e 	.word	0x5555553e
 8005ebc:	3fc55555 	.word	0x3fc55555
 8005ec0:	3fe00000 	.word	0x3fe00000
 8005ec4:	000fffff 	.word	0x000fffff
 8005ec8:	3ff00000 	.word	0x3ff00000
 8005ecc:	4090cbff 	.word	0x4090cbff
 8005ed0:	3f6f3400 	.word	0x3f6f3400
 8005ed4:	652b82fe 	.word	0x652b82fe
 8005ed8:	3c971547 	.word	0x3c971547

08005edc <__ieee754_sqrt>:
 8005edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee0:	ec55 4b10 	vmov	r4, r5, d0
 8005ee4:	4e55      	ldr	r6, [pc, #340]	; (800603c <__ieee754_sqrt+0x160>)
 8005ee6:	43ae      	bics	r6, r5
 8005ee8:	ee10 0a10 	vmov	r0, s0
 8005eec:	ee10 3a10 	vmov	r3, s0
 8005ef0:	462a      	mov	r2, r5
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	d110      	bne.n	8005f18 <__ieee754_sqrt+0x3c>
 8005ef6:	ee10 2a10 	vmov	r2, s0
 8005efa:	462b      	mov	r3, r5
 8005efc:	f7fa fb28 	bl	8000550 <__aeabi_dmul>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4620      	mov	r0, r4
 8005f06:	4629      	mov	r1, r5
 8005f08:	f7fa f96c 	bl	80001e4 <__adddf3>
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	460d      	mov	r5, r1
 8005f10:	ec45 4b10 	vmov	d0, r4, r5
 8005f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f18:	2d00      	cmp	r5, #0
 8005f1a:	dc10      	bgt.n	8005f3e <__ieee754_sqrt+0x62>
 8005f1c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005f20:	4330      	orrs	r0, r6
 8005f22:	d0f5      	beq.n	8005f10 <__ieee754_sqrt+0x34>
 8005f24:	b15d      	cbz	r5, 8005f3e <__ieee754_sqrt+0x62>
 8005f26:	ee10 2a10 	vmov	r2, s0
 8005f2a:	462b      	mov	r3, r5
 8005f2c:	ee10 0a10 	vmov	r0, s0
 8005f30:	f7fa f956 	bl	80001e0 <__aeabi_dsub>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	f7fa fc34 	bl	80007a4 <__aeabi_ddiv>
 8005f3c:	e7e6      	b.n	8005f0c <__ieee754_sqrt+0x30>
 8005f3e:	1512      	asrs	r2, r2, #20
 8005f40:	d074      	beq.n	800602c <__ieee754_sqrt+0x150>
 8005f42:	07d4      	lsls	r4, r2, #31
 8005f44:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005f48:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005f4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005f50:	bf5e      	ittt	pl
 8005f52:	0fda      	lsrpl	r2, r3, #31
 8005f54:	005b      	lslpl	r3, r3, #1
 8005f56:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005f5a:	2400      	movs	r4, #0
 8005f5c:	0fda      	lsrs	r2, r3, #31
 8005f5e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005f62:	107f      	asrs	r7, r7, #1
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	2516      	movs	r5, #22
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005f6e:	1886      	adds	r6, r0, r2
 8005f70:	428e      	cmp	r6, r1
 8005f72:	bfde      	ittt	le
 8005f74:	1b89      	suble	r1, r1, r6
 8005f76:	18b0      	addle	r0, r6, r2
 8005f78:	18a4      	addle	r4, r4, r2
 8005f7a:	0049      	lsls	r1, r1, #1
 8005f7c:	3d01      	subs	r5, #1
 8005f7e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005f82:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005f86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005f8a:	d1f0      	bne.n	8005f6e <__ieee754_sqrt+0x92>
 8005f8c:	462a      	mov	r2, r5
 8005f8e:	f04f 0e20 	mov.w	lr, #32
 8005f92:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005f96:	4281      	cmp	r1, r0
 8005f98:	eb06 0c05 	add.w	ip, r6, r5
 8005f9c:	dc02      	bgt.n	8005fa4 <__ieee754_sqrt+0xc8>
 8005f9e:	d113      	bne.n	8005fc8 <__ieee754_sqrt+0xec>
 8005fa0:	459c      	cmp	ip, r3
 8005fa2:	d811      	bhi.n	8005fc8 <__ieee754_sqrt+0xec>
 8005fa4:	f1bc 0f00 	cmp.w	ip, #0
 8005fa8:	eb0c 0506 	add.w	r5, ip, r6
 8005fac:	da43      	bge.n	8006036 <__ieee754_sqrt+0x15a>
 8005fae:	2d00      	cmp	r5, #0
 8005fb0:	db41      	blt.n	8006036 <__ieee754_sqrt+0x15a>
 8005fb2:	f100 0801 	add.w	r8, r0, #1
 8005fb6:	1a09      	subs	r1, r1, r0
 8005fb8:	459c      	cmp	ip, r3
 8005fba:	bf88      	it	hi
 8005fbc:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8005fc0:	eba3 030c 	sub.w	r3, r3, ip
 8005fc4:	4432      	add	r2, r6
 8005fc6:	4640      	mov	r0, r8
 8005fc8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005fcc:	f1be 0e01 	subs.w	lr, lr, #1
 8005fd0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005fd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005fd8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005fdc:	d1db      	bne.n	8005f96 <__ieee754_sqrt+0xba>
 8005fde:	430b      	orrs	r3, r1
 8005fe0:	d006      	beq.n	8005ff0 <__ieee754_sqrt+0x114>
 8005fe2:	1c50      	adds	r0, r2, #1
 8005fe4:	bf13      	iteet	ne
 8005fe6:	3201      	addne	r2, #1
 8005fe8:	3401      	addeq	r4, #1
 8005fea:	4672      	moveq	r2, lr
 8005fec:	f022 0201 	bicne.w	r2, r2, #1
 8005ff0:	1063      	asrs	r3, r4, #1
 8005ff2:	0852      	lsrs	r2, r2, #1
 8005ff4:	07e1      	lsls	r1, r4, #31
 8005ff6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005ffa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005ffe:	bf48      	it	mi
 8006000:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006004:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006008:	4614      	mov	r4, r2
 800600a:	e781      	b.n	8005f10 <__ieee754_sqrt+0x34>
 800600c:	0ad9      	lsrs	r1, r3, #11
 800600e:	3815      	subs	r0, #21
 8006010:	055b      	lsls	r3, r3, #21
 8006012:	2900      	cmp	r1, #0
 8006014:	d0fa      	beq.n	800600c <__ieee754_sqrt+0x130>
 8006016:	02cd      	lsls	r5, r1, #11
 8006018:	d50a      	bpl.n	8006030 <__ieee754_sqrt+0x154>
 800601a:	f1c2 0420 	rsb	r4, r2, #32
 800601e:	fa23 f404 	lsr.w	r4, r3, r4
 8006022:	1e55      	subs	r5, r2, #1
 8006024:	4093      	lsls	r3, r2
 8006026:	4321      	orrs	r1, r4
 8006028:	1b42      	subs	r2, r0, r5
 800602a:	e78a      	b.n	8005f42 <__ieee754_sqrt+0x66>
 800602c:	4610      	mov	r0, r2
 800602e:	e7f0      	b.n	8006012 <__ieee754_sqrt+0x136>
 8006030:	0049      	lsls	r1, r1, #1
 8006032:	3201      	adds	r2, #1
 8006034:	e7ef      	b.n	8006016 <__ieee754_sqrt+0x13a>
 8006036:	4680      	mov	r8, r0
 8006038:	e7bd      	b.n	8005fb6 <__ieee754_sqrt+0xda>
 800603a:	bf00      	nop
 800603c:	7ff00000 	.word	0x7ff00000

08006040 <with_errno>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	4604      	mov	r4, r0
 8006044:	460d      	mov	r5, r1
 8006046:	4616      	mov	r6, r2
 8006048:	f7ff f976 	bl	8005338 <__errno>
 800604c:	4629      	mov	r1, r5
 800604e:	6006      	str	r6, [r0, #0]
 8006050:	4620      	mov	r0, r4
 8006052:	bd70      	pop	{r4, r5, r6, pc}

08006054 <xflow>:
 8006054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006056:	4614      	mov	r4, r2
 8006058:	461d      	mov	r5, r3
 800605a:	b108      	cbz	r0, 8006060 <xflow+0xc>
 800605c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006060:	e9cd 2300 	strd	r2, r3, [sp]
 8006064:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006068:	4620      	mov	r0, r4
 800606a:	4629      	mov	r1, r5
 800606c:	f7fa fa70 	bl	8000550 <__aeabi_dmul>
 8006070:	2222      	movs	r2, #34	; 0x22
 8006072:	b003      	add	sp, #12
 8006074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006078:	f7ff bfe2 	b.w	8006040 <with_errno>

0800607c <__math_uflow>:
 800607c:	b508      	push	{r3, lr}
 800607e:	2200      	movs	r2, #0
 8006080:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006084:	f7ff ffe6 	bl	8006054 <xflow>
 8006088:	ec41 0b10 	vmov	d0, r0, r1
 800608c:	bd08      	pop	{r3, pc}

0800608e <__math_oflow>:
 800608e:	b508      	push	{r3, lr}
 8006090:	2200      	movs	r2, #0
 8006092:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006096:	f7ff ffdd 	bl	8006054 <xflow>
 800609a:	ec41 0b10 	vmov	d0, r0, r1
 800609e:	bd08      	pop	{r3, pc}

080060a0 <fabs>:
 80060a0:	ec51 0b10 	vmov	r0, r1, d0
 80060a4:	ee10 2a10 	vmov	r2, s0
 80060a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80060ac:	ec43 2b10 	vmov	d0, r2, r3
 80060b0:	4770      	bx	lr

080060b2 <finite>:
 80060b2:	b082      	sub	sp, #8
 80060b4:	ed8d 0b00 	vstr	d0, [sp]
 80060b8:	9801      	ldr	r0, [sp, #4]
 80060ba:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80060be:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80060c2:	0fc0      	lsrs	r0, r0, #31
 80060c4:	b002      	add	sp, #8
 80060c6:	4770      	bx	lr

080060c8 <scalbn>:
 80060c8:	b570      	push	{r4, r5, r6, lr}
 80060ca:	ec55 4b10 	vmov	r4, r5, d0
 80060ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80060d2:	4606      	mov	r6, r0
 80060d4:	462b      	mov	r3, r5
 80060d6:	b99a      	cbnz	r2, 8006100 <scalbn+0x38>
 80060d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80060dc:	4323      	orrs	r3, r4
 80060de:	d036      	beq.n	800614e <scalbn+0x86>
 80060e0:	4b39      	ldr	r3, [pc, #228]	; (80061c8 <scalbn+0x100>)
 80060e2:	4629      	mov	r1, r5
 80060e4:	ee10 0a10 	vmov	r0, s0
 80060e8:	2200      	movs	r2, #0
 80060ea:	f7fa fa31 	bl	8000550 <__aeabi_dmul>
 80060ee:	4b37      	ldr	r3, [pc, #220]	; (80061cc <scalbn+0x104>)
 80060f0:	429e      	cmp	r6, r3
 80060f2:	4604      	mov	r4, r0
 80060f4:	460d      	mov	r5, r1
 80060f6:	da10      	bge.n	800611a <scalbn+0x52>
 80060f8:	a32b      	add	r3, pc, #172	; (adr r3, 80061a8 <scalbn+0xe0>)
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	e03a      	b.n	8006176 <scalbn+0xae>
 8006100:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006104:	428a      	cmp	r2, r1
 8006106:	d10c      	bne.n	8006122 <scalbn+0x5a>
 8006108:	ee10 2a10 	vmov	r2, s0
 800610c:	4620      	mov	r0, r4
 800610e:	4629      	mov	r1, r5
 8006110:	f7fa f868 	bl	80001e4 <__adddf3>
 8006114:	4604      	mov	r4, r0
 8006116:	460d      	mov	r5, r1
 8006118:	e019      	b.n	800614e <scalbn+0x86>
 800611a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800611e:	460b      	mov	r3, r1
 8006120:	3a36      	subs	r2, #54	; 0x36
 8006122:	4432      	add	r2, r6
 8006124:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006128:	428a      	cmp	r2, r1
 800612a:	dd08      	ble.n	800613e <scalbn+0x76>
 800612c:	2d00      	cmp	r5, #0
 800612e:	a120      	add	r1, pc, #128	; (adr r1, 80061b0 <scalbn+0xe8>)
 8006130:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006134:	da1c      	bge.n	8006170 <scalbn+0xa8>
 8006136:	a120      	add	r1, pc, #128	; (adr r1, 80061b8 <scalbn+0xf0>)
 8006138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800613c:	e018      	b.n	8006170 <scalbn+0xa8>
 800613e:	2a00      	cmp	r2, #0
 8006140:	dd08      	ble.n	8006154 <scalbn+0x8c>
 8006142:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006146:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800614a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800614e:	ec45 4b10 	vmov	d0, r4, r5
 8006152:	bd70      	pop	{r4, r5, r6, pc}
 8006154:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006158:	da19      	bge.n	800618e <scalbn+0xc6>
 800615a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800615e:	429e      	cmp	r6, r3
 8006160:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006164:	dd0a      	ble.n	800617c <scalbn+0xb4>
 8006166:	a112      	add	r1, pc, #72	; (adr r1, 80061b0 <scalbn+0xe8>)
 8006168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e2      	bne.n	8006136 <scalbn+0x6e>
 8006170:	a30f      	add	r3, pc, #60	; (adr r3, 80061b0 <scalbn+0xe8>)
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	f7fa f9eb 	bl	8000550 <__aeabi_dmul>
 800617a:	e7cb      	b.n	8006114 <scalbn+0x4c>
 800617c:	a10a      	add	r1, pc, #40	; (adr r1, 80061a8 <scalbn+0xe0>)
 800617e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0b8      	beq.n	80060f8 <scalbn+0x30>
 8006186:	a10e      	add	r1, pc, #56	; (adr r1, 80061c0 <scalbn+0xf8>)
 8006188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800618c:	e7b4      	b.n	80060f8 <scalbn+0x30>
 800618e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006192:	3236      	adds	r2, #54	; 0x36
 8006194:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006198:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800619c:	4620      	mov	r0, r4
 800619e:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <scalbn+0x108>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	e7e8      	b.n	8006176 <scalbn+0xae>
 80061a4:	f3af 8000 	nop.w
 80061a8:	c2f8f359 	.word	0xc2f8f359
 80061ac:	01a56e1f 	.word	0x01a56e1f
 80061b0:	8800759c 	.word	0x8800759c
 80061b4:	7e37e43c 	.word	0x7e37e43c
 80061b8:	8800759c 	.word	0x8800759c
 80061bc:	fe37e43c 	.word	0xfe37e43c
 80061c0:	c2f8f359 	.word	0xc2f8f359
 80061c4:	81a56e1f 	.word	0x81a56e1f
 80061c8:	43500000 	.word	0x43500000
 80061cc:	ffff3cb0 	.word	0xffff3cb0
 80061d0:	3c900000 	.word	0x3c900000

080061d4 <_init>:
 80061d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d6:	bf00      	nop
 80061d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061da:	bc08      	pop	{r3}
 80061dc:	469e      	mov	lr, r3
 80061de:	4770      	bx	lr

080061e0 <_fini>:
 80061e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e2:	bf00      	nop
 80061e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e6:	bc08      	pop	{r3}
 80061e8:	469e      	mov	lr, r3
 80061ea:	4770      	bx	lr
