
encoder_kalman_filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000544c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080055e8  080055e8  000155e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005630  08005630  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08005630  08005630  00015630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005638  08005638  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005638  08005638  00015638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800563c  0800563c  0001563c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08005640  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  200000a0  080056e0  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080056e0  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0eb  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2a  00000000  00000000  0002d1bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0002ebe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  0002f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e72  00000000  00000000  00030310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c84b  00000000  00000000  00046182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d3b9  00000000  00000000  000529cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dfd86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003710  00000000  00000000  000dfdd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000a0 	.word	0x200000a0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080055cc 	.word	0x080055cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000a4 	.word	0x200000a4
 80001d4:	080055cc 	.word	0x080055cc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e58:	f001 f88e 	bl	8001f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5c:	f000 f836 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e60:	f000 fa08 	bl	8001274 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e64:	f000 f9dc 	bl	8001220 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e68:	f000 f938 	bl	80010dc <MX_TIM2_Init>
  MX_TIM5_Init();
 8000e6c:	f000 f98a 	bl	8001184 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000e70:	f000 f894 	bl	8000f9c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000e74:	213c      	movs	r1, #60	; 0x3c
 8000e76:	480f      	ldr	r0, [pc, #60]	; (8000eb4 <main+0x60>)
 8000e78:	f002 fab2 	bl	80033e0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000e7c:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <main+0x64>)
 8000e7e:	f002 f89d 	bl	8002fbc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e82:	2100      	movs	r1, #0
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <main+0x68>)
 8000e86:	f002 f955 	bl	8003134 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Nowdegrees=GetRealdegrees();
 8000e8a:	f000 fac5 	bl	8001418 <GetRealdegrees>
 8000e8e:	eef0 7a40 	vmov.f32	s15, s0
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <main+0x6c>)
 8000e94:	edc3 7a00 	vstr	s15, [r3]
	  Nowrads=GetRealrads();
 8000e98:	f000 fafe 	bl	8001498 <GetRealrads>
 8000e9c:	eef0 7a40 	vmov.f32	s15, s0
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <main+0x70>)
 8000ea2:	edc3 7a00 	vstr	s15, [r3]
	  Drivemotor(PWMm);
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <main+0x74>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 fe48 	bl	8001b40 <Drivemotor>
	  Nowdegrees=GetRealdegrees();
 8000eb0:	e7eb      	b.n	8000e8a <main+0x36>
 8000eb2:	bf00      	nop
 8000eb4:	20000104 	.word	0x20000104
 8000eb8:	2000014c 	.word	0x2000014c
 8000ebc:	200000bc 	.word	0x200000bc
 8000ec0:	200001d8 	.word	0x200001d8
 8000ec4:	200001dc 	.word	0x200001dc
 8000ec8:	200001e0 	.word	0x200001e0

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b094      	sub	sp, #80	; 0x50
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0320 	add.w	r3, r7, #32
 8000ed6:	2230      	movs	r2, #48	; 0x30
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f003 fc54 	bl	8004788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <SystemClock_Config+0xc8>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <SystemClock_Config+0xc8>)
 8000efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efe:	6413      	str	r3, [r2, #64]	; 0x40
 8000f00:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <SystemClock_Config+0xc8>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <SystemClock_Config+0xcc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a20      	ldr	r2, [pc, #128]	; (8000f98 <SystemClock_Config+0xcc>)
 8000f16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <SystemClock_Config+0xcc>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f30:	2310      	movs	r3, #16
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f34:	2302      	movs	r3, #2
 8000f36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000f40:	2364      	movs	r3, #100	; 0x64
 8000f42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f44:	2302      	movs	r3, #2
 8000f46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4c:	f107 0320 	add.w	r3, r7, #32
 8000f50:	4618      	mov	r0, r3
 8000f52:	f001 fb4b 	bl	80025ec <HAL_RCC_OscConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f5c:	f000 fe60 	bl	8001c20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f60:	230f      	movs	r3, #15
 8000f62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f64:	2302      	movs	r3, #2
 8000f66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	2103      	movs	r1, #3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 fdad 	bl	8002adc <HAL_RCC_ClockConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f88:	f000 fe4a 	bl	8001c20 <Error_Handler>
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	3750      	adds	r7, #80	; 0x50
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40007000 	.word	0x40007000

08000f9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b096      	sub	sp, #88	; 0x58
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]
 8000fca:	615a      	str	r2, [r3, #20]
 8000fcc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2220      	movs	r2, #32
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f003 fbd7 	bl	8004788 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fda:	4b3e      	ldr	r3, [pc, #248]	; (80010d4 <MX_TIM1_Init+0x138>)
 8000fdc:	4a3e      	ldr	r2, [pc, #248]	; (80010d8 <MX_TIM1_Init+0x13c>)
 8000fde:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8000fe0:	4b3c      	ldr	r3, [pc, #240]	; (80010d4 <MX_TIM1_Init+0x138>)
 8000fe2:	2263      	movs	r2, #99	; 0x63
 8000fe4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <MX_TIM1_Init+0x138>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000fec:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <MX_TIM1_Init+0x138>)
 8000fee:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ff2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff4:	4b37      	ldr	r3, [pc, #220]	; (80010d4 <MX_TIM1_Init+0x138>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ffa:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <MX_TIM1_Init+0x138>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001000:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <MX_TIM1_Init+0x138>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001006:	4833      	ldr	r0, [pc, #204]	; (80010d4 <MX_TIM1_Init+0x138>)
 8001008:	f001 ff88 	bl	8002f1c <HAL_TIM_Base_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001012:	f000 fe05 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800101c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001020:	4619      	mov	r1, r3
 8001022:	482c      	ldr	r0, [pc, #176]	; (80010d4 <MX_TIM1_Init+0x138>)
 8001024:	f002 fc34 	bl	8003890 <HAL_TIM_ConfigClockSource>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800102e:	f000 fdf7 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001032:	4828      	ldr	r0, [pc, #160]	; (80010d4 <MX_TIM1_Init+0x138>)
 8001034:	f002 f824 	bl	8003080 <HAL_TIM_PWM_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800103e:	f000 fdef 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800104a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800104e:	4619      	mov	r1, r3
 8001050:	4820      	ldr	r0, [pc, #128]	; (80010d4 <MX_TIM1_Init+0x138>)
 8001052:	f002 ffd9 	bl	8004008 <HAL_TIMEx_MasterConfigSynchronization>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800105c:	f000 fde0 	bl	8001c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001060:	2360      	movs	r3, #96	; 0x60
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001068:	2300      	movs	r3, #0
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800106c:	2300      	movs	r3, #0
 800106e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800107c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001080:	2200      	movs	r2, #0
 8001082:	4619      	mov	r1, r3
 8001084:	4813      	ldr	r0, [pc, #76]	; (80010d4 <MX_TIM1_Init+0x138>)
 8001086:	f002 fb41 	bl	800370c <HAL_TIM_PWM_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001090:	f000 fdc6 	bl	8001c20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	4619      	mov	r1, r3
 80010b6:	4807      	ldr	r0, [pc, #28]	; (80010d4 <MX_TIM1_Init+0x138>)
 80010b8:	f003 f814 	bl	80040e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80010c2:	f000 fdad 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <MX_TIM1_Init+0x138>)
 80010c8:	f000 fe5c 	bl	8001d84 <HAL_TIM_MspPostInit>

}
 80010cc:	bf00      	nop
 80010ce:	3758      	adds	r7, #88	; 0x58
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200000bc 	.word	0x200000bc
 80010d8:	40010000 	.word	0x40010000

080010dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	2224      	movs	r2, #36	; 0x24
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 fb4c 	bl	8004788 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <MX_TIM2_Init+0xa4>)
 80010fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <MX_TIM2_Init+0xa4>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001106:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <MX_TIM2_Init+0xa4>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2399;
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <MX_TIM2_Init+0xa4>)
 800110e:	f640 125f 	movw	r2, #2399	; 0x95f
 8001112:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_TIM2_Init+0xa4>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <MX_TIM2_Init+0xa4>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001120:	2303      	movs	r3, #3
 8001122:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001124:	2302      	movs	r3, #2
 8001126:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001128:	2301      	movs	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001130:	2302      	movs	r3, #2
 8001132:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001134:	2302      	movs	r3, #2
 8001136:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001138:	2301      	movs	r3, #1
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8001140:	2302      	movs	r3, #2
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	4619      	mov	r1, r3
 800114a:	480d      	ldr	r0, [pc, #52]	; (8001180 <MX_TIM2_Init+0xa4>)
 800114c:	f002 f8a2 	bl	8003294 <HAL_TIM_Encoder_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001156:	f000 fd63 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <MX_TIM2_Init+0xa4>)
 8001168:	f002 ff4e 	bl	8004008 <HAL_TIMEx_MasterConfigSynchronization>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001172:	f000 fd55 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	3730      	adds	r7, #48	; 0x30
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000104 	.word	0x20000104

08001184 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001198:	463b      	mov	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_TIM5_Init+0x94>)
 80011a2:	4a1e      	ldr	r2, [pc, #120]	; (800121c <MX_TIM5_Init+0x98>)
 80011a4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <MX_TIM5_Init+0x94>)
 80011a8:	2263      	movs	r2, #99	; 0x63
 80011aa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_TIM5_Init+0x94>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <MX_TIM5_Init+0x94>)
 80011b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011b8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_TIM5_Init+0x94>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <MX_TIM5_Init+0x94>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011c6:	4814      	ldr	r0, [pc, #80]	; (8001218 <MX_TIM5_Init+0x94>)
 80011c8:	f001 fea8 	bl	8002f1c <HAL_TIM_Base_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80011d2:	f000 fd25 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	4619      	mov	r1, r3
 80011e2:	480d      	ldr	r0, [pc, #52]	; (8001218 <MX_TIM5_Init+0x94>)
 80011e4:	f002 fb54 	bl	8003890 <HAL_TIM_ConfigClockSource>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80011ee:	f000 fd17 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_TIM5_Init+0x94>)
 8001200:	f002 ff02 	bl	8004008 <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800120a:	f000 fd09 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000014c 	.word	0x2000014c
 800121c:	40000c00 	.word	0x40000c00

08001220 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <MX_USART2_UART_Init+0x50>)
 8001228:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_USART2_UART_Init+0x4c>)
 800122c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001230:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_USART2_UART_Init+0x4c>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001258:	f002 ffaa 	bl	80041b0 <HAL_UART_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001262:	f000 fcdd 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000194 	.word	0x20000194
 8001270:	40004400 	.word	0x40004400

08001274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	4b43      	ldr	r3, [pc, #268]	; (800139c <MX_GPIO_Init+0x128>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a42      	ldr	r2, [pc, #264]	; (800139c <MX_GPIO_Init+0x128>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b40      	ldr	r3, [pc, #256]	; (800139c <MX_GPIO_Init+0x128>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b3c      	ldr	r3, [pc, #240]	; (800139c <MX_GPIO_Init+0x128>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a3b      	ldr	r2, [pc, #236]	; (800139c <MX_GPIO_Init+0x128>)
 80012b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b39      	ldr	r3, [pc, #228]	; (800139c <MX_GPIO_Init+0x128>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	4b35      	ldr	r3, [pc, #212]	; (800139c <MX_GPIO_Init+0x128>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a34      	ldr	r2, [pc, #208]	; (800139c <MX_GPIO_Init+0x128>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b32      	ldr	r3, [pc, #200]	; (800139c <MX_GPIO_Init+0x128>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b2e      	ldr	r3, [pc, #184]	; (800139c <MX_GPIO_Init+0x128>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a2d      	ldr	r2, [pc, #180]	; (800139c <MX_GPIO_Init+0x128>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b2b      	ldr	r3, [pc, #172]	; (800139c <MX_GPIO_Init+0x128>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001300:	4827      	ldr	r0, [pc, #156]	; (80013a0 <MX_GPIO_Init+0x12c>)
 8001302:	f001 f941 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2180      	movs	r1, #128	; 0x80
 800130a:	4826      	ldr	r0, [pc, #152]	; (80013a4 <MX_GPIO_Init+0x130>)
 800130c:	f001 f93c 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001316:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	481f      	ldr	r0, [pc, #124]	; (80013a4 <MX_GPIO_Init+0x130>)
 8001328:	f000 ffaa 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800132c:	2320      	movs	r3, #32
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	4817      	ldr	r0, [pc, #92]	; (80013a0 <MX_GPIO_Init+0x12c>)
 8001344:	f000 ff9c 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800134c:	2311      	movs	r3, #17
 800134e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001350:	2301      	movs	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	4811      	ldr	r0, [pc, #68]	; (80013a4 <MX_GPIO_Init+0x130>)
 8001360:	f000 ff8e 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800136a:	2311      	movs	r3, #17
 800136c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136e:	2301      	movs	r3, #1
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4808      	ldr	r0, [pc, #32]	; (80013a0 <MX_GPIO_Init+0x12c>)
 800137e:	f000 ff7f 	bl	8002280 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2028      	movs	r0, #40	; 0x28
 8001388:	f000 ff43 	bl	8002212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800138c:	2028      	movs	r0, #40	; 0x28
 800138e:	f000 ff5c 	bl	800224a <HAL_NVIC_EnableIRQ>

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020800 	.word	0x40020800

080013a8 <Unwrap>:

int diffen=0;
uint16_t ennow=0;
uint16_t enpre=0;
int roundOfencoder=0;
void Unwrap(){
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
	ennow=htim2.Instance->CNT;
 80013ac:	4b15      	ldr	r3, [pc, #84]	; (8001404 <Unwrap+0x5c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <Unwrap+0x60>)
 80013b6:	801a      	strh	r2, [r3, #0]
	diffen=ennow-enpre;
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <Unwrap+0x60>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <Unwrap+0x64>)
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	4a12      	ldr	r2, [pc, #72]	; (8001410 <Unwrap+0x68>)
 80013c6:	6013      	str	r3, [r2, #0]
	if(diffen>1200){
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <Unwrap+0x68>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80013d0:	dd05      	ble.n	80013de <Unwrap+0x36>
		roundOfencoder=roundOfencoder-1;
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <Unwrap+0x6c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <Unwrap+0x6c>)
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	e009      	b.n	80013f2 <Unwrap+0x4a>
	}else if (-diffen>1200) {
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <Unwrap+0x68>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
 80013e6:	da04      	bge.n	80013f2 <Unwrap+0x4a>
		roundOfencoder=roundOfencoder+1;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <Unwrap+0x6c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	4a09      	ldr	r2, [pc, #36]	; (8001414 <Unwrap+0x6c>)
 80013f0:	6013      	str	r3, [r2, #0]
	}
	enpre=ennow;
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <Unwrap+0x60>)
 80013f4:	881a      	ldrh	r2, [r3, #0]
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <Unwrap+0x64>)
 80013f8:	801a      	strh	r2, [r3, #0]
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	20000104 	.word	0x20000104
 8001408:	200001e8 	.word	0x200001e8
 800140c:	200001ea 	.word	0x200001ea
 8001410:	200001e4 	.word	0x200001e4
 8001414:	200001ec 	.word	0x200001ec

08001418 <GetRealdegrees>:
float GetRealdegrees(){
 8001418:	b5b0      	push	{r4, r5, r7, lr}
 800141a:	af00      	add	r7, sp, #0

	return (roundOfencoder*360)+ ((htim2.Instance->CNT*360.00)/2399.00);
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <GetRealdegrees+0x70>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001424:	fb02 f303 	mul.w	r3, r2, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f827 	bl	800047c <__aeabi_i2d>
 800142e:	4604      	mov	r4, r0
 8001430:	460d      	mov	r5, r1
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <GetRealdegrees+0x74>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f80f 	bl	800045c <__aeabi_ui2d>
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <GetRealdegrees+0x78>)
 8001444:	f7ff f884 	bl	8000550 <__aeabi_dmul>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	a30b      	add	r3, pc, #44	; (adr r3, 8001480 <GetRealdegrees+0x68>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7ff f9a5 	bl	80007a4 <__aeabi_ddiv>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4620      	mov	r0, r4
 8001460:	4629      	mov	r1, r5
 8001462:	f7fe febf 	bl	80001e4 <__adddf3>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fb1f 	bl	8000ab0 <__aeabi_d2f>
 8001472:	4603      	mov	r3, r0
 8001474:	ee07 3a90 	vmov	s15, r3
}
 8001478:	eeb0 0a67 	vmov.f32	s0, s15
 800147c:	bdb0      	pop	{r4, r5, r7, pc}
 800147e:	bf00      	nop
 8001480:	00000000 	.word	0x00000000
 8001484:	40a2be00 	.word	0x40a2be00
 8001488:	200001ec 	.word	0x200001ec
 800148c:	20000104 	.word	0x20000104
 8001490:	40768000 	.word	0x40768000
 8001494:	00000000 	.word	0x00000000

08001498 <GetRealrads>:
float GetRealrads(){
 8001498:	b5b0      	push	{r4, r5, r7, lr}
 800149a:	af00      	add	r7, sp, #0
	return (roundOfencoder*2*3.1415926535897932384626)+( (htim2.Instance->CNT*2*3.1415926535897932384626)/2399.00);
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <GetRealrads+0x80>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7fe ffea 	bl	800047c <__aeabi_i2d>
 80014a8:	a317      	add	r3, pc, #92	; (adr r3, 8001508 <GetRealrads+0x70>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7ff f84f 	bl	8000550 <__aeabi_dmul>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4614      	mov	r4, r2
 80014b8:	461d      	mov	r5, r3
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <GetRealrads+0x84>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe ffca 	bl	800045c <__aeabi_ui2d>
 80014c8:	a30f      	add	r3, pc, #60	; (adr r3, 8001508 <GetRealrads+0x70>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff f83f 	bl	8000550 <__aeabi_dmul>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	a30d      	add	r3, pc, #52	; (adr r3, 8001510 <GetRealrads+0x78>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f960 	bl	80007a4 <__aeabi_ddiv>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fe7a 	bl	80001e4 <__adddf3>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fada 	bl	8000ab0 <__aeabi_d2f>
 80014fc:	4603      	mov	r3, r0
 80014fe:	ee07 3a90 	vmov	s15, r3
}
 8001502:	eeb0 0a67 	vmov.f32	s0, s15
 8001506:	bdb0      	pop	{r4, r5, r7, pc}
 8001508:	54442d18 	.word	0x54442d18
 800150c:	400921fb 	.word	0x400921fb
 8001510:	00000000 	.word	0x00000000
 8001514:	40a2be00 	.word	0x40a2be00
 8001518:	200001ec 	.word	0x200001ec
 800151c:	20000104 	.word	0x20000104

08001520 <Kalman>:
double gg=10;
double rr=0.1;

double ThetaPredict=0;
double OmegaPredict=0;
void Kalman(){
 8001520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001524:	af00      	add	r7, sp, #0

	G=pow(gg,2);
 8001526:	4bc2      	ldr	r3, [pc, #776]	; (8001830 <Kalman+0x310>)
 8001528:	ed93 7b00 	vldr	d7, [r3]
 800152c:	ed9f 1bba 	vldr	d1, [pc, #744]	; 8001818 <Kalman+0x2f8>
 8001530:	eeb0 0a47 	vmov.f32	s0, s14
 8001534:	eef0 0a67 	vmov.f32	s1, s15
 8001538:	f003 f92e 	bl	8004798 <pow>
 800153c:	eeb0 7a40 	vmov.f32	s14, s0
 8001540:	eef0 7a60 	vmov.f32	s15, s1
 8001544:	4bbb      	ldr	r3, [pc, #748]	; (8001834 <Kalman+0x314>)
 8001546:	ed83 7b00 	vstr	d7, [r3]
	R=pow(rr,2);
 800154a:	4bbb      	ldr	r3, [pc, #748]	; (8001838 <Kalman+0x318>)
 800154c:	ed93 7b00 	vldr	d7, [r3]
 8001550:	ed9f 1bb1 	vldr	d1, [pc, #708]	; 8001818 <Kalman+0x2f8>
 8001554:	eeb0 0a47 	vmov.f32	s0, s14
 8001558:	eef0 0a67 	vmov.f32	s1, s15
 800155c:	f003 f91c 	bl	8004798 <pow>
 8001560:	eeb0 7a40 	vmov.f32	s14, s0
 8001564:	eef0 7a60 	vmov.f32	s15, s1
 8001568:	4bb4      	ldr	r3, [pc, #720]	; (800183c <Kalman+0x31c>)
 800156a:	ed83 7b00 	vstr	d7, [r3]
	StateTheta= ThetaPre  + (OmegaPre * t);
 800156e:	4bb4      	ldr	r3, [pc, #720]	; (8001840 <Kalman+0x320>)
 8001570:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001574:	4bb3      	ldr	r3, [pc, #716]	; (8001844 <Kalman+0x324>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7fe ffe9 	bl	8000550 <__aeabi_dmul>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	4bb0      	ldr	r3, [pc, #704]	; (8001848 <Kalman+0x328>)
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	f7fe fe2a 	bl	80001e4 <__adddf3>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	49ad      	ldr	r1, [pc, #692]	; (800184c <Kalman+0x32c>)
 8001596:	e9c1 2300 	strd	r2, r3, [r1]
	StateOmega= OmegaPre;
 800159a:	4ba9      	ldr	r3, [pc, #676]	; (8001840 <Kalman+0x320>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	49ab      	ldr	r1, [pc, #684]	; (8001850 <Kalman+0x330>)
 80015a2:	e9c1 2300 	strd	r2, r3, [r1]
	YTheta_telda = GetRealrads() - ThetaPre;
 80015a6:	f7ff ff77 	bl	8001498 <GetRealrads>
 80015aa:	ee10 3a10 	vmov	r3, s0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ff76 	bl	80004a0 <__aeabi_f2d>
 80015b4:	4ba4      	ldr	r3, [pc, #656]	; (8001848 <Kalman+0x328>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7fe fe11 	bl	80001e0 <__aeabi_dsub>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	49a4      	ldr	r1, [pc, #656]	; (8001854 <Kalman+0x334>)
 80015c4:	e9c1 2300 	strd	r2, r3, [r1]
	CP11= CPpre11 + (CPpre12 * t) + (CPpre22*pow(t,2)) + (CPpre21*t) + (  (G*pow(t,4)/4 )   );
 80015c8:	4ba3      	ldr	r3, [pc, #652]	; (8001858 <Kalman+0x338>)
 80015ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ce:	4b9d      	ldr	r3, [pc, #628]	; (8001844 <Kalman+0x324>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7fe ffbc 	bl	8000550 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	4b9e      	ldr	r3, [pc, #632]	; (800185c <Kalman+0x33c>)
 80015e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e6:	f7fe fdfd 	bl	80001e4 <__adddf3>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4692      	mov	sl, r2
 80015f0:	469b      	mov	fp, r3
 80015f2:	4b94      	ldr	r3, [pc, #592]	; (8001844 <Kalman+0x324>)
 80015f4:	ed93 7b00 	vldr	d7, [r3]
 80015f8:	ed9f 1b87 	vldr	d1, [pc, #540]	; 8001818 <Kalman+0x2f8>
 80015fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001600:	eef0 0a67 	vmov.f32	s1, s15
 8001604:	f003 f8c8 	bl	8004798 <pow>
 8001608:	ec51 0b10 	vmov	r0, r1, d0
 800160c:	4b94      	ldr	r3, [pc, #592]	; (8001860 <Kalman+0x340>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7fe ff9d 	bl	8000550 <__aeabi_dmul>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4650      	mov	r0, sl
 800161c:	4659      	mov	r1, fp
 800161e:	f7fe fde1 	bl	80001e4 <__adddf3>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4692      	mov	sl, r2
 8001628:	469b      	mov	fp, r3
 800162a:	4b8e      	ldr	r3, [pc, #568]	; (8001864 <Kalman+0x344>)
 800162c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001630:	4b84      	ldr	r3, [pc, #528]	; (8001844 <Kalman+0x324>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7fe ff8b 	bl	8000550 <__aeabi_dmul>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4650      	mov	r0, sl
 8001640:	4659      	mov	r1, fp
 8001642:	f7fe fdcf 	bl	80001e4 <__adddf3>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4692      	mov	sl, r2
 800164c:	469b      	mov	fp, r3
 800164e:	4b7d      	ldr	r3, [pc, #500]	; (8001844 <Kalman+0x324>)
 8001650:	ed93 7b00 	vldr	d7, [r3]
 8001654:	ed9f 1b72 	vldr	d1, [pc, #456]	; 8001820 <Kalman+0x300>
 8001658:	eeb0 0a47 	vmov.f32	s0, s14
 800165c:	eef0 0a67 	vmov.f32	s1, s15
 8001660:	f003 f89a 	bl	8004798 <pow>
 8001664:	ec51 0b10 	vmov	r0, r1, d0
 8001668:	4b72      	ldr	r3, [pc, #456]	; (8001834 <Kalman+0x314>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	f7fe ff6f 	bl	8000550 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	4b7a      	ldr	r3, [pc, #488]	; (8001868 <Kalman+0x348>)
 8001680:	f7ff f890 	bl	80007a4 <__aeabi_ddiv>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4650      	mov	r0, sl
 800168a:	4659      	mov	r1, fp
 800168c:	f7fe fdaa 	bl	80001e4 <__adddf3>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4975      	ldr	r1, [pc, #468]	; (800186c <Kalman+0x34c>)
 8001696:	e9c1 2300 	strd	r2, r3, [r1]

	CP12 = CPpre12 + (CPpre22*t) +(  (G*pow(t,3)/2 )   );
 800169a:	4b71      	ldr	r3, [pc, #452]	; (8001860 <Kalman+0x340>)
 800169c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016a0:	4b68      	ldr	r3, [pc, #416]	; (8001844 <Kalman+0x324>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	f7fe ff53 	bl	8000550 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	4b69      	ldr	r3, [pc, #420]	; (8001858 <Kalman+0x338>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe fd94 	bl	80001e4 <__adddf3>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4692      	mov	sl, r2
 80016c2:	469b      	mov	fp, r3
 80016c4:	4b5f      	ldr	r3, [pc, #380]	; (8001844 <Kalman+0x324>)
 80016c6:	ed93 7b00 	vldr	d7, [r3]
 80016ca:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8001828 <Kalman+0x308>
 80016ce:	eeb0 0a47 	vmov.f32	s0, s14
 80016d2:	eef0 0a67 	vmov.f32	s1, s15
 80016d6:	f003 f85f 	bl	8004798 <pow>
 80016da:	ec51 0b10 	vmov	r0, r1, d0
 80016de:	4b55      	ldr	r3, [pc, #340]	; (8001834 <Kalman+0x314>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe ff34 	bl	8000550 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016f8:	f7ff f854 	bl	80007a4 <__aeabi_ddiv>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4650      	mov	r0, sl
 8001702:	4659      	mov	r1, fp
 8001704:	f7fe fd6e 	bl	80001e4 <__adddf3>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4958      	ldr	r1, [pc, #352]	; (8001870 <Kalman+0x350>)
 800170e:	e9c1 2300 	strd	r2, r3, [r1]

	CP21 = (  (G*pow(t,3)/2 )   ) + (CPpre22*t) + CPpre21;
 8001712:	4b4c      	ldr	r3, [pc, #304]	; (8001844 <Kalman+0x324>)
 8001714:	ed93 7b00 	vldr	d7, [r3]
 8001718:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8001828 <Kalman+0x308>
 800171c:	eeb0 0a47 	vmov.f32	s0, s14
 8001720:	eef0 0a67 	vmov.f32	s1, s15
 8001724:	f003 f838 	bl	8004798 <pow>
 8001728:	ec51 0b10 	vmov	r0, r1, d0
 800172c:	4b41      	ldr	r3, [pc, #260]	; (8001834 <Kalman+0x314>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	f7fe ff0d 	bl	8000550 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001746:	f7ff f82d 	bl	80007a4 <__aeabi_ddiv>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4692      	mov	sl, r2
 8001750:	469b      	mov	fp, r3
 8001752:	4b43      	ldr	r3, [pc, #268]	; (8001860 <Kalman+0x340>)
 8001754:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001758:	4b3a      	ldr	r3, [pc, #232]	; (8001844 <Kalman+0x324>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f7fe fef7 	bl	8000550 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4650      	mov	r0, sl
 8001768:	4659      	mov	r1, fp
 800176a:	f7fe fd3b 	bl	80001e4 <__adddf3>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	4b3b      	ldr	r3, [pc, #236]	; (8001864 <Kalman+0x344>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe fd32 	bl	80001e4 <__adddf3>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	493b      	ldr	r1, [pc, #236]	; (8001874 <Kalman+0x354>)
 8001786:	e9c1 2300 	strd	r2, r3, [r1]

	CP22 = CPpre22 + (G*pow(t,2));
 800178a:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <Kalman+0x324>)
 800178c:	ed93 7b00 	vldr	d7, [r3]
 8001790:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001818 <Kalman+0x2f8>
 8001794:	eeb0 0a47 	vmov.f32	s0, s14
 8001798:	eef0 0a67 	vmov.f32	s1, s15
 800179c:	f002 fffc 	bl	8004798 <pow>
 80017a0:	ec51 0b10 	vmov	r0, r1, d0
 80017a4:	4b23      	ldr	r3, [pc, #140]	; (8001834 <Kalman+0x314>)
 80017a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017aa:	f7fe fed1 	bl	8000550 <__aeabi_dmul>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <Kalman+0x340>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	f7fe fd12 	bl	80001e4 <__adddf3>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	492c      	ldr	r1, [pc, #176]	; (8001878 <Kalman+0x358>)
 80017c6:	e9c1 2300 	strd	r2, r3, [r1]

	K11= CP11/(CP11+R);
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <Kalman+0x34c>)
 80017cc:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80017d0:	4b26      	ldr	r3, [pc, #152]	; (800186c <Kalman+0x34c>)
 80017d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <Kalman+0x31c>)
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	f7fe fd02 	bl	80001e4 <__adddf3>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4650      	mov	r0, sl
 80017e6:	4659      	mov	r1, fp
 80017e8:	f7fe ffdc 	bl	80007a4 <__aeabi_ddiv>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4922      	ldr	r1, [pc, #136]	; (800187c <Kalman+0x35c>)
 80017f2:	e9c1 2300 	strd	r2, r3, [r1]
	K21=CP21/(CP11+R);
 80017f6:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <Kalman+0x354>)
 80017f8:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <Kalman+0x34c>)
 80017fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <Kalman+0x31c>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	f7fe fcec 	bl	80001e4 <__adddf3>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4650      	mov	r0, sl
 8001812:	4659      	mov	r1, fp
 8001814:	e034      	b.n	8001880 <Kalman+0x360>
 8001816:	bf00      	nop
 8001818:	00000000 	.word	0x00000000
 800181c:	40000000 	.word	0x40000000
 8001820:	00000000 	.word	0x00000000
 8001824:	40100000 	.word	0x40100000
 8001828:	00000000 	.word	0x00000000
 800182c:	40080000 	.word	0x40080000
 8001830:	20000020 	.word	0x20000020
 8001834:	20000010 	.word	0x20000010
 8001838:	20000028 	.word	0x20000028
 800183c:	20000018 	.word	0x20000018
 8001840:	20000208 	.word	0x20000208
 8001844:	20000008 	.word	0x20000008
 8001848:	20000200 	.word	0x20000200
 800184c:	200001f0 	.word	0x200001f0
 8001850:	200001f8 	.word	0x200001f8
 8001854:	20000210 	.word	0x20000210
 8001858:	20000240 	.word	0x20000240
 800185c:	20000238 	.word	0x20000238
 8001860:	20000250 	.word	0x20000250
 8001864:	20000248 	.word	0x20000248
 8001868:	40100000 	.word	0x40100000
 800186c:	20000218 	.word	0x20000218
 8001870:	20000220 	.word	0x20000220
 8001874:	20000228 	.word	0x20000228
 8001878:	20000230 	.word	0x20000230
 800187c:	20000258 	.word	0x20000258
 8001880:	f7fe ff90 	bl	80007a4 <__aeabi_ddiv>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4971      	ldr	r1, [pc, #452]	; (8001a50 <Kalman+0x530>)
 800188a:	e9c1 2300 	strd	r2, r3, [r1]

	ThetaPredict= StateTheta + (YTheta_telda*K11);
 800188e:	4b71      	ldr	r3, [pc, #452]	; (8001a54 <Kalman+0x534>)
 8001890:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001894:	4b70      	ldr	r3, [pc, #448]	; (8001a58 <Kalman+0x538>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	f7fe fe59 	bl	8000550 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	4b6d      	ldr	r3, [pc, #436]	; (8001a5c <Kalman+0x53c>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fc9a 	bl	80001e4 <__adddf3>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	496a      	ldr	r1, [pc, #424]	; (8001a60 <Kalman+0x540>)
 80018b6:	e9c1 2300 	strd	r2, r3, [r1]
	OmegaPredict= StateOmega + (YTheta_telda*K21);
 80018ba:	4b66      	ldr	r3, [pc, #408]	; (8001a54 <Kalman+0x534>)
 80018bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c0:	4b63      	ldr	r3, [pc, #396]	; (8001a50 <Kalman+0x530>)
 80018c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c6:	f7fe fe43 	bl	8000550 <__aeabi_dmul>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	4b64      	ldr	r3, [pc, #400]	; (8001a64 <Kalman+0x544>)
 80018d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d8:	f7fe fc84 	bl	80001e4 <__adddf3>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4961      	ldr	r1, [pc, #388]	; (8001a68 <Kalman+0x548>)
 80018e2:	e9c1 2300 	strd	r2, r3, [r1]

	CPpre11= -1*(  (CP11/(CP11+R) ) -1)*CP11;
 80018e6:	4b61      	ldr	r3, [pc, #388]	; (8001a6c <Kalman+0x54c>)
 80018e8:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80018ec:	4b5f      	ldr	r3, [pc, #380]	; (8001a6c <Kalman+0x54c>)
 80018ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018f2:	4b5f      	ldr	r3, [pc, #380]	; (8001a70 <Kalman+0x550>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7fe fc74 	bl	80001e4 <__adddf3>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4650      	mov	r0, sl
 8001902:	4659      	mov	r1, fp
 8001904:	f7fe ff4e 	bl	80007a4 <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	4b57      	ldr	r3, [pc, #348]	; (8001a74 <Kalman+0x554>)
 8001916:	f7fe fc63 	bl	80001e0 <__aeabi_dsub>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4690      	mov	r8, r2
 8001920:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001924:	4b51      	ldr	r3, [pc, #324]	; (8001a6c <Kalman+0x54c>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	4640      	mov	r0, r8
 800192c:	4649      	mov	r1, r9
 800192e:	f7fe fe0f 	bl	8000550 <__aeabi_dmul>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4950      	ldr	r1, [pc, #320]	; (8001a78 <Kalman+0x558>)
 8001938:	e9c1 2300 	strd	r2, r3, [r1]
	CPpre12= -1*(  (CP11/(CP11+R) ) -1)* CP12;
 800193c:	4b4b      	ldr	r3, [pc, #300]	; (8001a6c <Kalman+0x54c>)
 800193e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001942:	4b4a      	ldr	r3, [pc, #296]	; (8001a6c <Kalman+0x54c>)
 8001944:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001948:	4b49      	ldr	r3, [pc, #292]	; (8001a70 <Kalman+0x550>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe fc49 	bl	80001e4 <__adddf3>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4640      	mov	r0, r8
 8001958:	4649      	mov	r1, r9
 800195a:	f7fe ff23 	bl	80007a4 <__aeabi_ddiv>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	4b42      	ldr	r3, [pc, #264]	; (8001a74 <Kalman+0x554>)
 800196c:	f7fe fc38 	bl	80001e0 <__aeabi_dsub>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4614      	mov	r4, r2
 8001976:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800197a:	4b40      	ldr	r3, [pc, #256]	; (8001a7c <Kalman+0x55c>)
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	4620      	mov	r0, r4
 8001982:	4629      	mov	r1, r5
 8001984:	f7fe fde4 	bl	8000550 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	493c      	ldr	r1, [pc, #240]	; (8001a80 <Kalman+0x560>)
 800198e:	e9c1 2300 	strd	r2, r3, [r1]
	CPpre21= CP21 - (  (CP21*CP11)/(CP11+R)    );
 8001992:	4b3c      	ldr	r3, [pc, #240]	; (8001a84 <Kalman+0x564>)
 8001994:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001998:	4b3a      	ldr	r3, [pc, #232]	; (8001a84 <Kalman+0x564>)
 800199a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800199e:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <Kalman+0x54c>)
 80019a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a4:	f7fe fdd4 	bl	8000550 <__aeabi_dmul>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4690      	mov	r8, r2
 80019ae:	4699      	mov	r9, r3
 80019b0:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <Kalman+0x54c>)
 80019b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019b6:	4b2e      	ldr	r3, [pc, #184]	; (8001a70 <Kalman+0x550>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7fe fc12 	bl	80001e4 <__adddf3>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4640      	mov	r0, r8
 80019c6:	4649      	mov	r1, r9
 80019c8:	f7fe feec 	bl	80007a4 <__aeabi_ddiv>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4620      	mov	r0, r4
 80019d2:	4629      	mov	r1, r5
 80019d4:	f7fe fc04 	bl	80001e0 <__aeabi_dsub>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	492a      	ldr	r1, [pc, #168]	; (8001a88 <Kalman+0x568>)
 80019de:	e9c1 2300 	strd	r2, r3, [r1]

	CPpre22= CP22 -  (  (CP12*CP21)/(CP11+R)    );
 80019e2:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <Kalman+0x56c>)
 80019e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80019e8:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <Kalman+0x55c>)
 80019ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ee:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <Kalman+0x564>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7fe fdac 	bl	8000550 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4690      	mov	r8, r2
 80019fe:	4699      	mov	r9, r3
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <Kalman+0x54c>)
 8001a02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <Kalman+0x550>)
 8001a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0c:	f7fe fbea 	bl	80001e4 <__adddf3>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4640      	mov	r0, r8
 8001a16:	4649      	mov	r1, r9
 8001a18:	f7fe fec4 	bl	80007a4 <__aeabi_ddiv>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4620      	mov	r0, r4
 8001a22:	4629      	mov	r1, r5
 8001a24:	f7fe fbdc 	bl	80001e0 <__aeabi_dsub>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4918      	ldr	r1, [pc, #96]	; (8001a90 <Kalman+0x570>)
 8001a2e:	e9c1 2300 	strd	r2, r3, [r1]

	//update value
	ThetaPre=ThetaPredict;
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <Kalman+0x540>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	4916      	ldr	r1, [pc, #88]	; (8001a94 <Kalman+0x574>)
 8001a3a:	e9c1 2300 	strd	r2, r3, [r1]
	OmegaPre=OmegaPredict;
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <Kalman+0x548>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	4914      	ldr	r1, [pc, #80]	; (8001a98 <Kalman+0x578>)
 8001a46:	e9c1 2300 	strd	r2, r3, [r1]


}
 8001a4a:	bf00      	nop
 8001a4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a50:	20000260 	.word	0x20000260
 8001a54:	20000210 	.word	0x20000210
 8001a58:	20000258 	.word	0x20000258
 8001a5c:	200001f0 	.word	0x200001f0
 8001a60:	20000268 	.word	0x20000268
 8001a64:	200001f8 	.word	0x200001f8
 8001a68:	20000270 	.word	0x20000270
 8001a6c:	20000218 	.word	0x20000218
 8001a70:	20000018 	.word	0x20000018
 8001a74:	3ff00000 	.word	0x3ff00000
 8001a78:	20000238 	.word	0x20000238
 8001a7c:	20000220 	.word	0x20000220
 8001a80:	20000240 	.word	0x20000240
 8001a84:	20000228 	.word	0x20000228
 8001a88:	20000248 	.word	0x20000248
 8001a8c:	20000230 	.word	0x20000230
 8001a90:	20000250 	.word	0x20000250
 8001a94:	20000200 	.word	0x20000200
 8001a98:	20000208 	.word	0x20000208

08001a9c <HAL_TIM_PeriodElapsedCallback>:
//timer interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	if (htim == &htim5){
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a05      	ldr	r2, [pc, #20]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d103      	bne.n	8001ab4 <HAL_TIM_PeriodElapsedCallback+0x18>
		Unwrap();
 8001aac:	f7ff fc7c 	bl	80013a8 <Unwrap>
		Kalman();
 8001ab0:	f7ff fd36 	bl	8001520 <Kalman>
	}
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	2000014c 	.word	0x2000014c

08001ac0 <togle>:

//togle motor start stop
void togle(){
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
	static uint8_t t=0;
	if(t==0){
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <togle+0x34>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d107      	bne.n	8001adc <togle+0x1c>
		t=1;
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <togle+0x34>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	701a      	strb	r2, [r3, #0]
		PWMm=PWM;
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <togle+0x38>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a09      	ldr	r2, [pc, #36]	; (8001afc <togle+0x3c>)
 8001ad8:	6013      	str	r3, [r2, #0]
	}else{
		t=0;
		PWMm=0;
	}

}
 8001ada:	e005      	b.n	8001ae8 <togle+0x28>
		t=0;
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <togle+0x34>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
		PWMm=0;
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <togle+0x3c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000278 	.word	0x20000278
 8001af8:	20000000 	.word	0x20000000
 8001afc:	200001e0 	.word	0x200001e0

08001b00 <HAL_GPIO_EXTI_Callback>:

//exit callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_13){
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b10:	d101      	bne.n	8001b16 <HAL_GPIO_EXTI_Callback+0x16>
		togle();
 8001b12:	f7ff ffd5 	bl	8001ac0 <togle>
	}
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <aaabs>:


uint32_t aaabs(int x){
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]

	if(x<0){
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	da02      	bge.n	8001b32 <aaabs+0x14>
		return x*-1;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	425b      	negs	r3, r3
 8001b30:	e000      	b.n	8001b34 <aaabs+0x16>
	}else{
		return x;
 8001b32:	687b      	ldr	r3, [r7, #4]
	}
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <Drivemotor>:



//drive motor
void Drivemotor(int PWM){
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	if(PWM<=0 && PWM>=-10000){
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	dc16      	bgt.n	8001b7c <Drivemotor+0x3c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a2f      	ldr	r2, [pc, #188]	; (8001c10 <Drivemotor+0xd0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	db12      	blt.n	8001b7c <Drivemotor+0x3c>
		htim1.Instance->CCR1=aaabs(PWM);
 8001b56:	4b2f      	ldr	r3, [pc, #188]	; (8001c14 <Drivemotor+0xd4>)
 8001b58:	681c      	ldr	r4, [r3, #0]
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffdf 	bl	8001b1e <aaabs>
 8001b60:	4603      	mov	r3, r0
 8001b62:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b6a:	482b      	ldr	r0, [pc, #172]	; (8001c18 <Drivemotor+0xd8>)
 8001b6c:	f000 fd0c 	bl	8002588 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	4829      	ldr	r0, [pc, #164]	; (8001c1c <Drivemotor+0xdc>)
 8001b76:	f000 fd07 	bl	8002588 <HAL_GPIO_WritePin>
 8001b7a:	e045      	b.n	8001c08 <Drivemotor+0xc8>
	}else if (PWM<-10000){
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a24      	ldr	r2, [pc, #144]	; (8001c10 <Drivemotor+0xd0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	da10      	bge.n	8001ba6 <Drivemotor+0x66>
		htim1.Instance->CCR1=10000;
 8001b84:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <Drivemotor+0xd4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b8c:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b94:	4820      	ldr	r0, [pc, #128]	; (8001c18 <Drivemotor+0xd8>)
 8001b96:	f000 fcf7 	bl	8002588 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2180      	movs	r1, #128	; 0x80
 8001b9e:	481f      	ldr	r0, [pc, #124]	; (8001c1c <Drivemotor+0xdc>)
 8001ba0:	f000 fcf2 	bl	8002588 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,1);
	}



}
 8001ba4:	e030      	b.n	8001c08 <Drivemotor+0xc8>
	}else if(PWM>=0 && PWM<=10000){
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db17      	blt.n	8001bdc <Drivemotor+0x9c>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	dc12      	bgt.n	8001bdc <Drivemotor+0x9c>
		htim1.Instance->CCR1=aaabs(PWM);
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <Drivemotor+0xd4>)
 8001bb8:	681c      	ldr	r4, [r3, #0]
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ffaf 	bl	8001b1e <aaabs>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bca:	4813      	ldr	r0, [pc, #76]	; (8001c18 <Drivemotor+0xd8>)
 8001bcc:	f000 fcdc 	bl	8002588 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,1);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2180      	movs	r1, #128	; 0x80
 8001bd4:	4811      	ldr	r0, [pc, #68]	; (8001c1c <Drivemotor+0xdc>)
 8001bd6:	f000 fcd7 	bl	8002588 <HAL_GPIO_WritePin>
 8001bda:	e015      	b.n	8001c08 <Drivemotor+0xc8>
	}else if(PWM>10000){
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f242 7210 	movw	r2, #10000	; 0x2710
 8001be2:	4293      	cmp	r3, r2
 8001be4:	dd10      	ble.n	8001c08 <Drivemotor+0xc8>
		htim1.Instance->CCR1=10000;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <Drivemotor+0xd4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bee:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bf6:	4808      	ldr	r0, [pc, #32]	; (8001c18 <Drivemotor+0xd8>)
 8001bf8:	f000 fcc6 	bl	8002588 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,1);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	2180      	movs	r1, #128	; 0x80
 8001c00:	4806      	ldr	r0, [pc, #24]	; (8001c1c <Drivemotor+0xdc>)
 8001c02:	f000 fcc1 	bl	8002588 <HAL_GPIO_WritePin>
}
 8001c06:	e7ff      	b.n	8001c08 <Drivemotor+0xc8>
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd90      	pop	{r4, r7, pc}
 8001c10:	ffffd8f0 	.word	0xffffd8f0
 8001c14:	200000bc 	.word	0x200000bc
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40020800 	.word	0x40020800

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <Error_Handler+0x8>
	...

08001c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c40:	6453      	str	r3, [r2, #68]	; 0x44
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c6a:	2007      	movs	r0, #7
 8001c6c:	f000 fac6 	bl	80021fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800

08001c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a18      	ldr	r2, [pc, #96]	; (8001cec <HAL_TIM_Base_MspInit+0x70>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d10e      	bne.n	8001cac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <HAL_TIM_Base_MspInit+0x74>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a16      	ldr	r2, [pc, #88]	; (8001cf0 <HAL_TIM_Base_MspInit+0x74>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_TIM_Base_MspInit+0x74>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001caa:	e01a      	b.n	8001ce2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <HAL_TIM_Base_MspInit+0x78>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d115      	bne.n	8001ce2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <HAL_TIM_Base_MspInit+0x74>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	4a0c      	ldr	r2, [pc, #48]	; (8001cf0 <HAL_TIM_Base_MspInit+0x74>)
 8001cc0:	f043 0308 	orr.w	r3, r3, #8
 8001cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_TIM_Base_MspInit+0x74>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2032      	movs	r0, #50	; 0x32
 8001cd8:	f000 fa9b 	bl	8002212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001cdc:	2032      	movs	r0, #50	; 0x32
 8001cde:	f000 fab4 	bl	800224a <HAL_NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40010000 	.word	0x40010000
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40000c00 	.word	0x40000c00

08001cf8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d18:	d12b      	bne.n	8001d72 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x84>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a16      	ldr	r2, [pc, #88]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x84>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x84>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x84>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a0f      	ldr	r2, [pc, #60]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x84>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x84>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d52:	2303      	movs	r3, #3
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d62:	2301      	movs	r3, #1
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d6e:	f000 fa87 	bl	8002280 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d72:	bf00      	nop
 8001d74:	3728      	adds	r7, #40	; 0x28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020000 	.word	0x40020000

08001d84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a12      	ldr	r2, [pc, #72]	; (8001dec <HAL_TIM_MspPostInit+0x68>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d11e      	bne.n	8001de4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_TIM_MspPostInit+0x6c>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <HAL_TIM_MspPostInit+0x6c>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_TIM_MspPostInit+0x6c>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4805      	ldr	r0, [pc, #20]	; (8001df4 <HAL_TIM_MspPostInit+0x70>)
 8001de0:	f000 fa4e 	bl	8002280 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001de4:	bf00      	nop
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40010000 	.word	0x40010000
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020000 	.word	0x40020000

08001df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <HAL_UART_MspInit+0x84>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d12b      	bne.n	8001e72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_UART_MspInit+0x88>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <HAL_UART_MspInit+0x88>)
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_UART_MspInit+0x88>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_UART_MspInit+0x88>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a10      	ldr	r2, [pc, #64]	; (8001e80 <HAL_UART_MspInit+0x88>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_UART_MspInit+0x88>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e52:	230c      	movs	r3, #12
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e62:	2307      	movs	r3, #7
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <HAL_UART_MspInit+0x8c>)
 8001e6e:	f000 fa07 	bl	8002280 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	; 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40004400 	.word	0x40004400
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020000 	.word	0x40020000

08001e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e8c:	e7fe      	b.n	8001e8c <NMI_Handler+0x4>

08001e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e92:	e7fe      	b.n	8001e92 <HardFault_Handler+0x4>

08001e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <MemManage_Handler+0x4>

08001e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e9e:	e7fe      	b.n	8001e9e <BusFault_Handler+0x4>

08001ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <UsageFault_Handler+0x4>

08001ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed4:	f000 f8a2 	bl	800201c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}

08001edc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ee0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ee4:	f000 fb6a 	bl	80025bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}

08001eec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <TIM5_IRQHandler+0x10>)
 8001ef2:	f001 fb03 	bl	80034fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	2000014c 	.word	0x2000014c

08001f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <SystemInit+0x20>)
 8001f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0a:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <SystemInit+0x20>)
 8001f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f28:	480d      	ldr	r0, [pc, #52]	; (8001f60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f2a:	490e      	ldr	r1, [pc, #56]	; (8001f64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f2c:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f30:	e002      	b.n	8001f38 <LoopCopyDataInit>

08001f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f36:	3304      	adds	r3, #4

08001f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f3c:	d3f9      	bcc.n	8001f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f40:	4c0b      	ldr	r4, [pc, #44]	; (8001f70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f44:	e001      	b.n	8001f4a <LoopFillZerobss>

08001f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f48:	3204      	adds	r2, #4

08001f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f4c:	d3fb      	bcc.n	8001f46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f4e:	f7ff ffd7 	bl	8001f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f52:	f002 fbf5 	bl	8004740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f56:	f7fe ff7d 	bl	8000e54 <main>
  bx  lr    
 8001f5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f64:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001f68:	08005640 	.word	0x08005640
  ldr r2, =_sbss
 8001f6c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001f70:	20000280 	.word	0x20000280

08001f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f74:	e7fe      	b.n	8001f74 <ADC_IRQHandler>
	...

08001f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <HAL_Init+0x40>)
 8001f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_Init+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <HAL_Init+0x40>)
 8001f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_Init+0x40>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <HAL_Init+0x40>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa0:	2003      	movs	r0, #3
 8001fa2:	f000 f92b 	bl	80021fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f000 f808 	bl	8001fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fac:	f7ff fe3e 	bl	8001c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023c00 	.word	0x40023c00

08001fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_InitTick+0x54>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_InitTick+0x58>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f943 	bl	8002266 <HAL_SYSTICK_Config>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00e      	b.n	8002008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d80a      	bhi.n	8002006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ff8:	f000 f90b 	bl	8002212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ffc:	4a06      	ldr	r2, [pc, #24]	; (8002018 <HAL_InitTick+0x5c>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000030 	.word	0x20000030
 8002014:	20000038 	.word	0x20000038
 8002018:	20000034 	.word	0x20000034

0800201c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_IncTick+0x20>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_IncTick+0x24>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4413      	add	r3, r2
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <HAL_IncTick+0x24>)
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000038 	.word	0x20000038
 8002040:	2000027c 	.word	0x2000027c

08002044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return uwTick;
 8002048:	4b03      	ldr	r3, [pc, #12]	; (8002058 <HAL_GetTick+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	2000027c 	.word	0x2000027c

0800205c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002078:	4013      	ands	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208e:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	60d3      	str	r3, [r2, #12]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <__NVIC_GetPriorityGrouping+0x18>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	f003 0307 	and.w	r3, r3, #7
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db0b      	blt.n	80020ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	f003 021f 	and.w	r2, r3, #31
 80020d8:	4907      	ldr	r1, [pc, #28]	; (80020f8 <__NVIC_EnableIRQ+0x38>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	2001      	movs	r0, #1
 80020e2:	fa00 f202 	lsl.w	r2, r0, r2
 80020e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000e100 	.word	0xe000e100

080020fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	6039      	str	r1, [r7, #0]
 8002106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	2b00      	cmp	r3, #0
 800210e:	db0a      	blt.n	8002126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	490c      	ldr	r1, [pc, #48]	; (8002148 <__NVIC_SetPriority+0x4c>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	0112      	lsls	r2, r2, #4
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	440b      	add	r3, r1
 8002120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002124:	e00a      	b.n	800213c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4908      	ldr	r1, [pc, #32]	; (800214c <__NVIC_SetPriority+0x50>)
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	3b04      	subs	r3, #4
 8002134:	0112      	lsls	r2, r2, #4
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	440b      	add	r3, r1
 800213a:	761a      	strb	r2, [r3, #24]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000e100 	.word	0xe000e100
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	; 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f1c3 0307 	rsb	r3, r3, #7
 800216a:	2b04      	cmp	r3, #4
 800216c:	bf28      	it	cs
 800216e:	2304      	movcs	r3, #4
 8002170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3304      	adds	r3, #4
 8002176:	2b06      	cmp	r3, #6
 8002178:	d902      	bls.n	8002180 <NVIC_EncodePriority+0x30>
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3b03      	subs	r3, #3
 800217e:	e000      	b.n	8002182 <NVIC_EncodePriority+0x32>
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43da      	mvns	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	401a      	ands	r2, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002198:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	43d9      	mvns	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	4313      	orrs	r3, r2
         );
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3724      	adds	r7, #36	; 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c8:	d301      	bcc.n	80021ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00f      	b.n	80021ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <SysTick_Config+0x40>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021d6:	210f      	movs	r1, #15
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021dc:	f7ff ff8e 	bl	80020fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <SysTick_Config+0x40>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <SysTick_Config+0x40>)
 80021e8:	2207      	movs	r2, #7
 80021ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	e000e010 	.word	0xe000e010

080021fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff29 	bl	800205c <__NVIC_SetPriorityGrouping>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002224:	f7ff ff3e 	bl	80020a4 <__NVIC_GetPriorityGrouping>
 8002228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	6978      	ldr	r0, [r7, #20]
 8002230:	f7ff ff8e 	bl	8002150 <NVIC_EncodePriority>
 8002234:	4602      	mov	r2, r0
 8002236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff5d 	bl	80020fc <__NVIC_SetPriority>
}
 8002242:	bf00      	nop
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff31 	bl	80020c0 <__NVIC_EnableIRQ>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff ffa2 	bl	80021b8 <SysTick_Config>
 8002274:	4603      	mov	r3, r0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	e159      	b.n	8002550 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800229c:	2201      	movs	r2, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	f040 8148 	bne.w	800254a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d005      	beq.n	80022d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d130      	bne.n	8002334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002308:	2201      	movs	r2, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 0201 	and.w	r2, r3, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b03      	cmp	r3, #3
 800233e:	d017      	beq.n	8002370 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d123      	bne.n	80023c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	08da      	lsrs	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3208      	adds	r2, #8
 8002384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	220f      	movs	r2, #15
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	08da      	lsrs	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3208      	adds	r2, #8
 80023be:	69b9      	ldr	r1, [r7, #24]
 80023c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0203 	and.w	r2, r3, #3
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80a2 	beq.w	800254a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b57      	ldr	r3, [pc, #348]	; (8002568 <HAL_GPIO_Init+0x2e8>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4a56      	ldr	r2, [pc, #344]	; (8002568 <HAL_GPIO_Init+0x2e8>)
 8002410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	4b54      	ldr	r3, [pc, #336]	; (8002568 <HAL_GPIO_Init+0x2e8>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002422:	4a52      	ldr	r2, [pc, #328]	; (800256c <HAL_GPIO_Init+0x2ec>)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a49      	ldr	r2, [pc, #292]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d019      	beq.n	8002482 <HAL_GPIO_Init+0x202>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a48      	ldr	r2, [pc, #288]	; (8002574 <HAL_GPIO_Init+0x2f4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d013      	beq.n	800247e <HAL_GPIO_Init+0x1fe>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a47      	ldr	r2, [pc, #284]	; (8002578 <HAL_GPIO_Init+0x2f8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00d      	beq.n	800247a <HAL_GPIO_Init+0x1fa>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a46      	ldr	r2, [pc, #280]	; (800257c <HAL_GPIO_Init+0x2fc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d007      	beq.n	8002476 <HAL_GPIO_Init+0x1f6>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a45      	ldr	r2, [pc, #276]	; (8002580 <HAL_GPIO_Init+0x300>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d101      	bne.n	8002472 <HAL_GPIO_Init+0x1f2>
 800246e:	2304      	movs	r3, #4
 8002470:	e008      	b.n	8002484 <HAL_GPIO_Init+0x204>
 8002472:	2307      	movs	r3, #7
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x204>
 8002476:	2303      	movs	r3, #3
 8002478:	e004      	b.n	8002484 <HAL_GPIO_Init+0x204>
 800247a:	2302      	movs	r3, #2
 800247c:	e002      	b.n	8002484 <HAL_GPIO_Init+0x204>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_GPIO_Init+0x204>
 8002482:	2300      	movs	r3, #0
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	f002 0203 	and.w	r2, r2, #3
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	4093      	lsls	r3, r2
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002494:	4935      	ldr	r1, [pc, #212]	; (800256c <HAL_GPIO_Init+0x2ec>)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	3302      	adds	r3, #2
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a2:	4b38      	ldr	r3, [pc, #224]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c6:	4a2f      	ldr	r2, [pc, #188]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024cc:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024f0:	4a24      	ldr	r2, [pc, #144]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024f6:	4b23      	ldr	r3, [pc, #140]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800251a:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <HAL_GPIO_Init+0x304>)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_GPIO_Init+0x304>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002544:	4a0f      	ldr	r2, [pc, #60]	; (8002584 <HAL_GPIO_Init+0x304>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3301      	adds	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b0f      	cmp	r3, #15
 8002554:	f67f aea2 	bls.w	800229c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3724      	adds	r7, #36	; 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	40013800 	.word	0x40013800
 8002570:	40020000 	.word	0x40020000
 8002574:	40020400 	.word	0x40020400
 8002578:	40020800 	.word	0x40020800
 800257c:	40020c00 	.word	0x40020c00
 8002580:	40021000 	.word	0x40021000
 8002584:	40013c00 	.word	0x40013c00

08002588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
 8002594:	4613      	mov	r3, r2
 8002596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002598:	787b      	ldrb	r3, [r7, #1]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800259e:	887a      	ldrh	r2, [r7, #2]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025a4:	e003      	b.n	80025ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025a6:	887b      	ldrh	r3, [r7, #2]
 80025a8:	041a      	lsls	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	619a      	str	r2, [r3, #24]
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d006      	beq.n	80025e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fa90 	bl	8001b00 <HAL_GPIO_EXTI_Callback>
  }
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40013c00 	.word	0x40013c00

080025ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e267      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d075      	beq.n	80026f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800260a:	4b88      	ldr	r3, [pc, #544]	; (800282c <HAL_RCC_OscConfig+0x240>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b04      	cmp	r3, #4
 8002614:	d00c      	beq.n	8002630 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002616:	4b85      	ldr	r3, [pc, #532]	; (800282c <HAL_RCC_OscConfig+0x240>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800261e:	2b08      	cmp	r3, #8
 8002620:	d112      	bne.n	8002648 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002622:	4b82      	ldr	r3, [pc, #520]	; (800282c <HAL_RCC_OscConfig+0x240>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800262e:	d10b      	bne.n	8002648 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	4b7e      	ldr	r3, [pc, #504]	; (800282c <HAL_RCC_OscConfig+0x240>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d05b      	beq.n	80026f4 <HAL_RCC_OscConfig+0x108>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d157      	bne.n	80026f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e242      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002650:	d106      	bne.n	8002660 <HAL_RCC_OscConfig+0x74>
 8002652:	4b76      	ldr	r3, [pc, #472]	; (800282c <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a75      	ldr	r2, [pc, #468]	; (800282c <HAL_RCC_OscConfig+0x240>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e01d      	b.n	800269c <HAL_RCC_OscConfig+0xb0>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0x98>
 800266a:	4b70      	ldr	r3, [pc, #448]	; (800282c <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a6f      	ldr	r2, [pc, #444]	; (800282c <HAL_RCC_OscConfig+0x240>)
 8002670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b6d      	ldr	r3, [pc, #436]	; (800282c <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6c      	ldr	r2, [pc, #432]	; (800282c <HAL_RCC_OscConfig+0x240>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0xb0>
 8002684:	4b69      	ldr	r3, [pc, #420]	; (800282c <HAL_RCC_OscConfig+0x240>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a68      	ldr	r2, [pc, #416]	; (800282c <HAL_RCC_OscConfig+0x240>)
 800268a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b66      	ldr	r3, [pc, #408]	; (800282c <HAL_RCC_OscConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a65      	ldr	r2, [pc, #404]	; (800282c <HAL_RCC_OscConfig+0x240>)
 8002696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800269a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d013      	beq.n	80026cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7ff fcce 	bl	8002044 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ac:	f7ff fcca 	bl	8002044 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e207      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b5b      	ldr	r3, [pc, #364]	; (800282c <HAL_RCC_OscConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0xc0>
 80026ca:	e014      	b.n	80026f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7ff fcba 	bl	8002044 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d4:	f7ff fcb6 	bl	8002044 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	; 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e1f3      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e6:	4b51      	ldr	r3, [pc, #324]	; (800282c <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0xe8>
 80026f2:	e000      	b.n	80026f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d063      	beq.n	80027ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002702:	4b4a      	ldr	r3, [pc, #296]	; (800282c <HAL_RCC_OscConfig+0x240>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270e:	4b47      	ldr	r3, [pc, #284]	; (800282c <HAL_RCC_OscConfig+0x240>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002716:	2b08      	cmp	r3, #8
 8002718:	d11c      	bne.n	8002754 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271a:	4b44      	ldr	r3, [pc, #272]	; (800282c <HAL_RCC_OscConfig+0x240>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d116      	bne.n	8002754 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002726:	4b41      	ldr	r3, [pc, #260]	; (800282c <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_RCC_OscConfig+0x152>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d001      	beq.n	800273e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e1c7      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273e:	4b3b      	ldr	r3, [pc, #236]	; (800282c <HAL_RCC_OscConfig+0x240>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4937      	ldr	r1, [pc, #220]	; (800282c <HAL_RCC_OscConfig+0x240>)
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	e03a      	b.n	80027ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d020      	beq.n	800279e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800275c:	4b34      	ldr	r3, [pc, #208]	; (8002830 <HAL_RCC_OscConfig+0x244>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7ff fc6f 	bl	8002044 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276a:	f7ff fc6b 	bl	8002044 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e1a8      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277c:	4b2b      	ldr	r3, [pc, #172]	; (800282c <HAL_RCC_OscConfig+0x240>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002788:	4b28      	ldr	r3, [pc, #160]	; (800282c <HAL_RCC_OscConfig+0x240>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4925      	ldr	r1, [pc, #148]	; (800282c <HAL_RCC_OscConfig+0x240>)
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]
 800279c:	e015      	b.n	80027ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279e:	4b24      	ldr	r3, [pc, #144]	; (8002830 <HAL_RCC_OscConfig+0x244>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7ff fc4e 	bl	8002044 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ac:	f7ff fc4a 	bl	8002044 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e187      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027be:	4b1b      	ldr	r3, [pc, #108]	; (800282c <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d036      	beq.n	8002844 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d016      	beq.n	800280c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027de:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_RCC_OscConfig+0x248>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e4:	f7ff fc2e 	bl	8002044 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ec:	f7ff fc2a 	bl	8002044 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e167      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_RCC_OscConfig+0x240>)
 8002800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x200>
 800280a:	e01b      	b.n	8002844 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_RCC_OscConfig+0x248>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002812:	f7ff fc17 	bl	8002044 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002818:	e00e      	b.n	8002838 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800281a:	f7ff fc13 	bl	8002044 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d907      	bls.n	8002838 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e150      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
 800282c:	40023800 	.word	0x40023800
 8002830:	42470000 	.word	0x42470000
 8002834:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002838:	4b88      	ldr	r3, [pc, #544]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 800283a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1ea      	bne.n	800281a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 8097 	beq.w	8002980 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002856:	4b81      	ldr	r3, [pc, #516]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10f      	bne.n	8002882 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	4b7d      	ldr	r3, [pc, #500]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	4a7c      	ldr	r2, [pc, #496]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 800286c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002870:	6413      	str	r3, [r2, #64]	; 0x40
 8002872:	4b7a      	ldr	r3, [pc, #488]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287e:	2301      	movs	r3, #1
 8002880:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002882:	4b77      	ldr	r3, [pc, #476]	; (8002a60 <HAL_RCC_OscConfig+0x474>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d118      	bne.n	80028c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288e:	4b74      	ldr	r3, [pc, #464]	; (8002a60 <HAL_RCC_OscConfig+0x474>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a73      	ldr	r2, [pc, #460]	; (8002a60 <HAL_RCC_OscConfig+0x474>)
 8002894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289a:	f7ff fbd3 	bl	8002044 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a2:	f7ff fbcf 	bl	8002044 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e10c      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	4b6a      	ldr	r3, [pc, #424]	; (8002a60 <HAL_RCC_OscConfig+0x474>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d106      	bne.n	80028d6 <HAL_RCC_OscConfig+0x2ea>
 80028c8:	4b64      	ldr	r3, [pc, #400]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	4a63      	ldr	r2, [pc, #396]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6713      	str	r3, [r2, #112]	; 0x70
 80028d4:	e01c      	b.n	8002910 <HAL_RCC_OscConfig+0x324>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b05      	cmp	r3, #5
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0x30c>
 80028de:	4b5f      	ldr	r3, [pc, #380]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	4a5e      	ldr	r2, [pc, #376]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028e4:	f043 0304 	orr.w	r3, r3, #4
 80028e8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ea:	4b5c      	ldr	r3, [pc, #368]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	4a5b      	ldr	r2, [pc, #364]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6713      	str	r3, [r2, #112]	; 0x70
 80028f6:	e00b      	b.n	8002910 <HAL_RCC_OscConfig+0x324>
 80028f8:	4b58      	ldr	r3, [pc, #352]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	4a57      	ldr	r2, [pc, #348]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	6713      	str	r3, [r2, #112]	; 0x70
 8002904:	4b55      	ldr	r3, [pc, #340]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002908:	4a54      	ldr	r2, [pc, #336]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 800290a:	f023 0304 	bic.w	r3, r3, #4
 800290e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d015      	beq.n	8002944 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002918:	f7ff fb94 	bl	8002044 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291e:	e00a      	b.n	8002936 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002920:	f7ff fb90 	bl	8002044 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	; 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e0cb      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002936:	4b49      	ldr	r3, [pc, #292]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0ee      	beq.n	8002920 <HAL_RCC_OscConfig+0x334>
 8002942:	e014      	b.n	800296e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002944:	f7ff fb7e 	bl	8002044 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294a:	e00a      	b.n	8002962 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800294c:	f7ff fb7a 	bl	8002044 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	; 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e0b5      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002962:	4b3e      	ldr	r3, [pc, #248]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1ee      	bne.n	800294c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800296e:	7dfb      	ldrb	r3, [r7, #23]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d105      	bne.n	8002980 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002974:	4b39      	ldr	r3, [pc, #228]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	4a38      	ldr	r2, [pc, #224]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 800297a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80a1 	beq.w	8002acc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800298a:	4b34      	ldr	r3, [pc, #208]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b08      	cmp	r3, #8
 8002994:	d05c      	beq.n	8002a50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d141      	bne.n	8002a22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	4b31      	ldr	r3, [pc, #196]	; (8002a64 <HAL_RCC_OscConfig+0x478>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7ff fb4e 	bl	8002044 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ac:	f7ff fb4a 	bl	8002044 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e087      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029be:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69da      	ldr	r2, [r3, #28]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	019b      	lsls	r3, r3, #6
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	085b      	lsrs	r3, r3, #1
 80029e2:	3b01      	subs	r3, #1
 80029e4:	041b      	lsls	r3, r3, #16
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	491b      	ldr	r1, [pc, #108]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f4:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <HAL_RCC_OscConfig+0x478>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fa:	f7ff fb23 	bl	8002044 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a02:	f7ff fb1f 	bl	8002044 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e05c      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x416>
 8002a20:	e054      	b.n	8002acc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <HAL_RCC_OscConfig+0x478>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7ff fb0c 	bl	8002044 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a30:	f7ff fb08 	bl	8002044 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e045      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x444>
 8002a4e:	e03d      	b.n	8002acc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d107      	bne.n	8002a68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e038      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40007000 	.word	0x40007000
 8002a64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a68:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <HAL_RCC_OscConfig+0x4ec>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d028      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d121      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d11a      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a98:	4013      	ands	r3, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d111      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	085b      	lsrs	r3, r3, #1
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800

08002adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0cc      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af0:	4b68      	ldr	r3, [pc, #416]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d90c      	bls.n	8002b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b65      	ldr	r3, [pc, #404]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b63      	ldr	r3, [pc, #396]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0b8      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d020      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b30:	4b59      	ldr	r3, [pc, #356]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a58      	ldr	r2, [pc, #352]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b48:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a52      	ldr	r2, [pc, #328]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b54:	4b50      	ldr	r3, [pc, #320]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	494d      	ldr	r1, [pc, #308]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d044      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7a:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d119      	bne.n	8002bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e07f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d003      	beq.n	8002b9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9a:	4b3f      	ldr	r3, [pc, #252]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d109      	bne.n	8002bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e06f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002baa:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e067      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bba:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f023 0203 	bic.w	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	4934      	ldr	r1, [pc, #208]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bcc:	f7ff fa3a 	bl	8002044 <HAL_GetTick>
 8002bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd4:	f7ff fa36 	bl	8002044 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e04f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bea:	4b2b      	ldr	r3, [pc, #172]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 020c 	and.w	r2, r3, #12
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d1eb      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b25      	ldr	r3, [pc, #148]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d20c      	bcs.n	8002c24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c12:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e032      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c30:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4916      	ldr	r1, [pc, #88]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	490e      	ldr	r1, [pc, #56]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c62:	f000 f821 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 8002c66:	4602      	mov	r2, r0
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	490a      	ldr	r1, [pc, #40]	; (8002c9c <HAL_RCC_ClockConfig+0x1c0>)
 8002c74:	5ccb      	ldrb	r3, [r1, r3]
 8002c76:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7a:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff f99a 	bl	8001fbc <HAL_InitTick>

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40023c00 	.word	0x40023c00
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	080055e8 	.word	0x080055e8
 8002ca0:	20000030 	.word	0x20000030
 8002ca4:	20000034 	.word	0x20000034

08002ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cac:	b094      	sub	sp, #80	; 0x50
 8002cae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cb8:	2300      	movs	r3, #0
 8002cba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cc0:	4b79      	ldr	r3, [pc, #484]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d00d      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	f200 80e1 	bhi.w	8002e94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x34>
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cda:	e0db      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cdc:	4b73      	ldr	r3, [pc, #460]	; (8002eac <HAL_RCC_GetSysClockFreq+0x204>)
 8002cde:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ce0:	e0db      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ce2:	4b73      	ldr	r3, [pc, #460]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ce4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ce6:	e0d8      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ce8:	4b6f      	ldr	r3, [pc, #444]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cf0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cf2:	4b6d      	ldr	r3, [pc, #436]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d063      	beq.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfe:	4b6a      	ldr	r3, [pc, #424]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	099b      	lsrs	r3, r3, #6
 8002d04:	2200      	movs	r2, #0
 8002d06:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d10:	633b      	str	r3, [r7, #48]	; 0x30
 8002d12:	2300      	movs	r3, #0
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34
 8002d16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	462b      	mov	r3, r5
 8002d1e:	f04f 0000 	mov.w	r0, #0
 8002d22:	f04f 0100 	mov.w	r1, #0
 8002d26:	0159      	lsls	r1, r3, #5
 8002d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d2c:	0150      	lsls	r0, r2, #5
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4621      	mov	r1, r4
 8002d34:	1a51      	subs	r1, r2, r1
 8002d36:	6139      	str	r1, [r7, #16]
 8002d38:	4629      	mov	r1, r5
 8002d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d4c:	4659      	mov	r1, fp
 8002d4e:	018b      	lsls	r3, r1, #6
 8002d50:	4651      	mov	r1, sl
 8002d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d56:	4651      	mov	r1, sl
 8002d58:	018a      	lsls	r2, r1, #6
 8002d5a:	4651      	mov	r1, sl
 8002d5c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d60:	4659      	mov	r1, fp
 8002d62:	eb63 0901 	sbc.w	r9, r3, r1
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d7a:	4690      	mov	r8, r2
 8002d7c:	4699      	mov	r9, r3
 8002d7e:	4623      	mov	r3, r4
 8002d80:	eb18 0303 	adds.w	r3, r8, r3
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	462b      	mov	r3, r5
 8002d88:	eb49 0303 	adc.w	r3, r9, r3
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d9a:	4629      	mov	r1, r5
 8002d9c:	024b      	lsls	r3, r1, #9
 8002d9e:	4621      	mov	r1, r4
 8002da0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002da4:	4621      	mov	r1, r4
 8002da6:	024a      	lsls	r2, r1, #9
 8002da8:	4610      	mov	r0, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dae:	2200      	movs	r2, #0
 8002db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002db4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002db8:	f7fd feca 	bl	8000b50 <__aeabi_uldivmod>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dc4:	e058      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc6:	4b38      	ldr	r3, [pc, #224]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	2200      	movs	r2, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dd6:	623b      	str	r3, [r7, #32]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
 8002ddc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002de0:	4642      	mov	r2, r8
 8002de2:	464b      	mov	r3, r9
 8002de4:	f04f 0000 	mov.w	r0, #0
 8002de8:	f04f 0100 	mov.w	r1, #0
 8002dec:	0159      	lsls	r1, r3, #5
 8002dee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df2:	0150      	lsls	r0, r2, #5
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4641      	mov	r1, r8
 8002dfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dfe:	4649      	mov	r1, r9
 8002e00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e18:	ebb2 040a 	subs.w	r4, r2, sl
 8002e1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	00eb      	lsls	r3, r5, #3
 8002e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e2e:	00e2      	lsls	r2, r4, #3
 8002e30:	4614      	mov	r4, r2
 8002e32:	461d      	mov	r5, r3
 8002e34:	4643      	mov	r3, r8
 8002e36:	18e3      	adds	r3, r4, r3
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	464b      	mov	r3, r9
 8002e3c:	eb45 0303 	adc.w	r3, r5, r3
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e4e:	4629      	mov	r1, r5
 8002e50:	028b      	lsls	r3, r1, #10
 8002e52:	4621      	mov	r1, r4
 8002e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e58:	4621      	mov	r1, r4
 8002e5a:	028a      	lsls	r2, r1, #10
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e62:	2200      	movs	r2, #0
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	61fa      	str	r2, [r7, #28]
 8002e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e6c:	f7fd fe70 	bl	8000b50 <__aeabi_uldivmod>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4613      	mov	r3, r2
 8002e76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	0c1b      	lsrs	r3, r3, #16
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	3301      	adds	r3, #1
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e92:	e002      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_RCC_GetSysClockFreq+0x204>)
 8002e96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3750      	adds	r7, #80	; 0x50
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	00f42400 	.word	0x00f42400
 8002eb0:	007a1200 	.word	0x007a1200

08002eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eba:	681b      	ldr	r3, [r3, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20000030 	.word	0x20000030

08002ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ed0:	f7ff fff0 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	0a9b      	lsrs	r3, r3, #10
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	4903      	ldr	r1, [pc, #12]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	080055f8 	.word	0x080055f8

08002ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ef8:	f7ff ffdc 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	0b5b      	lsrs	r3, r3, #13
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4903      	ldr	r1, [pc, #12]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f0a:	5ccb      	ldrb	r3, [r1, r3]
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40023800 	.word	0x40023800
 8002f18:	080055f8 	.word	0x080055f8

08002f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e041      	b.n	8002fb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe fe9a 	bl	8001c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3304      	adds	r3, #4
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f000 fd88 	bl	8003a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d001      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e044      	b.n	800305e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a1e      	ldr	r2, [pc, #120]	; (800306c <HAL_TIM_Base_Start_IT+0xb0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d018      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x6c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffe:	d013      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x6c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1a      	ldr	r2, [pc, #104]	; (8003070 <HAL_TIM_Base_Start_IT+0xb4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00e      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x6c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a19      	ldr	r2, [pc, #100]	; (8003074 <HAL_TIM_Base_Start_IT+0xb8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d009      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x6c>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a17      	ldr	r2, [pc, #92]	; (8003078 <HAL_TIM_Base_Start_IT+0xbc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d004      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x6c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a16      	ldr	r2, [pc, #88]	; (800307c <HAL_TIM_Base_Start_IT+0xc0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d111      	bne.n	800304c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b06      	cmp	r3, #6
 8003038:	d010      	beq.n	800305c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304a:	e007      	b.n	800305c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40010000 	.word	0x40010000
 8003070:	40000400 	.word	0x40000400
 8003074:	40000800 	.word	0x40000800
 8003078:	40000c00 	.word	0x40000c00
 800307c:	40014000 	.word	0x40014000

08003080 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e041      	b.n	8003116 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f839 	bl	800311e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3304      	adds	r3, #4
 80030bc:	4619      	mov	r1, r3
 80030be:	4610      	mov	r0, r2
 80030c0:	f000 fcd6 	bl	8003a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d109      	bne.n	8003158 <HAL_TIM_PWM_Start+0x24>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e022      	b.n	800319e <HAL_TIM_PWM_Start+0x6a>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2b04      	cmp	r3, #4
 800315c:	d109      	bne.n	8003172 <HAL_TIM_PWM_Start+0x3e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	bf14      	ite	ne
 800316a:	2301      	movne	r3, #1
 800316c:	2300      	moveq	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	e015      	b.n	800319e <HAL_TIM_PWM_Start+0x6a>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b08      	cmp	r3, #8
 8003176:	d109      	bne.n	800318c <HAL_TIM_PWM_Start+0x58>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	bf14      	ite	ne
 8003184:	2301      	movne	r3, #1
 8003186:	2300      	moveq	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	e008      	b.n	800319e <HAL_TIM_PWM_Start+0x6a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e068      	b.n	8003278 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d104      	bne.n	80031b6 <HAL_TIM_PWM_Start+0x82>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031b4:	e013      	b.n	80031de <HAL_TIM_PWM_Start+0xaa>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d104      	bne.n	80031c6 <HAL_TIM_PWM_Start+0x92>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031c4:	e00b      	b.n	80031de <HAL_TIM_PWM_Start+0xaa>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d104      	bne.n	80031d6 <HAL_TIM_PWM_Start+0xa2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031d4:	e003      	b.n	80031de <HAL_TIM_PWM_Start+0xaa>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2202      	movs	r2, #2
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2201      	movs	r2, #1
 80031e4:	6839      	ldr	r1, [r7, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fee8 	bl	8003fbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a23      	ldr	r2, [pc, #140]	; (8003280 <HAL_TIM_PWM_Start+0x14c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d107      	bne.n	8003206 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003204:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1d      	ldr	r2, [pc, #116]	; (8003280 <HAL_TIM_PWM_Start+0x14c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d018      	beq.n	8003242 <HAL_TIM_PWM_Start+0x10e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003218:	d013      	beq.n	8003242 <HAL_TIM_PWM_Start+0x10e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a19      	ldr	r2, [pc, #100]	; (8003284 <HAL_TIM_PWM_Start+0x150>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00e      	beq.n	8003242 <HAL_TIM_PWM_Start+0x10e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a17      	ldr	r2, [pc, #92]	; (8003288 <HAL_TIM_PWM_Start+0x154>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_TIM_PWM_Start+0x10e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a16      	ldr	r2, [pc, #88]	; (800328c <HAL_TIM_PWM_Start+0x158>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d004      	beq.n	8003242 <HAL_TIM_PWM_Start+0x10e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a14      	ldr	r2, [pc, #80]	; (8003290 <HAL_TIM_PWM_Start+0x15c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d111      	bne.n	8003266 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b06      	cmp	r3, #6
 8003252:	d010      	beq.n	8003276 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003264:	e007      	b.n	8003276 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0201 	orr.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40010000 	.word	0x40010000
 8003284:	40000400 	.word	0x40000400
 8003288:	40000800 	.word	0x40000800
 800328c:	40000c00 	.word	0x40000c00
 8003290:	40014000 	.word	0x40014000

08003294 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e097      	b.n	80033d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d106      	bne.n	80032c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7fe fd1b 	bl	8001cf8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2202      	movs	r2, #2
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032d8:	f023 0307 	bic.w	r3, r3, #7
 80032dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3304      	adds	r3, #4
 80032e6:	4619      	mov	r1, r3
 80032e8:	4610      	mov	r0, r2
 80032ea:	f000 fbc1 	bl	8003a70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003316:	f023 0303 	bic.w	r3, r3, #3
 800331a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	021b      	lsls	r3, r3, #8
 8003326:	4313      	orrs	r3, r2
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003334:	f023 030c 	bic.w	r3, r3, #12
 8003338:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003340:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	4313      	orrs	r3, r2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	011a      	lsls	r2, r3, #4
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	031b      	lsls	r3, r3, #12
 8003364:	4313      	orrs	r3, r2
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003372:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800337a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	4313      	orrs	r3, r2
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003400:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003408:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d110      	bne.n	8003432 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d102      	bne.n	800341c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003416:	7b7b      	ldrb	r3, [r7, #13]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d001      	beq.n	8003420 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e069      	b.n	80034f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003430:	e031      	b.n	8003496 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b04      	cmp	r3, #4
 8003436:	d110      	bne.n	800345a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003438:	7bbb      	ldrb	r3, [r7, #14]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d102      	bne.n	8003444 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800343e:	7b3b      	ldrb	r3, [r7, #12]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d001      	beq.n	8003448 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e055      	b.n	80034f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003458:	e01d      	b.n	8003496 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d108      	bne.n	8003472 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003460:	7bbb      	ldrb	r3, [r7, #14]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d105      	bne.n	8003472 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003466:	7b7b      	ldrb	r3, [r7, #13]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d102      	bne.n	8003472 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800346c:	7b3b      	ldrb	r3, [r7, #12]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d001      	beq.n	8003476 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e03e      	b.n	80034f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2202      	movs	r2, #2
 800347a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2202      	movs	r2, #2
 800348a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2202      	movs	r2, #2
 8003492:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_TIM_Encoder_Start+0xc4>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d008      	beq.n	80034b4 <HAL_TIM_Encoder_Start+0xd4>
 80034a2:	e00f      	b.n	80034c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2201      	movs	r2, #1
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fd85 	bl	8003fbc <TIM_CCxChannelCmd>
      break;
 80034b2:	e016      	b.n	80034e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2201      	movs	r2, #1
 80034ba:	2104      	movs	r1, #4
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fd7d 	bl	8003fbc <TIM_CCxChannelCmd>
      break;
 80034c2:	e00e      	b.n	80034e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2201      	movs	r2, #1
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 fd75 	bl	8003fbc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2201      	movs	r2, #1
 80034d8:	2104      	movs	r1, #4
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fd6e 	bl	8003fbc <TIM_CCxChannelCmd>
      break;
 80034e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b02      	cmp	r3, #2
 8003510:	d122      	bne.n	8003558 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b02      	cmp	r3, #2
 800351e:	d11b      	bne.n	8003558 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0202 	mvn.w	r2, #2
 8003528:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fa77 	bl	8003a32 <HAL_TIM_IC_CaptureCallback>
 8003544:	e005      	b.n	8003552 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fa69 	bl	8003a1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 fa7a 	bl	8003a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b04      	cmp	r3, #4
 8003564:	d122      	bne.n	80035ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b04      	cmp	r3, #4
 8003572:	d11b      	bne.n	80035ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0204 	mvn.w	r2, #4
 800357c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fa4d 	bl	8003a32 <HAL_TIM_IC_CaptureCallback>
 8003598:	e005      	b.n	80035a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fa3f 	bl	8003a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fa50 	bl	8003a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d122      	bne.n	8003600 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d11b      	bne.n	8003600 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0208 	mvn.w	r2, #8
 80035d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2204      	movs	r2, #4
 80035d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fa23 	bl	8003a32 <HAL_TIM_IC_CaptureCallback>
 80035ec:	e005      	b.n	80035fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fa15 	bl	8003a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fa26 	bl	8003a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0310 	and.w	r3, r3, #16
 800360a:	2b10      	cmp	r3, #16
 800360c:	d122      	bne.n	8003654 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b10      	cmp	r3, #16
 800361a:	d11b      	bne.n	8003654 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0210 	mvn.w	r2, #16
 8003624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2208      	movs	r2, #8
 800362a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f9f9 	bl	8003a32 <HAL_TIM_IC_CaptureCallback>
 8003640:	e005      	b.n	800364e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f9eb 	bl	8003a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f9fc 	bl	8003a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b01      	cmp	r3, #1
 8003660:	d10e      	bne.n	8003680 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b01      	cmp	r3, #1
 800366e:	d107      	bne.n	8003680 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0201 	mvn.w	r2, #1
 8003678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fe fa0e 	bl	8001a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368a:	2b80      	cmp	r3, #128	; 0x80
 800368c:	d10e      	bne.n	80036ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003698:	2b80      	cmp	r3, #128	; 0x80
 800369a:	d107      	bne.n	80036ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fd78 	bl	800419c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b40      	cmp	r3, #64	; 0x40
 80036b8:	d10e      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c4:	2b40      	cmp	r3, #64	; 0x40
 80036c6:	d107      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f9c1 	bl	8003a5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d10e      	bne.n	8003704 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d107      	bne.n	8003704 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0220 	mvn.w	r2, #32
 80036fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fd42 	bl	8004188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003704:	bf00      	nop
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003726:	2302      	movs	r3, #2
 8003728:	e0ae      	b.n	8003888 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b0c      	cmp	r3, #12
 8003736:	f200 809f 	bhi.w	8003878 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800373a:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800373c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003740:	08003775 	.word	0x08003775
 8003744:	08003879 	.word	0x08003879
 8003748:	08003879 	.word	0x08003879
 800374c:	08003879 	.word	0x08003879
 8003750:	080037b5 	.word	0x080037b5
 8003754:	08003879 	.word	0x08003879
 8003758:	08003879 	.word	0x08003879
 800375c:	08003879 	.word	0x08003879
 8003760:	080037f7 	.word	0x080037f7
 8003764:	08003879 	.word	0x08003879
 8003768:	08003879 	.word	0x08003879
 800376c:	08003879 	.word	0x08003879
 8003770:	08003837 	.word	0x08003837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 f9f8 	bl	8003b70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0208 	orr.w	r2, r2, #8
 800378e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0204 	bic.w	r2, r2, #4
 800379e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6999      	ldr	r1, [r3, #24]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	619a      	str	r2, [r3, #24]
      break;
 80037b2:	e064      	b.n	800387e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fa3e 	bl	8003c3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6999      	ldr	r1, [r3, #24]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	021a      	lsls	r2, r3, #8
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	619a      	str	r2, [r3, #24]
      break;
 80037f4:	e043      	b.n	800387e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fa89 	bl	8003d14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0208 	orr.w	r2, r2, #8
 8003810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0204 	bic.w	r2, r2, #4
 8003820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69d9      	ldr	r1, [r3, #28]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	61da      	str	r2, [r3, #28]
      break;
 8003834:	e023      	b.n	800387e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fad3 	bl	8003de8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69da      	ldr	r2, [r3, #28]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69d9      	ldr	r1, [r3, #28]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	021a      	lsls	r2, r3, #8
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	61da      	str	r2, [r3, #28]
      break;
 8003876:	e002      	b.n	800387e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	75fb      	strb	r3, [r7, #23]
      break;
 800387c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003886:	7dfb      	ldrb	r3, [r7, #23]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_TIM_ConfigClockSource+0x1c>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e0b4      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x186>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e4:	d03e      	beq.n	8003964 <HAL_TIM_ConfigClockSource+0xd4>
 80038e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ea:	f200 8087 	bhi.w	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 80038ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f2:	f000 8086 	beq.w	8003a02 <HAL_TIM_ConfigClockSource+0x172>
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fa:	d87f      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 80038fc:	2b70      	cmp	r3, #112	; 0x70
 80038fe:	d01a      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0xa6>
 8003900:	2b70      	cmp	r3, #112	; 0x70
 8003902:	d87b      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 8003904:	2b60      	cmp	r3, #96	; 0x60
 8003906:	d050      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x11a>
 8003908:	2b60      	cmp	r3, #96	; 0x60
 800390a:	d877      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 800390c:	2b50      	cmp	r3, #80	; 0x50
 800390e:	d03c      	beq.n	800398a <HAL_TIM_ConfigClockSource+0xfa>
 8003910:	2b50      	cmp	r3, #80	; 0x50
 8003912:	d873      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 8003914:	2b40      	cmp	r3, #64	; 0x40
 8003916:	d058      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x13a>
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	d86f      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 800391c:	2b30      	cmp	r3, #48	; 0x30
 800391e:	d064      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003920:	2b30      	cmp	r3, #48	; 0x30
 8003922:	d86b      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 8003924:	2b20      	cmp	r3, #32
 8003926:	d060      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003928:	2b20      	cmp	r3, #32
 800392a:	d867      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d05c      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003930:	2b10      	cmp	r3, #16
 8003932:	d05a      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003934:	e062      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6899      	ldr	r1, [r3, #8]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f000 fb19 	bl	8003f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	609a      	str	r2, [r3, #8]
      break;
 8003962:	e04f      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6818      	ldr	r0, [r3, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	6899      	ldr	r1, [r3, #8]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f000 fb02 	bl	8003f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003986:	609a      	str	r2, [r3, #8]
      break;
 8003988:	e03c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6859      	ldr	r1, [r3, #4]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	461a      	mov	r2, r3
 8003998:	f000 fa76 	bl	8003e88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2150      	movs	r1, #80	; 0x50
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 facf 	bl	8003f46 <TIM_ITRx_SetConfig>
      break;
 80039a8:	e02c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	461a      	mov	r2, r3
 80039b8:	f000 fa95 	bl	8003ee6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2160      	movs	r1, #96	; 0x60
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fabf 	bl	8003f46 <TIM_ITRx_SetConfig>
      break;
 80039c8:	e01c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6859      	ldr	r1, [r3, #4]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	461a      	mov	r2, r3
 80039d8:	f000 fa56 	bl	8003e88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2140      	movs	r1, #64	; 0x40
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 faaf 	bl	8003f46 <TIM_ITRx_SetConfig>
      break;
 80039e8:	e00c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f000 faa6 	bl	8003f46 <TIM_ITRx_SetConfig>
      break;
 80039fa:	e003      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003a00:	e000      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a34      	ldr	r2, [pc, #208]	; (8003b54 <TIM_Base_SetConfig+0xe4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00f      	beq.n	8003aa8 <TIM_Base_SetConfig+0x38>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8e:	d00b      	beq.n	8003aa8 <TIM_Base_SetConfig+0x38>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a31      	ldr	r2, [pc, #196]	; (8003b58 <TIM_Base_SetConfig+0xe8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <TIM_Base_SetConfig+0x38>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a30      	ldr	r2, [pc, #192]	; (8003b5c <TIM_Base_SetConfig+0xec>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <TIM_Base_SetConfig+0x38>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a2f      	ldr	r2, [pc, #188]	; (8003b60 <TIM_Base_SetConfig+0xf0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d108      	bne.n	8003aba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a25      	ldr	r2, [pc, #148]	; (8003b54 <TIM_Base_SetConfig+0xe4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01b      	beq.n	8003afa <TIM_Base_SetConfig+0x8a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac8:	d017      	beq.n	8003afa <TIM_Base_SetConfig+0x8a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a22      	ldr	r2, [pc, #136]	; (8003b58 <TIM_Base_SetConfig+0xe8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <TIM_Base_SetConfig+0x8a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a21      	ldr	r2, [pc, #132]	; (8003b5c <TIM_Base_SetConfig+0xec>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00f      	beq.n	8003afa <TIM_Base_SetConfig+0x8a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a20      	ldr	r2, [pc, #128]	; (8003b60 <TIM_Base_SetConfig+0xf0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00b      	beq.n	8003afa <TIM_Base_SetConfig+0x8a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <TIM_Base_SetConfig+0xf4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d007      	beq.n	8003afa <TIM_Base_SetConfig+0x8a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a1e      	ldr	r2, [pc, #120]	; (8003b68 <TIM_Base_SetConfig+0xf8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d003      	beq.n	8003afa <TIM_Base_SetConfig+0x8a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <TIM_Base_SetConfig+0xfc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d108      	bne.n	8003b0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a08      	ldr	r2, [pc, #32]	; (8003b54 <TIM_Base_SetConfig+0xe4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d103      	bne.n	8003b40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	615a      	str	r2, [r3, #20]
}
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40010000 	.word	0x40010000
 8003b58:	40000400 	.word	0x40000400
 8003b5c:	40000800 	.word	0x40000800
 8003b60:	40000c00 	.word	0x40000c00
 8003b64:	40014000 	.word	0x40014000
 8003b68:	40014400 	.word	0x40014400
 8003b6c:	40014800 	.word	0x40014800

08003b70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f023 0201 	bic.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0303 	bic.w	r3, r3, #3
 8003ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f023 0302 	bic.w	r3, r3, #2
 8003bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a1c      	ldr	r2, [pc, #112]	; (8003c38 <TIM_OC1_SetConfig+0xc8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d10c      	bne.n	8003be6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f023 0308 	bic.w	r3, r3, #8
 8003bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f023 0304 	bic.w	r3, r3, #4
 8003be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a13      	ldr	r2, [pc, #76]	; (8003c38 <TIM_OC1_SetConfig+0xc8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d111      	bne.n	8003c12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	621a      	str	r2, [r3, #32]
}
 8003c2c:	bf00      	nop
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	40010000 	.word	0x40010000

08003c3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f023 0210 	bic.w	r2, r3, #16
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	021b      	lsls	r3, r3, #8
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f023 0320 	bic.w	r3, r3, #32
 8003c86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a1e      	ldr	r2, [pc, #120]	; (8003d10 <TIM_OC2_SetConfig+0xd4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d10d      	bne.n	8003cb8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a15      	ldr	r2, [pc, #84]	; (8003d10 <TIM_OC2_SetConfig+0xd4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d113      	bne.n	8003ce8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	621a      	str	r2, [r3, #32]
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40010000 	.word	0x40010000

08003d14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0303 	bic.w	r3, r3, #3
 8003d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	021b      	lsls	r3, r3, #8
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1d      	ldr	r2, [pc, #116]	; (8003de4 <TIM_OC3_SetConfig+0xd0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d10d      	bne.n	8003d8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	021b      	lsls	r3, r3, #8
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a14      	ldr	r2, [pc, #80]	; (8003de4 <TIM_OC3_SetConfig+0xd0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d113      	bne.n	8003dbe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	621a      	str	r2, [r3, #32]
}
 8003dd8:	bf00      	nop
 8003dda:	371c      	adds	r7, #28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	40010000 	.word	0x40010000

08003de8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	031b      	lsls	r3, r3, #12
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a10      	ldr	r2, [pc, #64]	; (8003e84 <TIM_OC4_SetConfig+0x9c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d109      	bne.n	8003e5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	019b      	lsls	r3, r3, #6
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	621a      	str	r2, [r3, #32]
}
 8003e76:	bf00      	nop
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40010000 	.word	0x40010000

08003e88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f023 0201 	bic.w	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f023 030a 	bic.w	r3, r3, #10
 8003ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	621a      	str	r2, [r3, #32]
}
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b087      	sub	sp, #28
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	f023 0210 	bic.w	r2, r3, #16
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	031b      	lsls	r3, r3, #12
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	621a      	str	r2, [r3, #32]
}
 8003f3a:	bf00      	nop
 8003f3c:	371c      	adds	r7, #28
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b085      	sub	sp, #20
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f043 0307 	orr.w	r3, r3, #7
 8003f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	609a      	str	r2, [r3, #8]
}
 8003f70:	bf00      	nop
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	021a      	lsls	r2, r3, #8
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	609a      	str	r2, [r3, #8]
}
 8003fb0:	bf00      	nop
 8003fb2:	371c      	adds	r7, #28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f003 031f 	and.w	r3, r3, #31
 8003fce:	2201      	movs	r2, #1
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a1a      	ldr	r2, [r3, #32]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	401a      	ands	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a1a      	ldr	r2, [r3, #32]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	621a      	str	r2, [r3, #32]
}
 8003ffa:	bf00      	nop
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800401c:	2302      	movs	r3, #2
 800401e:	e050      	b.n	80040c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004046:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1c      	ldr	r2, [pc, #112]	; (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d018      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406c:	d013      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a18      	ldr	r2, [pc, #96]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00e      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a16      	ldr	r2, [pc, #88]	; (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d009      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a15      	ldr	r2, [pc, #84]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d004      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d10c      	bne.n	80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800409c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40010000 	.word	0x40010000
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40000800 	.word	0x40000800
 80040dc:	40000c00 	.word	0x40000c00
 80040e0:	40014000 	.word	0x40014000

080040e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e03d      	b.n	800417c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4313      	orrs	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e03f      	b.n	8004242 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fd fe0e 	bl	8001df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2224      	movs	r2, #36	; 0x24
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f829 	bl	800424c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004208:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695a      	ldr	r2, [r3, #20]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004218:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004228:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800424c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004250:	b0c0      	sub	sp, #256	; 0x100
 8004252:	af00      	add	r7, sp, #0
 8004254:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004268:	68d9      	ldr	r1, [r3, #12]
 800426a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	ea40 0301 	orr.w	r3, r0, r1
 8004274:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	431a      	orrs	r2, r3
 8004284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	431a      	orrs	r2, r3
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042a4:	f021 010c 	bic.w	r1, r1, #12
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042b2:	430b      	orrs	r3, r1
 80042b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c6:	6999      	ldr	r1, [r3, #24]
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	ea40 0301 	orr.w	r3, r0, r1
 80042d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4b8f      	ldr	r3, [pc, #572]	; (8004518 <UART_SetConfig+0x2cc>)
 80042dc:	429a      	cmp	r2, r3
 80042de:	d005      	beq.n	80042ec <UART_SetConfig+0xa0>
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	4b8d      	ldr	r3, [pc, #564]	; (800451c <UART_SetConfig+0x2d0>)
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d104      	bne.n	80042f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042ec:	f7fe fe02 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 80042f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042f4:	e003      	b.n	80042fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042f6:	f7fe fde9 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 80042fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004308:	f040 810c 	bne.w	8004524 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800430c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004310:	2200      	movs	r2, #0
 8004312:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004316:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800431a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800431e:	4622      	mov	r2, r4
 8004320:	462b      	mov	r3, r5
 8004322:	1891      	adds	r1, r2, r2
 8004324:	65b9      	str	r1, [r7, #88]	; 0x58
 8004326:	415b      	adcs	r3, r3
 8004328:	65fb      	str	r3, [r7, #92]	; 0x5c
 800432a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800432e:	4621      	mov	r1, r4
 8004330:	eb12 0801 	adds.w	r8, r2, r1
 8004334:	4629      	mov	r1, r5
 8004336:	eb43 0901 	adc.w	r9, r3, r1
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800434a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800434e:	4690      	mov	r8, r2
 8004350:	4699      	mov	r9, r3
 8004352:	4623      	mov	r3, r4
 8004354:	eb18 0303 	adds.w	r3, r8, r3
 8004358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800435c:	462b      	mov	r3, r5
 800435e:	eb49 0303 	adc.w	r3, r9, r3
 8004362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004372:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004376:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800437a:	460b      	mov	r3, r1
 800437c:	18db      	adds	r3, r3, r3
 800437e:	653b      	str	r3, [r7, #80]	; 0x50
 8004380:	4613      	mov	r3, r2
 8004382:	eb42 0303 	adc.w	r3, r2, r3
 8004386:	657b      	str	r3, [r7, #84]	; 0x54
 8004388:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800438c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004390:	f7fc fbde 	bl	8000b50 <__aeabi_uldivmod>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4b61      	ldr	r3, [pc, #388]	; (8004520 <UART_SetConfig+0x2d4>)
 800439a:	fba3 2302 	umull	r2, r3, r3, r2
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	011c      	lsls	r4, r3, #4
 80043a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043b4:	4642      	mov	r2, r8
 80043b6:	464b      	mov	r3, r9
 80043b8:	1891      	adds	r1, r2, r2
 80043ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80043bc:	415b      	adcs	r3, r3
 80043be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043c4:	4641      	mov	r1, r8
 80043c6:	eb12 0a01 	adds.w	sl, r2, r1
 80043ca:	4649      	mov	r1, r9
 80043cc:	eb43 0b01 	adc.w	fp, r3, r1
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043e4:	4692      	mov	sl, r2
 80043e6:	469b      	mov	fp, r3
 80043e8:	4643      	mov	r3, r8
 80043ea:	eb1a 0303 	adds.w	r3, sl, r3
 80043ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043f2:	464b      	mov	r3, r9
 80043f4:	eb4b 0303 	adc.w	r3, fp, r3
 80043f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004408:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800440c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004410:	460b      	mov	r3, r1
 8004412:	18db      	adds	r3, r3, r3
 8004414:	643b      	str	r3, [r7, #64]	; 0x40
 8004416:	4613      	mov	r3, r2
 8004418:	eb42 0303 	adc.w	r3, r2, r3
 800441c:	647b      	str	r3, [r7, #68]	; 0x44
 800441e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004422:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004426:	f7fc fb93 	bl	8000b50 <__aeabi_uldivmod>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4611      	mov	r1, r2
 8004430:	4b3b      	ldr	r3, [pc, #236]	; (8004520 <UART_SetConfig+0x2d4>)
 8004432:	fba3 2301 	umull	r2, r3, r3, r1
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	2264      	movs	r2, #100	; 0x64
 800443a:	fb02 f303 	mul.w	r3, r2, r3
 800443e:	1acb      	subs	r3, r1, r3
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004446:	4b36      	ldr	r3, [pc, #216]	; (8004520 <UART_SetConfig+0x2d4>)
 8004448:	fba3 2302 	umull	r2, r3, r3, r2
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004454:	441c      	add	r4, r3
 8004456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800445a:	2200      	movs	r2, #0
 800445c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004460:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004464:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004468:	4642      	mov	r2, r8
 800446a:	464b      	mov	r3, r9
 800446c:	1891      	adds	r1, r2, r2
 800446e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004470:	415b      	adcs	r3, r3
 8004472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004478:	4641      	mov	r1, r8
 800447a:	1851      	adds	r1, r2, r1
 800447c:	6339      	str	r1, [r7, #48]	; 0x30
 800447e:	4649      	mov	r1, r9
 8004480:	414b      	adcs	r3, r1
 8004482:	637b      	str	r3, [r7, #52]	; 0x34
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004490:	4659      	mov	r1, fp
 8004492:	00cb      	lsls	r3, r1, #3
 8004494:	4651      	mov	r1, sl
 8004496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800449a:	4651      	mov	r1, sl
 800449c:	00ca      	lsls	r2, r1, #3
 800449e:	4610      	mov	r0, r2
 80044a0:	4619      	mov	r1, r3
 80044a2:	4603      	mov	r3, r0
 80044a4:	4642      	mov	r2, r8
 80044a6:	189b      	adds	r3, r3, r2
 80044a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044ac:	464b      	mov	r3, r9
 80044ae:	460a      	mov	r2, r1
 80044b0:	eb42 0303 	adc.w	r3, r2, r3
 80044b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044cc:	460b      	mov	r3, r1
 80044ce:	18db      	adds	r3, r3, r3
 80044d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044d2:	4613      	mov	r3, r2
 80044d4:	eb42 0303 	adc.w	r3, r2, r3
 80044d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044e2:	f7fc fb35 	bl	8000b50 <__aeabi_uldivmod>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <UART_SetConfig+0x2d4>)
 80044ec:	fba3 1302 	umull	r1, r3, r3, r2
 80044f0:	095b      	lsrs	r3, r3, #5
 80044f2:	2164      	movs	r1, #100	; 0x64
 80044f4:	fb01 f303 	mul.w	r3, r1, r3
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	3332      	adds	r3, #50	; 0x32
 80044fe:	4a08      	ldr	r2, [pc, #32]	; (8004520 <UART_SetConfig+0x2d4>)
 8004500:	fba2 2303 	umull	r2, r3, r2, r3
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	f003 0207 	and.w	r2, r3, #7
 800450a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4422      	add	r2, r4
 8004512:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004514:	e105      	b.n	8004722 <UART_SetConfig+0x4d6>
 8004516:	bf00      	nop
 8004518:	40011000 	.word	0x40011000
 800451c:	40011400 	.word	0x40011400
 8004520:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004528:	2200      	movs	r2, #0
 800452a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800452e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004532:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004536:	4642      	mov	r2, r8
 8004538:	464b      	mov	r3, r9
 800453a:	1891      	adds	r1, r2, r2
 800453c:	6239      	str	r1, [r7, #32]
 800453e:	415b      	adcs	r3, r3
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
 8004542:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004546:	4641      	mov	r1, r8
 8004548:	1854      	adds	r4, r2, r1
 800454a:	4649      	mov	r1, r9
 800454c:	eb43 0501 	adc.w	r5, r3, r1
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	00eb      	lsls	r3, r5, #3
 800455a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800455e:	00e2      	lsls	r2, r4, #3
 8004560:	4614      	mov	r4, r2
 8004562:	461d      	mov	r5, r3
 8004564:	4643      	mov	r3, r8
 8004566:	18e3      	adds	r3, r4, r3
 8004568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800456c:	464b      	mov	r3, r9
 800456e:	eb45 0303 	adc.w	r3, r5, r3
 8004572:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004582:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004592:	4629      	mov	r1, r5
 8004594:	008b      	lsls	r3, r1, #2
 8004596:	4621      	mov	r1, r4
 8004598:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800459c:	4621      	mov	r1, r4
 800459e:	008a      	lsls	r2, r1, #2
 80045a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045a4:	f7fc fad4 	bl	8000b50 <__aeabi_uldivmod>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4b60      	ldr	r3, [pc, #384]	; (8004730 <UART_SetConfig+0x4e4>)
 80045ae:	fba3 2302 	umull	r2, r3, r3, r2
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	011c      	lsls	r4, r3, #4
 80045b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045c8:	4642      	mov	r2, r8
 80045ca:	464b      	mov	r3, r9
 80045cc:	1891      	adds	r1, r2, r2
 80045ce:	61b9      	str	r1, [r7, #24]
 80045d0:	415b      	adcs	r3, r3
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045d8:	4641      	mov	r1, r8
 80045da:	1851      	adds	r1, r2, r1
 80045dc:	6139      	str	r1, [r7, #16]
 80045de:	4649      	mov	r1, r9
 80045e0:	414b      	adcs	r3, r1
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045f0:	4659      	mov	r1, fp
 80045f2:	00cb      	lsls	r3, r1, #3
 80045f4:	4651      	mov	r1, sl
 80045f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045fa:	4651      	mov	r1, sl
 80045fc:	00ca      	lsls	r2, r1, #3
 80045fe:	4610      	mov	r0, r2
 8004600:	4619      	mov	r1, r3
 8004602:	4603      	mov	r3, r0
 8004604:	4642      	mov	r2, r8
 8004606:	189b      	adds	r3, r3, r2
 8004608:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800460c:	464b      	mov	r3, r9
 800460e:	460a      	mov	r2, r1
 8004610:	eb42 0303 	adc.w	r3, r2, r3
 8004614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	67bb      	str	r3, [r7, #120]	; 0x78
 8004622:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004630:	4649      	mov	r1, r9
 8004632:	008b      	lsls	r3, r1, #2
 8004634:	4641      	mov	r1, r8
 8004636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800463a:	4641      	mov	r1, r8
 800463c:	008a      	lsls	r2, r1, #2
 800463e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004642:	f7fc fa85 	bl	8000b50 <__aeabi_uldivmod>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	4b39      	ldr	r3, [pc, #228]	; (8004730 <UART_SetConfig+0x4e4>)
 800464c:	fba3 1302 	umull	r1, r3, r3, r2
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	2164      	movs	r1, #100	; 0x64
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	3332      	adds	r3, #50	; 0x32
 800465e:	4a34      	ldr	r2, [pc, #208]	; (8004730 <UART_SetConfig+0x4e4>)
 8004660:	fba2 2303 	umull	r2, r3, r2, r3
 8004664:	095b      	lsrs	r3, r3, #5
 8004666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800466a:	441c      	add	r4, r3
 800466c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004670:	2200      	movs	r2, #0
 8004672:	673b      	str	r3, [r7, #112]	; 0x70
 8004674:	677a      	str	r2, [r7, #116]	; 0x74
 8004676:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800467a:	4642      	mov	r2, r8
 800467c:	464b      	mov	r3, r9
 800467e:	1891      	adds	r1, r2, r2
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	415b      	adcs	r3, r3
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800468a:	4641      	mov	r1, r8
 800468c:	1851      	adds	r1, r2, r1
 800468e:	6039      	str	r1, [r7, #0]
 8004690:	4649      	mov	r1, r9
 8004692:	414b      	adcs	r3, r1
 8004694:	607b      	str	r3, [r7, #4]
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046a2:	4659      	mov	r1, fp
 80046a4:	00cb      	lsls	r3, r1, #3
 80046a6:	4651      	mov	r1, sl
 80046a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ac:	4651      	mov	r1, sl
 80046ae:	00ca      	lsls	r2, r1, #3
 80046b0:	4610      	mov	r0, r2
 80046b2:	4619      	mov	r1, r3
 80046b4:	4603      	mov	r3, r0
 80046b6:	4642      	mov	r2, r8
 80046b8:	189b      	adds	r3, r3, r2
 80046ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80046bc:	464b      	mov	r3, r9
 80046be:	460a      	mov	r2, r1
 80046c0:	eb42 0303 	adc.w	r3, r2, r3
 80046c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	663b      	str	r3, [r7, #96]	; 0x60
 80046d0:	667a      	str	r2, [r7, #100]	; 0x64
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046de:	4649      	mov	r1, r9
 80046e0:	008b      	lsls	r3, r1, #2
 80046e2:	4641      	mov	r1, r8
 80046e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046e8:	4641      	mov	r1, r8
 80046ea:	008a      	lsls	r2, r1, #2
 80046ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046f0:	f7fc fa2e 	bl	8000b50 <__aeabi_uldivmod>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	4b0d      	ldr	r3, [pc, #52]	; (8004730 <UART_SetConfig+0x4e4>)
 80046fa:	fba3 1302 	umull	r1, r3, r3, r2
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	2164      	movs	r1, #100	; 0x64
 8004702:	fb01 f303 	mul.w	r3, r1, r3
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	3332      	adds	r3, #50	; 0x32
 800470c:	4a08      	ldr	r2, [pc, #32]	; (8004730 <UART_SetConfig+0x4e4>)
 800470e:	fba2 2303 	umull	r2, r3, r2, r3
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	f003 020f 	and.w	r2, r3, #15
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4422      	add	r2, r4
 8004720:	609a      	str	r2, [r3, #8]
}
 8004722:	bf00      	nop
 8004724:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004728:	46bd      	mov	sp, r7
 800472a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800472e:	bf00      	nop
 8004730:	51eb851f 	.word	0x51eb851f

08004734 <__errno>:
 8004734:	4b01      	ldr	r3, [pc, #4]	; (800473c <__errno+0x8>)
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	2000003c 	.word	0x2000003c

08004740 <__libc_init_array>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	4d0d      	ldr	r5, [pc, #52]	; (8004778 <__libc_init_array+0x38>)
 8004744:	4c0d      	ldr	r4, [pc, #52]	; (800477c <__libc_init_array+0x3c>)
 8004746:	1b64      	subs	r4, r4, r5
 8004748:	10a4      	asrs	r4, r4, #2
 800474a:	2600      	movs	r6, #0
 800474c:	42a6      	cmp	r6, r4
 800474e:	d109      	bne.n	8004764 <__libc_init_array+0x24>
 8004750:	4d0b      	ldr	r5, [pc, #44]	; (8004780 <__libc_init_array+0x40>)
 8004752:	4c0c      	ldr	r4, [pc, #48]	; (8004784 <__libc_init_array+0x44>)
 8004754:	f000 ff3a 	bl	80055cc <_init>
 8004758:	1b64      	subs	r4, r4, r5
 800475a:	10a4      	asrs	r4, r4, #2
 800475c:	2600      	movs	r6, #0
 800475e:	42a6      	cmp	r6, r4
 8004760:	d105      	bne.n	800476e <__libc_init_array+0x2e>
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	f855 3b04 	ldr.w	r3, [r5], #4
 8004768:	4798      	blx	r3
 800476a:	3601      	adds	r6, #1
 800476c:	e7ee      	b.n	800474c <__libc_init_array+0xc>
 800476e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004772:	4798      	blx	r3
 8004774:	3601      	adds	r6, #1
 8004776:	e7f2      	b.n	800475e <__libc_init_array+0x1e>
 8004778:	08005638 	.word	0x08005638
 800477c:	08005638 	.word	0x08005638
 8004780:	08005638 	.word	0x08005638
 8004784:	0800563c 	.word	0x0800563c

08004788 <memset>:
 8004788:	4402      	add	r2, r0
 800478a:	4603      	mov	r3, r0
 800478c:	4293      	cmp	r3, r2
 800478e:	d100      	bne.n	8004792 <memset+0xa>
 8004790:	4770      	bx	lr
 8004792:	f803 1b01 	strb.w	r1, [r3], #1
 8004796:	e7f9      	b.n	800478c <memset+0x4>

08004798 <pow>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	ed2d 8b02 	vpush	{d8}
 800479e:	eeb0 8a40 	vmov.f32	s16, s0
 80047a2:	eef0 8a60 	vmov.f32	s17, s1
 80047a6:	ec55 4b11 	vmov	r4, r5, d1
 80047aa:	f000 f865 	bl	8004878 <__ieee754_pow>
 80047ae:	4622      	mov	r2, r4
 80047b0:	462b      	mov	r3, r5
 80047b2:	4620      	mov	r0, r4
 80047b4:	4629      	mov	r1, r5
 80047b6:	ec57 6b10 	vmov	r6, r7, d0
 80047ba:	f7fc f963 	bl	8000a84 <__aeabi_dcmpun>
 80047be:	2800      	cmp	r0, #0
 80047c0:	d13b      	bne.n	800483a <pow+0xa2>
 80047c2:	ec51 0b18 	vmov	r0, r1, d8
 80047c6:	2200      	movs	r2, #0
 80047c8:	2300      	movs	r3, #0
 80047ca:	f7fc f929 	bl	8000a20 <__aeabi_dcmpeq>
 80047ce:	b1b8      	cbz	r0, 8004800 <pow+0x68>
 80047d0:	2200      	movs	r2, #0
 80047d2:	2300      	movs	r3, #0
 80047d4:	4620      	mov	r0, r4
 80047d6:	4629      	mov	r1, r5
 80047d8:	f7fc f922 	bl	8000a20 <__aeabi_dcmpeq>
 80047dc:	2800      	cmp	r0, #0
 80047de:	d146      	bne.n	800486e <pow+0xd6>
 80047e0:	ec45 4b10 	vmov	d0, r4, r5
 80047e4:	f000 fe61 	bl	80054aa <finite>
 80047e8:	b338      	cbz	r0, 800483a <pow+0xa2>
 80047ea:	2200      	movs	r2, #0
 80047ec:	2300      	movs	r3, #0
 80047ee:	4620      	mov	r0, r4
 80047f0:	4629      	mov	r1, r5
 80047f2:	f7fc f91f 	bl	8000a34 <__aeabi_dcmplt>
 80047f6:	b300      	cbz	r0, 800483a <pow+0xa2>
 80047f8:	f7ff ff9c 	bl	8004734 <__errno>
 80047fc:	2322      	movs	r3, #34	; 0x22
 80047fe:	e01b      	b.n	8004838 <pow+0xa0>
 8004800:	ec47 6b10 	vmov	d0, r6, r7
 8004804:	f000 fe51 	bl	80054aa <finite>
 8004808:	b9e0      	cbnz	r0, 8004844 <pow+0xac>
 800480a:	eeb0 0a48 	vmov.f32	s0, s16
 800480e:	eef0 0a68 	vmov.f32	s1, s17
 8004812:	f000 fe4a 	bl	80054aa <finite>
 8004816:	b1a8      	cbz	r0, 8004844 <pow+0xac>
 8004818:	ec45 4b10 	vmov	d0, r4, r5
 800481c:	f000 fe45 	bl	80054aa <finite>
 8004820:	b180      	cbz	r0, 8004844 <pow+0xac>
 8004822:	4632      	mov	r2, r6
 8004824:	463b      	mov	r3, r7
 8004826:	4630      	mov	r0, r6
 8004828:	4639      	mov	r1, r7
 800482a:	f7fc f92b 	bl	8000a84 <__aeabi_dcmpun>
 800482e:	2800      	cmp	r0, #0
 8004830:	d0e2      	beq.n	80047f8 <pow+0x60>
 8004832:	f7ff ff7f 	bl	8004734 <__errno>
 8004836:	2321      	movs	r3, #33	; 0x21
 8004838:	6003      	str	r3, [r0, #0]
 800483a:	ecbd 8b02 	vpop	{d8}
 800483e:	ec47 6b10 	vmov	d0, r6, r7
 8004842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004844:	2200      	movs	r2, #0
 8004846:	2300      	movs	r3, #0
 8004848:	4630      	mov	r0, r6
 800484a:	4639      	mov	r1, r7
 800484c:	f7fc f8e8 	bl	8000a20 <__aeabi_dcmpeq>
 8004850:	2800      	cmp	r0, #0
 8004852:	d0f2      	beq.n	800483a <pow+0xa2>
 8004854:	eeb0 0a48 	vmov.f32	s0, s16
 8004858:	eef0 0a68 	vmov.f32	s1, s17
 800485c:	f000 fe25 	bl	80054aa <finite>
 8004860:	2800      	cmp	r0, #0
 8004862:	d0ea      	beq.n	800483a <pow+0xa2>
 8004864:	ec45 4b10 	vmov	d0, r4, r5
 8004868:	f000 fe1f 	bl	80054aa <finite>
 800486c:	e7c3      	b.n	80047f6 <pow+0x5e>
 800486e:	4f01      	ldr	r7, [pc, #4]	; (8004874 <pow+0xdc>)
 8004870:	2600      	movs	r6, #0
 8004872:	e7e2      	b.n	800483a <pow+0xa2>
 8004874:	3ff00000 	.word	0x3ff00000

08004878 <__ieee754_pow>:
 8004878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487c:	ed2d 8b06 	vpush	{d8-d10}
 8004880:	b089      	sub	sp, #36	; 0x24
 8004882:	ed8d 1b00 	vstr	d1, [sp]
 8004886:	e9dd 2900 	ldrd	r2, r9, [sp]
 800488a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800488e:	ea58 0102 	orrs.w	r1, r8, r2
 8004892:	ec57 6b10 	vmov	r6, r7, d0
 8004896:	d115      	bne.n	80048c4 <__ieee754_pow+0x4c>
 8004898:	19b3      	adds	r3, r6, r6
 800489a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800489e:	4152      	adcs	r2, r2
 80048a0:	4299      	cmp	r1, r3
 80048a2:	4b89      	ldr	r3, [pc, #548]	; (8004ac8 <__ieee754_pow+0x250>)
 80048a4:	4193      	sbcs	r3, r2
 80048a6:	f080 84d2 	bcs.w	800524e <__ieee754_pow+0x9d6>
 80048aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048ae:	4630      	mov	r0, r6
 80048b0:	4639      	mov	r1, r7
 80048b2:	f7fb fc97 	bl	80001e4 <__adddf3>
 80048b6:	ec41 0b10 	vmov	d0, r0, r1
 80048ba:	b009      	add	sp, #36	; 0x24
 80048bc:	ecbd 8b06 	vpop	{d8-d10}
 80048c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c4:	4b81      	ldr	r3, [pc, #516]	; (8004acc <__ieee754_pow+0x254>)
 80048c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80048ca:	429c      	cmp	r4, r3
 80048cc:	ee10 aa10 	vmov	sl, s0
 80048d0:	463d      	mov	r5, r7
 80048d2:	dc06      	bgt.n	80048e2 <__ieee754_pow+0x6a>
 80048d4:	d101      	bne.n	80048da <__ieee754_pow+0x62>
 80048d6:	2e00      	cmp	r6, #0
 80048d8:	d1e7      	bne.n	80048aa <__ieee754_pow+0x32>
 80048da:	4598      	cmp	r8, r3
 80048dc:	dc01      	bgt.n	80048e2 <__ieee754_pow+0x6a>
 80048de:	d10f      	bne.n	8004900 <__ieee754_pow+0x88>
 80048e0:	b172      	cbz	r2, 8004900 <__ieee754_pow+0x88>
 80048e2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80048e6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80048ea:	ea55 050a 	orrs.w	r5, r5, sl
 80048ee:	d1dc      	bne.n	80048aa <__ieee754_pow+0x32>
 80048f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80048f4:	18db      	adds	r3, r3, r3
 80048f6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80048fa:	4152      	adcs	r2, r2
 80048fc:	429d      	cmp	r5, r3
 80048fe:	e7d0      	b.n	80048a2 <__ieee754_pow+0x2a>
 8004900:	2d00      	cmp	r5, #0
 8004902:	da3b      	bge.n	800497c <__ieee754_pow+0x104>
 8004904:	4b72      	ldr	r3, [pc, #456]	; (8004ad0 <__ieee754_pow+0x258>)
 8004906:	4598      	cmp	r8, r3
 8004908:	dc51      	bgt.n	80049ae <__ieee754_pow+0x136>
 800490a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800490e:	4598      	cmp	r8, r3
 8004910:	f340 84ac 	ble.w	800526c <__ieee754_pow+0x9f4>
 8004914:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004918:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800491c:	2b14      	cmp	r3, #20
 800491e:	dd0f      	ble.n	8004940 <__ieee754_pow+0xc8>
 8004920:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004924:	fa22 f103 	lsr.w	r1, r2, r3
 8004928:	fa01 f303 	lsl.w	r3, r1, r3
 800492c:	4293      	cmp	r3, r2
 800492e:	f040 849d 	bne.w	800526c <__ieee754_pow+0x9f4>
 8004932:	f001 0101 	and.w	r1, r1, #1
 8004936:	f1c1 0302 	rsb	r3, r1, #2
 800493a:	9304      	str	r3, [sp, #16]
 800493c:	b182      	cbz	r2, 8004960 <__ieee754_pow+0xe8>
 800493e:	e05f      	b.n	8004a00 <__ieee754_pow+0x188>
 8004940:	2a00      	cmp	r2, #0
 8004942:	d15b      	bne.n	80049fc <__ieee754_pow+0x184>
 8004944:	f1c3 0314 	rsb	r3, r3, #20
 8004948:	fa48 f103 	asr.w	r1, r8, r3
 800494c:	fa01 f303 	lsl.w	r3, r1, r3
 8004950:	4543      	cmp	r3, r8
 8004952:	f040 8488 	bne.w	8005266 <__ieee754_pow+0x9ee>
 8004956:	f001 0101 	and.w	r1, r1, #1
 800495a:	f1c1 0302 	rsb	r3, r1, #2
 800495e:	9304      	str	r3, [sp, #16]
 8004960:	4b5c      	ldr	r3, [pc, #368]	; (8004ad4 <__ieee754_pow+0x25c>)
 8004962:	4598      	cmp	r8, r3
 8004964:	d132      	bne.n	80049cc <__ieee754_pow+0x154>
 8004966:	f1b9 0f00 	cmp.w	r9, #0
 800496a:	f280 8478 	bge.w	800525e <__ieee754_pow+0x9e6>
 800496e:	4959      	ldr	r1, [pc, #356]	; (8004ad4 <__ieee754_pow+0x25c>)
 8004970:	4632      	mov	r2, r6
 8004972:	463b      	mov	r3, r7
 8004974:	2000      	movs	r0, #0
 8004976:	f7fb ff15 	bl	80007a4 <__aeabi_ddiv>
 800497a:	e79c      	b.n	80048b6 <__ieee754_pow+0x3e>
 800497c:	2300      	movs	r3, #0
 800497e:	9304      	str	r3, [sp, #16]
 8004980:	2a00      	cmp	r2, #0
 8004982:	d13d      	bne.n	8004a00 <__ieee754_pow+0x188>
 8004984:	4b51      	ldr	r3, [pc, #324]	; (8004acc <__ieee754_pow+0x254>)
 8004986:	4598      	cmp	r8, r3
 8004988:	d1ea      	bne.n	8004960 <__ieee754_pow+0xe8>
 800498a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800498e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004992:	ea53 030a 	orrs.w	r3, r3, sl
 8004996:	f000 845a 	beq.w	800524e <__ieee754_pow+0x9d6>
 800499a:	4b4f      	ldr	r3, [pc, #316]	; (8004ad8 <__ieee754_pow+0x260>)
 800499c:	429c      	cmp	r4, r3
 800499e:	dd08      	ble.n	80049b2 <__ieee754_pow+0x13a>
 80049a0:	f1b9 0f00 	cmp.w	r9, #0
 80049a4:	f2c0 8457 	blt.w	8005256 <__ieee754_pow+0x9de>
 80049a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049ac:	e783      	b.n	80048b6 <__ieee754_pow+0x3e>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e7e5      	b.n	800497e <__ieee754_pow+0x106>
 80049b2:	f1b9 0f00 	cmp.w	r9, #0
 80049b6:	f04f 0000 	mov.w	r0, #0
 80049ba:	f04f 0100 	mov.w	r1, #0
 80049be:	f6bf af7a 	bge.w	80048b6 <__ieee754_pow+0x3e>
 80049c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80049c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80049ca:	e774      	b.n	80048b6 <__ieee754_pow+0x3e>
 80049cc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80049d0:	d106      	bne.n	80049e0 <__ieee754_pow+0x168>
 80049d2:	4632      	mov	r2, r6
 80049d4:	463b      	mov	r3, r7
 80049d6:	4630      	mov	r0, r6
 80049d8:	4639      	mov	r1, r7
 80049da:	f7fb fdb9 	bl	8000550 <__aeabi_dmul>
 80049de:	e76a      	b.n	80048b6 <__ieee754_pow+0x3e>
 80049e0:	4b3e      	ldr	r3, [pc, #248]	; (8004adc <__ieee754_pow+0x264>)
 80049e2:	4599      	cmp	r9, r3
 80049e4:	d10c      	bne.n	8004a00 <__ieee754_pow+0x188>
 80049e6:	2d00      	cmp	r5, #0
 80049e8:	db0a      	blt.n	8004a00 <__ieee754_pow+0x188>
 80049ea:	ec47 6b10 	vmov	d0, r6, r7
 80049ee:	b009      	add	sp, #36	; 0x24
 80049f0:	ecbd 8b06 	vpop	{d8-d10}
 80049f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f8:	f000 bc6c 	b.w	80052d4 <__ieee754_sqrt>
 80049fc:	2300      	movs	r3, #0
 80049fe:	9304      	str	r3, [sp, #16]
 8004a00:	ec47 6b10 	vmov	d0, r6, r7
 8004a04:	f000 fd48 	bl	8005498 <fabs>
 8004a08:	ec51 0b10 	vmov	r0, r1, d0
 8004a0c:	f1ba 0f00 	cmp.w	sl, #0
 8004a10:	d129      	bne.n	8004a66 <__ieee754_pow+0x1ee>
 8004a12:	b124      	cbz	r4, 8004a1e <__ieee754_pow+0x1a6>
 8004a14:	4b2f      	ldr	r3, [pc, #188]	; (8004ad4 <__ieee754_pow+0x25c>)
 8004a16:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d123      	bne.n	8004a66 <__ieee754_pow+0x1ee>
 8004a1e:	f1b9 0f00 	cmp.w	r9, #0
 8004a22:	da05      	bge.n	8004a30 <__ieee754_pow+0x1b8>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	2000      	movs	r0, #0
 8004a2a:	492a      	ldr	r1, [pc, #168]	; (8004ad4 <__ieee754_pow+0x25c>)
 8004a2c:	f7fb feba 	bl	80007a4 <__aeabi_ddiv>
 8004a30:	2d00      	cmp	r5, #0
 8004a32:	f6bf af40 	bge.w	80048b6 <__ieee754_pow+0x3e>
 8004a36:	9b04      	ldr	r3, [sp, #16]
 8004a38:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004a3c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004a40:	4323      	orrs	r3, r4
 8004a42:	d108      	bne.n	8004a56 <__ieee754_pow+0x1de>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4610      	mov	r0, r2
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	f7fb fbc8 	bl	80001e0 <__aeabi_dsub>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	e78f      	b.n	8004976 <__ieee754_pow+0xfe>
 8004a56:	9b04      	ldr	r3, [sp, #16]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	f47f af2c 	bne.w	80048b6 <__ieee754_pow+0x3e>
 8004a5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a62:	4619      	mov	r1, r3
 8004a64:	e727      	b.n	80048b6 <__ieee754_pow+0x3e>
 8004a66:	0feb      	lsrs	r3, r5, #31
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	9306      	str	r3, [sp, #24]
 8004a6c:	9a06      	ldr	r2, [sp, #24]
 8004a6e:	9b04      	ldr	r3, [sp, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	d102      	bne.n	8004a7a <__ieee754_pow+0x202>
 8004a74:	4632      	mov	r2, r6
 8004a76:	463b      	mov	r3, r7
 8004a78:	e7e6      	b.n	8004a48 <__ieee754_pow+0x1d0>
 8004a7a:	4b19      	ldr	r3, [pc, #100]	; (8004ae0 <__ieee754_pow+0x268>)
 8004a7c:	4598      	cmp	r8, r3
 8004a7e:	f340 80fb 	ble.w	8004c78 <__ieee754_pow+0x400>
 8004a82:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004a86:	4598      	cmp	r8, r3
 8004a88:	4b13      	ldr	r3, [pc, #76]	; (8004ad8 <__ieee754_pow+0x260>)
 8004a8a:	dd0c      	ble.n	8004aa6 <__ieee754_pow+0x22e>
 8004a8c:	429c      	cmp	r4, r3
 8004a8e:	dc0f      	bgt.n	8004ab0 <__ieee754_pow+0x238>
 8004a90:	f1b9 0f00 	cmp.w	r9, #0
 8004a94:	da0f      	bge.n	8004ab6 <__ieee754_pow+0x23e>
 8004a96:	2000      	movs	r0, #0
 8004a98:	b009      	add	sp, #36	; 0x24
 8004a9a:	ecbd 8b06 	vpop	{d8-d10}
 8004a9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa2:	f000 bcf0 	b.w	8005486 <__math_oflow>
 8004aa6:	429c      	cmp	r4, r3
 8004aa8:	dbf2      	blt.n	8004a90 <__ieee754_pow+0x218>
 8004aaa:	4b0a      	ldr	r3, [pc, #40]	; (8004ad4 <__ieee754_pow+0x25c>)
 8004aac:	429c      	cmp	r4, r3
 8004aae:	dd19      	ble.n	8004ae4 <__ieee754_pow+0x26c>
 8004ab0:	f1b9 0f00 	cmp.w	r9, #0
 8004ab4:	dcef      	bgt.n	8004a96 <__ieee754_pow+0x21e>
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	b009      	add	sp, #36	; 0x24
 8004aba:	ecbd 8b06 	vpop	{d8-d10}
 8004abe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac2:	f000 bcd7 	b.w	8005474 <__math_uflow>
 8004ac6:	bf00      	nop
 8004ac8:	fff00000 	.word	0xfff00000
 8004acc:	7ff00000 	.word	0x7ff00000
 8004ad0:	433fffff 	.word	0x433fffff
 8004ad4:	3ff00000 	.word	0x3ff00000
 8004ad8:	3fefffff 	.word	0x3fefffff
 8004adc:	3fe00000 	.word	0x3fe00000
 8004ae0:	41e00000 	.word	0x41e00000
 8004ae4:	4b60      	ldr	r3, [pc, #384]	; (8004c68 <__ieee754_pow+0x3f0>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f7fb fb7a 	bl	80001e0 <__aeabi_dsub>
 8004aec:	a354      	add	r3, pc, #336	; (adr r3, 8004c40 <__ieee754_pow+0x3c8>)
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	4604      	mov	r4, r0
 8004af4:	460d      	mov	r5, r1
 8004af6:	f7fb fd2b 	bl	8000550 <__aeabi_dmul>
 8004afa:	a353      	add	r3, pc, #332	; (adr r3, 8004c48 <__ieee754_pow+0x3d0>)
 8004afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b00:	4606      	mov	r6, r0
 8004b02:	460f      	mov	r7, r1
 8004b04:	4620      	mov	r0, r4
 8004b06:	4629      	mov	r1, r5
 8004b08:	f7fb fd22 	bl	8000550 <__aeabi_dmul>
 8004b0c:	4b57      	ldr	r3, [pc, #348]	; (8004c6c <__ieee754_pow+0x3f4>)
 8004b0e:	4682      	mov	sl, r0
 8004b10:	468b      	mov	fp, r1
 8004b12:	2200      	movs	r2, #0
 8004b14:	4620      	mov	r0, r4
 8004b16:	4629      	mov	r1, r5
 8004b18:	f7fb fd1a 	bl	8000550 <__aeabi_dmul>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	a14b      	add	r1, pc, #300	; (adr r1, 8004c50 <__ieee754_pow+0x3d8>)
 8004b22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b26:	f7fb fb5b 	bl	80001e0 <__aeabi_dsub>
 8004b2a:	4622      	mov	r2, r4
 8004b2c:	462b      	mov	r3, r5
 8004b2e:	f7fb fd0f 	bl	8000550 <__aeabi_dmul>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	2000      	movs	r0, #0
 8004b38:	494d      	ldr	r1, [pc, #308]	; (8004c70 <__ieee754_pow+0x3f8>)
 8004b3a:	f7fb fb51 	bl	80001e0 <__aeabi_dsub>
 8004b3e:	4622      	mov	r2, r4
 8004b40:	4680      	mov	r8, r0
 8004b42:	4689      	mov	r9, r1
 8004b44:	462b      	mov	r3, r5
 8004b46:	4620      	mov	r0, r4
 8004b48:	4629      	mov	r1, r5
 8004b4a:	f7fb fd01 	bl	8000550 <__aeabi_dmul>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4640      	mov	r0, r8
 8004b54:	4649      	mov	r1, r9
 8004b56:	f7fb fcfb 	bl	8000550 <__aeabi_dmul>
 8004b5a:	a33f      	add	r3, pc, #252	; (adr r3, 8004c58 <__ieee754_pow+0x3e0>)
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	f7fb fcf6 	bl	8000550 <__aeabi_dmul>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4650      	mov	r0, sl
 8004b6a:	4659      	mov	r1, fp
 8004b6c:	f7fb fb38 	bl	80001e0 <__aeabi_dsub>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4680      	mov	r8, r0
 8004b76:	4689      	mov	r9, r1
 8004b78:	4630      	mov	r0, r6
 8004b7a:	4639      	mov	r1, r7
 8004b7c:	f7fb fb32 	bl	80001e4 <__adddf3>
 8004b80:	2000      	movs	r0, #0
 8004b82:	4632      	mov	r2, r6
 8004b84:	463b      	mov	r3, r7
 8004b86:	4604      	mov	r4, r0
 8004b88:	460d      	mov	r5, r1
 8004b8a:	f7fb fb29 	bl	80001e0 <__aeabi_dsub>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4640      	mov	r0, r8
 8004b94:	4649      	mov	r1, r9
 8004b96:	f7fb fb23 	bl	80001e0 <__aeabi_dsub>
 8004b9a:	9b04      	ldr	r3, [sp, #16]
 8004b9c:	9a06      	ldr	r2, [sp, #24]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	4682      	mov	sl, r0
 8004ba4:	468b      	mov	fp, r1
 8004ba6:	f040 81e7 	bne.w	8004f78 <__ieee754_pow+0x700>
 8004baa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004c60 <__ieee754_pow+0x3e8>
 8004bae:	eeb0 8a47 	vmov.f32	s16, s14
 8004bb2:	eef0 8a67 	vmov.f32	s17, s15
 8004bb6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004bba:	2600      	movs	r6, #0
 8004bbc:	4632      	mov	r2, r6
 8004bbe:	463b      	mov	r3, r7
 8004bc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bc4:	f7fb fb0c 	bl	80001e0 <__aeabi_dsub>
 8004bc8:	4622      	mov	r2, r4
 8004bca:	462b      	mov	r3, r5
 8004bcc:	f7fb fcc0 	bl	8000550 <__aeabi_dmul>
 8004bd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bd4:	4680      	mov	r8, r0
 8004bd6:	4689      	mov	r9, r1
 8004bd8:	4650      	mov	r0, sl
 8004bda:	4659      	mov	r1, fp
 8004bdc:	f7fb fcb8 	bl	8000550 <__aeabi_dmul>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4640      	mov	r0, r8
 8004be6:	4649      	mov	r1, r9
 8004be8:	f7fb fafc 	bl	80001e4 <__adddf3>
 8004bec:	4632      	mov	r2, r6
 8004bee:	463b      	mov	r3, r7
 8004bf0:	4680      	mov	r8, r0
 8004bf2:	4689      	mov	r9, r1
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	f7fb fcaa 	bl	8000550 <__aeabi_dmul>
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4604      	mov	r4, r0
 8004c00:	460d      	mov	r5, r1
 8004c02:	4602      	mov	r2, r0
 8004c04:	4649      	mov	r1, r9
 8004c06:	4640      	mov	r0, r8
 8004c08:	f7fb faec 	bl	80001e4 <__adddf3>
 8004c0c:	4b19      	ldr	r3, [pc, #100]	; (8004c74 <__ieee754_pow+0x3fc>)
 8004c0e:	4299      	cmp	r1, r3
 8004c10:	ec45 4b19 	vmov	d9, r4, r5
 8004c14:	4606      	mov	r6, r0
 8004c16:	460f      	mov	r7, r1
 8004c18:	468b      	mov	fp, r1
 8004c1a:	f340 82f1 	ble.w	8005200 <__ieee754_pow+0x988>
 8004c1e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004c22:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004c26:	4303      	orrs	r3, r0
 8004c28:	f000 81e4 	beq.w	8004ff4 <__ieee754_pow+0x77c>
 8004c2c:	ec51 0b18 	vmov	r0, r1, d8
 8004c30:	2200      	movs	r2, #0
 8004c32:	2300      	movs	r3, #0
 8004c34:	f7fb fefe 	bl	8000a34 <__aeabi_dcmplt>
 8004c38:	3800      	subs	r0, #0
 8004c3a:	bf18      	it	ne
 8004c3c:	2001      	movne	r0, #1
 8004c3e:	e72b      	b.n	8004a98 <__ieee754_pow+0x220>
 8004c40:	60000000 	.word	0x60000000
 8004c44:	3ff71547 	.word	0x3ff71547
 8004c48:	f85ddf44 	.word	0xf85ddf44
 8004c4c:	3e54ae0b 	.word	0x3e54ae0b
 8004c50:	55555555 	.word	0x55555555
 8004c54:	3fd55555 	.word	0x3fd55555
 8004c58:	652b82fe 	.word	0x652b82fe
 8004c5c:	3ff71547 	.word	0x3ff71547
 8004c60:	00000000 	.word	0x00000000
 8004c64:	bff00000 	.word	0xbff00000
 8004c68:	3ff00000 	.word	0x3ff00000
 8004c6c:	3fd00000 	.word	0x3fd00000
 8004c70:	3fe00000 	.word	0x3fe00000
 8004c74:	408fffff 	.word	0x408fffff
 8004c78:	4bd5      	ldr	r3, [pc, #852]	; (8004fd0 <__ieee754_pow+0x758>)
 8004c7a:	402b      	ands	r3, r5
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	b92b      	cbnz	r3, 8004c8c <__ieee754_pow+0x414>
 8004c80:	4bd4      	ldr	r3, [pc, #848]	; (8004fd4 <__ieee754_pow+0x75c>)
 8004c82:	f7fb fc65 	bl	8000550 <__aeabi_dmul>
 8004c86:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	1523      	asrs	r3, r4, #20
 8004c8e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004c92:	4413      	add	r3, r2
 8004c94:	9305      	str	r3, [sp, #20]
 8004c96:	4bd0      	ldr	r3, [pc, #832]	; (8004fd8 <__ieee754_pow+0x760>)
 8004c98:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004c9c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004ca0:	429c      	cmp	r4, r3
 8004ca2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004ca6:	dd08      	ble.n	8004cba <__ieee754_pow+0x442>
 8004ca8:	4bcc      	ldr	r3, [pc, #816]	; (8004fdc <__ieee754_pow+0x764>)
 8004caa:	429c      	cmp	r4, r3
 8004cac:	f340 8162 	ble.w	8004f74 <__ieee754_pow+0x6fc>
 8004cb0:	9b05      	ldr	r3, [sp, #20]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	9305      	str	r3, [sp, #20]
 8004cb6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004cba:	2400      	movs	r4, #0
 8004cbc:	00e3      	lsls	r3, r4, #3
 8004cbe:	9307      	str	r3, [sp, #28]
 8004cc0:	4bc7      	ldr	r3, [pc, #796]	; (8004fe0 <__ieee754_pow+0x768>)
 8004cc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004cc6:	ed93 7b00 	vldr	d7, [r3]
 8004cca:	4629      	mov	r1, r5
 8004ccc:	ec53 2b17 	vmov	r2, r3, d7
 8004cd0:	eeb0 9a47 	vmov.f32	s18, s14
 8004cd4:	eef0 9a67 	vmov.f32	s19, s15
 8004cd8:	4682      	mov	sl, r0
 8004cda:	f7fb fa81 	bl	80001e0 <__aeabi_dsub>
 8004cde:	4652      	mov	r2, sl
 8004ce0:	4606      	mov	r6, r0
 8004ce2:	460f      	mov	r7, r1
 8004ce4:	462b      	mov	r3, r5
 8004ce6:	ec51 0b19 	vmov	r0, r1, d9
 8004cea:	f7fb fa7b 	bl	80001e4 <__adddf3>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	49bb      	ldr	r1, [pc, #748]	; (8004fe4 <__ieee754_pow+0x76c>)
 8004cf6:	f7fb fd55 	bl	80007a4 <__aeabi_ddiv>
 8004cfa:	ec41 0b1a 	vmov	d10, r0, r1
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4630      	mov	r0, r6
 8004d04:	4639      	mov	r1, r7
 8004d06:	f7fb fc23 	bl	8000550 <__aeabi_dmul>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d10:	9302      	str	r3, [sp, #8]
 8004d12:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004d16:	46ab      	mov	fp, r5
 8004d18:	106d      	asrs	r5, r5, #1
 8004d1a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004d1e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004d22:	ec41 0b18 	vmov	d8, r0, r1
 8004d26:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	4640      	mov	r0, r8
 8004d2e:	4649      	mov	r1, r9
 8004d30:	4614      	mov	r4, r2
 8004d32:	461d      	mov	r5, r3
 8004d34:	f7fb fc0c 	bl	8000550 <__aeabi_dmul>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	4639      	mov	r1, r7
 8004d40:	f7fb fa4e 	bl	80001e0 <__aeabi_dsub>
 8004d44:	ec53 2b19 	vmov	r2, r3, d9
 8004d48:	4606      	mov	r6, r0
 8004d4a:	460f      	mov	r7, r1
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	4629      	mov	r1, r5
 8004d50:	f7fb fa46 	bl	80001e0 <__aeabi_dsub>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4650      	mov	r0, sl
 8004d5a:	4659      	mov	r1, fp
 8004d5c:	f7fb fa40 	bl	80001e0 <__aeabi_dsub>
 8004d60:	4642      	mov	r2, r8
 8004d62:	464b      	mov	r3, r9
 8004d64:	f7fb fbf4 	bl	8000550 <__aeabi_dmul>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	4639      	mov	r1, r7
 8004d70:	f7fb fa36 	bl	80001e0 <__aeabi_dsub>
 8004d74:	ec53 2b1a 	vmov	r2, r3, d10
 8004d78:	f7fb fbea 	bl	8000550 <__aeabi_dmul>
 8004d7c:	ec53 2b18 	vmov	r2, r3, d8
 8004d80:	ec41 0b19 	vmov	d9, r0, r1
 8004d84:	ec51 0b18 	vmov	r0, r1, d8
 8004d88:	f7fb fbe2 	bl	8000550 <__aeabi_dmul>
 8004d8c:	a37c      	add	r3, pc, #496	; (adr r3, 8004f80 <__ieee754_pow+0x708>)
 8004d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d92:	4604      	mov	r4, r0
 8004d94:	460d      	mov	r5, r1
 8004d96:	f7fb fbdb 	bl	8000550 <__aeabi_dmul>
 8004d9a:	a37b      	add	r3, pc, #492	; (adr r3, 8004f88 <__ieee754_pow+0x710>)
 8004d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da0:	f7fb fa20 	bl	80001e4 <__adddf3>
 8004da4:	4622      	mov	r2, r4
 8004da6:	462b      	mov	r3, r5
 8004da8:	f7fb fbd2 	bl	8000550 <__aeabi_dmul>
 8004dac:	a378      	add	r3, pc, #480	; (adr r3, 8004f90 <__ieee754_pow+0x718>)
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	f7fb fa17 	bl	80001e4 <__adddf3>
 8004db6:	4622      	mov	r2, r4
 8004db8:	462b      	mov	r3, r5
 8004dba:	f7fb fbc9 	bl	8000550 <__aeabi_dmul>
 8004dbe:	a376      	add	r3, pc, #472	; (adr r3, 8004f98 <__ieee754_pow+0x720>)
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	f7fb fa0e 	bl	80001e4 <__adddf3>
 8004dc8:	4622      	mov	r2, r4
 8004dca:	462b      	mov	r3, r5
 8004dcc:	f7fb fbc0 	bl	8000550 <__aeabi_dmul>
 8004dd0:	a373      	add	r3, pc, #460	; (adr r3, 8004fa0 <__ieee754_pow+0x728>)
 8004dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd6:	f7fb fa05 	bl	80001e4 <__adddf3>
 8004dda:	4622      	mov	r2, r4
 8004ddc:	462b      	mov	r3, r5
 8004dde:	f7fb fbb7 	bl	8000550 <__aeabi_dmul>
 8004de2:	a371      	add	r3, pc, #452	; (adr r3, 8004fa8 <__ieee754_pow+0x730>)
 8004de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de8:	f7fb f9fc 	bl	80001e4 <__adddf3>
 8004dec:	4622      	mov	r2, r4
 8004dee:	4606      	mov	r6, r0
 8004df0:	460f      	mov	r7, r1
 8004df2:	462b      	mov	r3, r5
 8004df4:	4620      	mov	r0, r4
 8004df6:	4629      	mov	r1, r5
 8004df8:	f7fb fbaa 	bl	8000550 <__aeabi_dmul>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4630      	mov	r0, r6
 8004e02:	4639      	mov	r1, r7
 8004e04:	f7fb fba4 	bl	8000550 <__aeabi_dmul>
 8004e08:	4642      	mov	r2, r8
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	460d      	mov	r5, r1
 8004e0e:	464b      	mov	r3, r9
 8004e10:	ec51 0b18 	vmov	r0, r1, d8
 8004e14:	f7fb f9e6 	bl	80001e4 <__adddf3>
 8004e18:	ec53 2b19 	vmov	r2, r3, d9
 8004e1c:	f7fb fb98 	bl	8000550 <__aeabi_dmul>
 8004e20:	4622      	mov	r2, r4
 8004e22:	462b      	mov	r3, r5
 8004e24:	f7fb f9de 	bl	80001e4 <__adddf3>
 8004e28:	4642      	mov	r2, r8
 8004e2a:	4682      	mov	sl, r0
 8004e2c:	468b      	mov	fp, r1
 8004e2e:	464b      	mov	r3, r9
 8004e30:	4640      	mov	r0, r8
 8004e32:	4649      	mov	r1, r9
 8004e34:	f7fb fb8c 	bl	8000550 <__aeabi_dmul>
 8004e38:	4b6b      	ldr	r3, [pc, #428]	; (8004fe8 <__ieee754_pow+0x770>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	4606      	mov	r6, r0
 8004e3e:	460f      	mov	r7, r1
 8004e40:	f7fb f9d0 	bl	80001e4 <__adddf3>
 8004e44:	4652      	mov	r2, sl
 8004e46:	465b      	mov	r3, fp
 8004e48:	f7fb f9cc 	bl	80001e4 <__adddf3>
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	4604      	mov	r4, r0
 8004e50:	460d      	mov	r5, r1
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	4640      	mov	r0, r8
 8004e58:	4649      	mov	r1, r9
 8004e5a:	f7fb fb79 	bl	8000550 <__aeabi_dmul>
 8004e5e:	4b62      	ldr	r3, [pc, #392]	; (8004fe8 <__ieee754_pow+0x770>)
 8004e60:	4680      	mov	r8, r0
 8004e62:	4689      	mov	r9, r1
 8004e64:	2200      	movs	r2, #0
 8004e66:	4620      	mov	r0, r4
 8004e68:	4629      	mov	r1, r5
 8004e6a:	f7fb f9b9 	bl	80001e0 <__aeabi_dsub>
 8004e6e:	4632      	mov	r2, r6
 8004e70:	463b      	mov	r3, r7
 8004e72:	f7fb f9b5 	bl	80001e0 <__aeabi_dsub>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4650      	mov	r0, sl
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	f7fb f9af 	bl	80001e0 <__aeabi_dsub>
 8004e82:	ec53 2b18 	vmov	r2, r3, d8
 8004e86:	f7fb fb63 	bl	8000550 <__aeabi_dmul>
 8004e8a:	4622      	mov	r2, r4
 8004e8c:	4606      	mov	r6, r0
 8004e8e:	460f      	mov	r7, r1
 8004e90:	462b      	mov	r3, r5
 8004e92:	ec51 0b19 	vmov	r0, r1, d9
 8004e96:	f7fb fb5b 	bl	8000550 <__aeabi_dmul>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	4639      	mov	r1, r7
 8004ea2:	f7fb f99f 	bl	80001e4 <__adddf3>
 8004ea6:	4606      	mov	r6, r0
 8004ea8:	460f      	mov	r7, r1
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4640      	mov	r0, r8
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	f7fb f997 	bl	80001e4 <__adddf3>
 8004eb6:	a33e      	add	r3, pc, #248	; (adr r3, 8004fb0 <__ieee754_pow+0x738>)
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	460d      	mov	r5, r1
 8004ec2:	f7fb fb45 	bl	8000550 <__aeabi_dmul>
 8004ec6:	4642      	mov	r2, r8
 8004ec8:	ec41 0b18 	vmov	d8, r0, r1
 8004ecc:	464b      	mov	r3, r9
 8004ece:	4620      	mov	r0, r4
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	f7fb f985 	bl	80001e0 <__aeabi_dsub>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4630      	mov	r0, r6
 8004edc:	4639      	mov	r1, r7
 8004ede:	f7fb f97f 	bl	80001e0 <__aeabi_dsub>
 8004ee2:	a335      	add	r3, pc, #212	; (adr r3, 8004fb8 <__ieee754_pow+0x740>)
 8004ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee8:	f7fb fb32 	bl	8000550 <__aeabi_dmul>
 8004eec:	a334      	add	r3, pc, #208	; (adr r3, 8004fc0 <__ieee754_pow+0x748>)
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	460f      	mov	r7, r1
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	4629      	mov	r1, r5
 8004efa:	f7fb fb29 	bl	8000550 <__aeabi_dmul>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4630      	mov	r0, r6
 8004f04:	4639      	mov	r1, r7
 8004f06:	f7fb f96d 	bl	80001e4 <__adddf3>
 8004f0a:	9a07      	ldr	r2, [sp, #28]
 8004f0c:	4b37      	ldr	r3, [pc, #220]	; (8004fec <__ieee754_pow+0x774>)
 8004f0e:	4413      	add	r3, r2
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	f7fb f966 	bl	80001e4 <__adddf3>
 8004f18:	4682      	mov	sl, r0
 8004f1a:	9805      	ldr	r0, [sp, #20]
 8004f1c:	468b      	mov	fp, r1
 8004f1e:	f7fb faad 	bl	800047c <__aeabi_i2d>
 8004f22:	9a07      	ldr	r2, [sp, #28]
 8004f24:	4b32      	ldr	r3, [pc, #200]	; (8004ff0 <__ieee754_pow+0x778>)
 8004f26:	4413      	add	r3, r2
 8004f28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f2c:	4606      	mov	r6, r0
 8004f2e:	460f      	mov	r7, r1
 8004f30:	4652      	mov	r2, sl
 8004f32:	465b      	mov	r3, fp
 8004f34:	ec51 0b18 	vmov	r0, r1, d8
 8004f38:	f7fb f954 	bl	80001e4 <__adddf3>
 8004f3c:	4642      	mov	r2, r8
 8004f3e:	464b      	mov	r3, r9
 8004f40:	f7fb f950 	bl	80001e4 <__adddf3>
 8004f44:	4632      	mov	r2, r6
 8004f46:	463b      	mov	r3, r7
 8004f48:	f7fb f94c 	bl	80001e4 <__adddf3>
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	4632      	mov	r2, r6
 8004f50:	463b      	mov	r3, r7
 8004f52:	4604      	mov	r4, r0
 8004f54:	460d      	mov	r5, r1
 8004f56:	f7fb f943 	bl	80001e0 <__aeabi_dsub>
 8004f5a:	4642      	mov	r2, r8
 8004f5c:	464b      	mov	r3, r9
 8004f5e:	f7fb f93f 	bl	80001e0 <__aeabi_dsub>
 8004f62:	ec53 2b18 	vmov	r2, r3, d8
 8004f66:	f7fb f93b 	bl	80001e0 <__aeabi_dsub>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4650      	mov	r0, sl
 8004f70:	4659      	mov	r1, fp
 8004f72:	e610      	b.n	8004b96 <__ieee754_pow+0x31e>
 8004f74:	2401      	movs	r4, #1
 8004f76:	e6a1      	b.n	8004cbc <__ieee754_pow+0x444>
 8004f78:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004fc8 <__ieee754_pow+0x750>
 8004f7c:	e617      	b.n	8004bae <__ieee754_pow+0x336>
 8004f7e:	bf00      	nop
 8004f80:	4a454eef 	.word	0x4a454eef
 8004f84:	3fca7e28 	.word	0x3fca7e28
 8004f88:	93c9db65 	.word	0x93c9db65
 8004f8c:	3fcd864a 	.word	0x3fcd864a
 8004f90:	a91d4101 	.word	0xa91d4101
 8004f94:	3fd17460 	.word	0x3fd17460
 8004f98:	518f264d 	.word	0x518f264d
 8004f9c:	3fd55555 	.word	0x3fd55555
 8004fa0:	db6fabff 	.word	0xdb6fabff
 8004fa4:	3fdb6db6 	.word	0x3fdb6db6
 8004fa8:	33333303 	.word	0x33333303
 8004fac:	3fe33333 	.word	0x3fe33333
 8004fb0:	e0000000 	.word	0xe0000000
 8004fb4:	3feec709 	.word	0x3feec709
 8004fb8:	dc3a03fd 	.word	0xdc3a03fd
 8004fbc:	3feec709 	.word	0x3feec709
 8004fc0:	145b01f5 	.word	0x145b01f5
 8004fc4:	be3e2fe0 	.word	0xbe3e2fe0
 8004fc8:	00000000 	.word	0x00000000
 8004fcc:	3ff00000 	.word	0x3ff00000
 8004fd0:	7ff00000 	.word	0x7ff00000
 8004fd4:	43400000 	.word	0x43400000
 8004fd8:	0003988e 	.word	0x0003988e
 8004fdc:	000bb679 	.word	0x000bb679
 8004fe0:	08005600 	.word	0x08005600
 8004fe4:	3ff00000 	.word	0x3ff00000
 8004fe8:	40080000 	.word	0x40080000
 8004fec:	08005620 	.word	0x08005620
 8004ff0:	08005610 	.word	0x08005610
 8004ff4:	a3b5      	add	r3, pc, #724	; (adr r3, 80052cc <__ieee754_pow+0xa54>)
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	4640      	mov	r0, r8
 8004ffc:	4649      	mov	r1, r9
 8004ffe:	f7fb f8f1 	bl	80001e4 <__adddf3>
 8005002:	4622      	mov	r2, r4
 8005004:	ec41 0b1a 	vmov	d10, r0, r1
 8005008:	462b      	mov	r3, r5
 800500a:	4630      	mov	r0, r6
 800500c:	4639      	mov	r1, r7
 800500e:	f7fb f8e7 	bl	80001e0 <__aeabi_dsub>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	ec51 0b1a 	vmov	r0, r1, d10
 800501a:	f7fb fd29 	bl	8000a70 <__aeabi_dcmpgt>
 800501e:	2800      	cmp	r0, #0
 8005020:	f47f ae04 	bne.w	8004c2c <__ieee754_pow+0x3b4>
 8005024:	4aa4      	ldr	r2, [pc, #656]	; (80052b8 <__ieee754_pow+0xa40>)
 8005026:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800502a:	4293      	cmp	r3, r2
 800502c:	f340 8108 	ble.w	8005240 <__ieee754_pow+0x9c8>
 8005030:	151b      	asrs	r3, r3, #20
 8005032:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005036:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800503a:	fa4a f303 	asr.w	r3, sl, r3
 800503e:	445b      	add	r3, fp
 8005040:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005044:	4e9d      	ldr	r6, [pc, #628]	; (80052bc <__ieee754_pow+0xa44>)
 8005046:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800504a:	4116      	asrs	r6, r2
 800504c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005050:	2000      	movs	r0, #0
 8005052:	ea23 0106 	bic.w	r1, r3, r6
 8005056:	f1c2 0214 	rsb	r2, r2, #20
 800505a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800505e:	fa4a fa02 	asr.w	sl, sl, r2
 8005062:	f1bb 0f00 	cmp.w	fp, #0
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4620      	mov	r0, r4
 800506c:	4629      	mov	r1, r5
 800506e:	bfb8      	it	lt
 8005070:	f1ca 0a00 	rsblt	sl, sl, #0
 8005074:	f7fb f8b4 	bl	80001e0 <__aeabi_dsub>
 8005078:	ec41 0b19 	vmov	d9, r0, r1
 800507c:	4642      	mov	r2, r8
 800507e:	464b      	mov	r3, r9
 8005080:	ec51 0b19 	vmov	r0, r1, d9
 8005084:	f7fb f8ae 	bl	80001e4 <__adddf3>
 8005088:	a37b      	add	r3, pc, #492	; (adr r3, 8005278 <__ieee754_pow+0xa00>)
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	2000      	movs	r0, #0
 8005090:	4604      	mov	r4, r0
 8005092:	460d      	mov	r5, r1
 8005094:	f7fb fa5c 	bl	8000550 <__aeabi_dmul>
 8005098:	ec53 2b19 	vmov	r2, r3, d9
 800509c:	4606      	mov	r6, r0
 800509e:	460f      	mov	r7, r1
 80050a0:	4620      	mov	r0, r4
 80050a2:	4629      	mov	r1, r5
 80050a4:	f7fb f89c 	bl	80001e0 <__aeabi_dsub>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4640      	mov	r0, r8
 80050ae:	4649      	mov	r1, r9
 80050b0:	f7fb f896 	bl	80001e0 <__aeabi_dsub>
 80050b4:	a372      	add	r3, pc, #456	; (adr r3, 8005280 <__ieee754_pow+0xa08>)
 80050b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ba:	f7fb fa49 	bl	8000550 <__aeabi_dmul>
 80050be:	a372      	add	r3, pc, #456	; (adr r3, 8005288 <__ieee754_pow+0xa10>)
 80050c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c4:	4680      	mov	r8, r0
 80050c6:	4689      	mov	r9, r1
 80050c8:	4620      	mov	r0, r4
 80050ca:	4629      	mov	r1, r5
 80050cc:	f7fb fa40 	bl	8000550 <__aeabi_dmul>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4640      	mov	r0, r8
 80050d6:	4649      	mov	r1, r9
 80050d8:	f7fb f884 	bl	80001e4 <__adddf3>
 80050dc:	4604      	mov	r4, r0
 80050de:	460d      	mov	r5, r1
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4630      	mov	r0, r6
 80050e6:	4639      	mov	r1, r7
 80050e8:	f7fb f87c 	bl	80001e4 <__adddf3>
 80050ec:	4632      	mov	r2, r6
 80050ee:	463b      	mov	r3, r7
 80050f0:	4680      	mov	r8, r0
 80050f2:	4689      	mov	r9, r1
 80050f4:	f7fb f874 	bl	80001e0 <__aeabi_dsub>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4620      	mov	r0, r4
 80050fe:	4629      	mov	r1, r5
 8005100:	f7fb f86e 	bl	80001e0 <__aeabi_dsub>
 8005104:	4642      	mov	r2, r8
 8005106:	4606      	mov	r6, r0
 8005108:	460f      	mov	r7, r1
 800510a:	464b      	mov	r3, r9
 800510c:	4640      	mov	r0, r8
 800510e:	4649      	mov	r1, r9
 8005110:	f7fb fa1e 	bl	8000550 <__aeabi_dmul>
 8005114:	a35e      	add	r3, pc, #376	; (adr r3, 8005290 <__ieee754_pow+0xa18>)
 8005116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511a:	4604      	mov	r4, r0
 800511c:	460d      	mov	r5, r1
 800511e:	f7fb fa17 	bl	8000550 <__aeabi_dmul>
 8005122:	a35d      	add	r3, pc, #372	; (adr r3, 8005298 <__ieee754_pow+0xa20>)
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	f7fb f85a 	bl	80001e0 <__aeabi_dsub>
 800512c:	4622      	mov	r2, r4
 800512e:	462b      	mov	r3, r5
 8005130:	f7fb fa0e 	bl	8000550 <__aeabi_dmul>
 8005134:	a35a      	add	r3, pc, #360	; (adr r3, 80052a0 <__ieee754_pow+0xa28>)
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	f7fb f853 	bl	80001e4 <__adddf3>
 800513e:	4622      	mov	r2, r4
 8005140:	462b      	mov	r3, r5
 8005142:	f7fb fa05 	bl	8000550 <__aeabi_dmul>
 8005146:	a358      	add	r3, pc, #352	; (adr r3, 80052a8 <__ieee754_pow+0xa30>)
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	f7fb f848 	bl	80001e0 <__aeabi_dsub>
 8005150:	4622      	mov	r2, r4
 8005152:	462b      	mov	r3, r5
 8005154:	f7fb f9fc 	bl	8000550 <__aeabi_dmul>
 8005158:	a355      	add	r3, pc, #340	; (adr r3, 80052b0 <__ieee754_pow+0xa38>)
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	f7fb f841 	bl	80001e4 <__adddf3>
 8005162:	4622      	mov	r2, r4
 8005164:	462b      	mov	r3, r5
 8005166:	f7fb f9f3 	bl	8000550 <__aeabi_dmul>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4640      	mov	r0, r8
 8005170:	4649      	mov	r1, r9
 8005172:	f7fb f835 	bl	80001e0 <__aeabi_dsub>
 8005176:	4604      	mov	r4, r0
 8005178:	460d      	mov	r5, r1
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	4640      	mov	r0, r8
 8005180:	4649      	mov	r1, r9
 8005182:	f7fb f9e5 	bl	8000550 <__aeabi_dmul>
 8005186:	2200      	movs	r2, #0
 8005188:	ec41 0b19 	vmov	d9, r0, r1
 800518c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005190:	4620      	mov	r0, r4
 8005192:	4629      	mov	r1, r5
 8005194:	f7fb f824 	bl	80001e0 <__aeabi_dsub>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	ec51 0b19 	vmov	r0, r1, d9
 80051a0:	f7fb fb00 	bl	80007a4 <__aeabi_ddiv>
 80051a4:	4632      	mov	r2, r6
 80051a6:	4604      	mov	r4, r0
 80051a8:	460d      	mov	r5, r1
 80051aa:	463b      	mov	r3, r7
 80051ac:	4640      	mov	r0, r8
 80051ae:	4649      	mov	r1, r9
 80051b0:	f7fb f9ce 	bl	8000550 <__aeabi_dmul>
 80051b4:	4632      	mov	r2, r6
 80051b6:	463b      	mov	r3, r7
 80051b8:	f7fb f814 	bl	80001e4 <__adddf3>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4620      	mov	r0, r4
 80051c2:	4629      	mov	r1, r5
 80051c4:	f7fb f80c 	bl	80001e0 <__aeabi_dsub>
 80051c8:	4642      	mov	r2, r8
 80051ca:	464b      	mov	r3, r9
 80051cc:	f7fb f808 	bl	80001e0 <__aeabi_dsub>
 80051d0:	460b      	mov	r3, r1
 80051d2:	4602      	mov	r2, r0
 80051d4:	493a      	ldr	r1, [pc, #232]	; (80052c0 <__ieee754_pow+0xa48>)
 80051d6:	2000      	movs	r0, #0
 80051d8:	f7fb f802 	bl	80001e0 <__aeabi_dsub>
 80051dc:	ec41 0b10 	vmov	d0, r0, r1
 80051e0:	ee10 3a90 	vmov	r3, s1
 80051e4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80051e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ec:	da2b      	bge.n	8005246 <__ieee754_pow+0x9ce>
 80051ee:	4650      	mov	r0, sl
 80051f0:	f000 f966 	bl	80054c0 <scalbn>
 80051f4:	ec51 0b10 	vmov	r0, r1, d0
 80051f8:	ec53 2b18 	vmov	r2, r3, d8
 80051fc:	f7ff bbed 	b.w	80049da <__ieee754_pow+0x162>
 8005200:	4b30      	ldr	r3, [pc, #192]	; (80052c4 <__ieee754_pow+0xa4c>)
 8005202:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005206:	429e      	cmp	r6, r3
 8005208:	f77f af0c 	ble.w	8005024 <__ieee754_pow+0x7ac>
 800520c:	4b2e      	ldr	r3, [pc, #184]	; (80052c8 <__ieee754_pow+0xa50>)
 800520e:	440b      	add	r3, r1
 8005210:	4303      	orrs	r3, r0
 8005212:	d009      	beq.n	8005228 <__ieee754_pow+0x9b0>
 8005214:	ec51 0b18 	vmov	r0, r1, d8
 8005218:	2200      	movs	r2, #0
 800521a:	2300      	movs	r3, #0
 800521c:	f7fb fc0a 	bl	8000a34 <__aeabi_dcmplt>
 8005220:	3800      	subs	r0, #0
 8005222:	bf18      	it	ne
 8005224:	2001      	movne	r0, #1
 8005226:	e447      	b.n	8004ab8 <__ieee754_pow+0x240>
 8005228:	4622      	mov	r2, r4
 800522a:	462b      	mov	r3, r5
 800522c:	f7fa ffd8 	bl	80001e0 <__aeabi_dsub>
 8005230:	4642      	mov	r2, r8
 8005232:	464b      	mov	r3, r9
 8005234:	f7fb fc12 	bl	8000a5c <__aeabi_dcmpge>
 8005238:	2800      	cmp	r0, #0
 800523a:	f43f aef3 	beq.w	8005024 <__ieee754_pow+0x7ac>
 800523e:	e7e9      	b.n	8005214 <__ieee754_pow+0x99c>
 8005240:	f04f 0a00 	mov.w	sl, #0
 8005244:	e71a      	b.n	800507c <__ieee754_pow+0x804>
 8005246:	ec51 0b10 	vmov	r0, r1, d0
 800524a:	4619      	mov	r1, r3
 800524c:	e7d4      	b.n	80051f8 <__ieee754_pow+0x980>
 800524e:	491c      	ldr	r1, [pc, #112]	; (80052c0 <__ieee754_pow+0xa48>)
 8005250:	2000      	movs	r0, #0
 8005252:	f7ff bb30 	b.w	80048b6 <__ieee754_pow+0x3e>
 8005256:	2000      	movs	r0, #0
 8005258:	2100      	movs	r1, #0
 800525a:	f7ff bb2c 	b.w	80048b6 <__ieee754_pow+0x3e>
 800525e:	4630      	mov	r0, r6
 8005260:	4639      	mov	r1, r7
 8005262:	f7ff bb28 	b.w	80048b6 <__ieee754_pow+0x3e>
 8005266:	9204      	str	r2, [sp, #16]
 8005268:	f7ff bb7a 	b.w	8004960 <__ieee754_pow+0xe8>
 800526c:	2300      	movs	r3, #0
 800526e:	f7ff bb64 	b.w	800493a <__ieee754_pow+0xc2>
 8005272:	bf00      	nop
 8005274:	f3af 8000 	nop.w
 8005278:	00000000 	.word	0x00000000
 800527c:	3fe62e43 	.word	0x3fe62e43
 8005280:	fefa39ef 	.word	0xfefa39ef
 8005284:	3fe62e42 	.word	0x3fe62e42
 8005288:	0ca86c39 	.word	0x0ca86c39
 800528c:	be205c61 	.word	0xbe205c61
 8005290:	72bea4d0 	.word	0x72bea4d0
 8005294:	3e663769 	.word	0x3e663769
 8005298:	c5d26bf1 	.word	0xc5d26bf1
 800529c:	3ebbbd41 	.word	0x3ebbbd41
 80052a0:	af25de2c 	.word	0xaf25de2c
 80052a4:	3f11566a 	.word	0x3f11566a
 80052a8:	16bebd93 	.word	0x16bebd93
 80052ac:	3f66c16c 	.word	0x3f66c16c
 80052b0:	5555553e 	.word	0x5555553e
 80052b4:	3fc55555 	.word	0x3fc55555
 80052b8:	3fe00000 	.word	0x3fe00000
 80052bc:	000fffff 	.word	0x000fffff
 80052c0:	3ff00000 	.word	0x3ff00000
 80052c4:	4090cbff 	.word	0x4090cbff
 80052c8:	3f6f3400 	.word	0x3f6f3400
 80052cc:	652b82fe 	.word	0x652b82fe
 80052d0:	3c971547 	.word	0x3c971547

080052d4 <__ieee754_sqrt>:
 80052d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d8:	ec55 4b10 	vmov	r4, r5, d0
 80052dc:	4e55      	ldr	r6, [pc, #340]	; (8005434 <__ieee754_sqrt+0x160>)
 80052de:	43ae      	bics	r6, r5
 80052e0:	ee10 0a10 	vmov	r0, s0
 80052e4:	ee10 3a10 	vmov	r3, s0
 80052e8:	462a      	mov	r2, r5
 80052ea:	4629      	mov	r1, r5
 80052ec:	d110      	bne.n	8005310 <__ieee754_sqrt+0x3c>
 80052ee:	ee10 2a10 	vmov	r2, s0
 80052f2:	462b      	mov	r3, r5
 80052f4:	f7fb f92c 	bl	8000550 <__aeabi_dmul>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4620      	mov	r0, r4
 80052fe:	4629      	mov	r1, r5
 8005300:	f7fa ff70 	bl	80001e4 <__adddf3>
 8005304:	4604      	mov	r4, r0
 8005306:	460d      	mov	r5, r1
 8005308:	ec45 4b10 	vmov	d0, r4, r5
 800530c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005310:	2d00      	cmp	r5, #0
 8005312:	dc10      	bgt.n	8005336 <__ieee754_sqrt+0x62>
 8005314:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005318:	4330      	orrs	r0, r6
 800531a:	d0f5      	beq.n	8005308 <__ieee754_sqrt+0x34>
 800531c:	b15d      	cbz	r5, 8005336 <__ieee754_sqrt+0x62>
 800531e:	ee10 2a10 	vmov	r2, s0
 8005322:	462b      	mov	r3, r5
 8005324:	ee10 0a10 	vmov	r0, s0
 8005328:	f7fa ff5a 	bl	80001e0 <__aeabi_dsub>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	f7fb fa38 	bl	80007a4 <__aeabi_ddiv>
 8005334:	e7e6      	b.n	8005304 <__ieee754_sqrt+0x30>
 8005336:	1512      	asrs	r2, r2, #20
 8005338:	d074      	beq.n	8005424 <__ieee754_sqrt+0x150>
 800533a:	07d4      	lsls	r4, r2, #31
 800533c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005340:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005348:	bf5e      	ittt	pl
 800534a:	0fda      	lsrpl	r2, r3, #31
 800534c:	005b      	lslpl	r3, r3, #1
 800534e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005352:	2400      	movs	r4, #0
 8005354:	0fda      	lsrs	r2, r3, #31
 8005356:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800535a:	107f      	asrs	r7, r7, #1
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	2516      	movs	r5, #22
 8005360:	4620      	mov	r0, r4
 8005362:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005366:	1886      	adds	r6, r0, r2
 8005368:	428e      	cmp	r6, r1
 800536a:	bfde      	ittt	le
 800536c:	1b89      	suble	r1, r1, r6
 800536e:	18b0      	addle	r0, r6, r2
 8005370:	18a4      	addle	r4, r4, r2
 8005372:	0049      	lsls	r1, r1, #1
 8005374:	3d01      	subs	r5, #1
 8005376:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800537a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800537e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005382:	d1f0      	bne.n	8005366 <__ieee754_sqrt+0x92>
 8005384:	462a      	mov	r2, r5
 8005386:	f04f 0e20 	mov.w	lr, #32
 800538a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800538e:	4281      	cmp	r1, r0
 8005390:	eb06 0c05 	add.w	ip, r6, r5
 8005394:	dc02      	bgt.n	800539c <__ieee754_sqrt+0xc8>
 8005396:	d113      	bne.n	80053c0 <__ieee754_sqrt+0xec>
 8005398:	459c      	cmp	ip, r3
 800539a:	d811      	bhi.n	80053c0 <__ieee754_sqrt+0xec>
 800539c:	f1bc 0f00 	cmp.w	ip, #0
 80053a0:	eb0c 0506 	add.w	r5, ip, r6
 80053a4:	da43      	bge.n	800542e <__ieee754_sqrt+0x15a>
 80053a6:	2d00      	cmp	r5, #0
 80053a8:	db41      	blt.n	800542e <__ieee754_sqrt+0x15a>
 80053aa:	f100 0801 	add.w	r8, r0, #1
 80053ae:	1a09      	subs	r1, r1, r0
 80053b0:	459c      	cmp	ip, r3
 80053b2:	bf88      	it	hi
 80053b4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80053b8:	eba3 030c 	sub.w	r3, r3, ip
 80053bc:	4432      	add	r2, r6
 80053be:	4640      	mov	r0, r8
 80053c0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80053c4:	f1be 0e01 	subs.w	lr, lr, #1
 80053c8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80053cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80053d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80053d4:	d1db      	bne.n	800538e <__ieee754_sqrt+0xba>
 80053d6:	430b      	orrs	r3, r1
 80053d8:	d006      	beq.n	80053e8 <__ieee754_sqrt+0x114>
 80053da:	1c50      	adds	r0, r2, #1
 80053dc:	bf13      	iteet	ne
 80053de:	3201      	addne	r2, #1
 80053e0:	3401      	addeq	r4, #1
 80053e2:	4672      	moveq	r2, lr
 80053e4:	f022 0201 	bicne.w	r2, r2, #1
 80053e8:	1063      	asrs	r3, r4, #1
 80053ea:	0852      	lsrs	r2, r2, #1
 80053ec:	07e1      	lsls	r1, r4, #31
 80053ee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80053f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80053f6:	bf48      	it	mi
 80053f8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80053fc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005400:	4614      	mov	r4, r2
 8005402:	e781      	b.n	8005308 <__ieee754_sqrt+0x34>
 8005404:	0ad9      	lsrs	r1, r3, #11
 8005406:	3815      	subs	r0, #21
 8005408:	055b      	lsls	r3, r3, #21
 800540a:	2900      	cmp	r1, #0
 800540c:	d0fa      	beq.n	8005404 <__ieee754_sqrt+0x130>
 800540e:	02cd      	lsls	r5, r1, #11
 8005410:	d50a      	bpl.n	8005428 <__ieee754_sqrt+0x154>
 8005412:	f1c2 0420 	rsb	r4, r2, #32
 8005416:	fa23 f404 	lsr.w	r4, r3, r4
 800541a:	1e55      	subs	r5, r2, #1
 800541c:	4093      	lsls	r3, r2
 800541e:	4321      	orrs	r1, r4
 8005420:	1b42      	subs	r2, r0, r5
 8005422:	e78a      	b.n	800533a <__ieee754_sqrt+0x66>
 8005424:	4610      	mov	r0, r2
 8005426:	e7f0      	b.n	800540a <__ieee754_sqrt+0x136>
 8005428:	0049      	lsls	r1, r1, #1
 800542a:	3201      	adds	r2, #1
 800542c:	e7ef      	b.n	800540e <__ieee754_sqrt+0x13a>
 800542e:	4680      	mov	r8, r0
 8005430:	e7bd      	b.n	80053ae <__ieee754_sqrt+0xda>
 8005432:	bf00      	nop
 8005434:	7ff00000 	.word	0x7ff00000

08005438 <with_errno>:
 8005438:	b570      	push	{r4, r5, r6, lr}
 800543a:	4604      	mov	r4, r0
 800543c:	460d      	mov	r5, r1
 800543e:	4616      	mov	r6, r2
 8005440:	f7ff f978 	bl	8004734 <__errno>
 8005444:	4629      	mov	r1, r5
 8005446:	6006      	str	r6, [r0, #0]
 8005448:	4620      	mov	r0, r4
 800544a:	bd70      	pop	{r4, r5, r6, pc}

0800544c <xflow>:
 800544c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800544e:	4614      	mov	r4, r2
 8005450:	461d      	mov	r5, r3
 8005452:	b108      	cbz	r0, 8005458 <xflow+0xc>
 8005454:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005458:	e9cd 2300 	strd	r2, r3, [sp]
 800545c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005460:	4620      	mov	r0, r4
 8005462:	4629      	mov	r1, r5
 8005464:	f7fb f874 	bl	8000550 <__aeabi_dmul>
 8005468:	2222      	movs	r2, #34	; 0x22
 800546a:	b003      	add	sp, #12
 800546c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005470:	f7ff bfe2 	b.w	8005438 <with_errno>

08005474 <__math_uflow>:
 8005474:	b508      	push	{r3, lr}
 8005476:	2200      	movs	r2, #0
 8005478:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800547c:	f7ff ffe6 	bl	800544c <xflow>
 8005480:	ec41 0b10 	vmov	d0, r0, r1
 8005484:	bd08      	pop	{r3, pc}

08005486 <__math_oflow>:
 8005486:	b508      	push	{r3, lr}
 8005488:	2200      	movs	r2, #0
 800548a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800548e:	f7ff ffdd 	bl	800544c <xflow>
 8005492:	ec41 0b10 	vmov	d0, r0, r1
 8005496:	bd08      	pop	{r3, pc}

08005498 <fabs>:
 8005498:	ec51 0b10 	vmov	r0, r1, d0
 800549c:	ee10 2a10 	vmov	r2, s0
 80054a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80054a4:	ec43 2b10 	vmov	d0, r2, r3
 80054a8:	4770      	bx	lr

080054aa <finite>:
 80054aa:	b082      	sub	sp, #8
 80054ac:	ed8d 0b00 	vstr	d0, [sp]
 80054b0:	9801      	ldr	r0, [sp, #4]
 80054b2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80054b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80054ba:	0fc0      	lsrs	r0, r0, #31
 80054bc:	b002      	add	sp, #8
 80054be:	4770      	bx	lr

080054c0 <scalbn>:
 80054c0:	b570      	push	{r4, r5, r6, lr}
 80054c2:	ec55 4b10 	vmov	r4, r5, d0
 80054c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80054ca:	4606      	mov	r6, r0
 80054cc:	462b      	mov	r3, r5
 80054ce:	b99a      	cbnz	r2, 80054f8 <scalbn+0x38>
 80054d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80054d4:	4323      	orrs	r3, r4
 80054d6:	d036      	beq.n	8005546 <scalbn+0x86>
 80054d8:	4b39      	ldr	r3, [pc, #228]	; (80055c0 <scalbn+0x100>)
 80054da:	4629      	mov	r1, r5
 80054dc:	ee10 0a10 	vmov	r0, s0
 80054e0:	2200      	movs	r2, #0
 80054e2:	f7fb f835 	bl	8000550 <__aeabi_dmul>
 80054e6:	4b37      	ldr	r3, [pc, #220]	; (80055c4 <scalbn+0x104>)
 80054e8:	429e      	cmp	r6, r3
 80054ea:	4604      	mov	r4, r0
 80054ec:	460d      	mov	r5, r1
 80054ee:	da10      	bge.n	8005512 <scalbn+0x52>
 80054f0:	a32b      	add	r3, pc, #172	; (adr r3, 80055a0 <scalbn+0xe0>)
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	e03a      	b.n	800556e <scalbn+0xae>
 80054f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80054fc:	428a      	cmp	r2, r1
 80054fe:	d10c      	bne.n	800551a <scalbn+0x5a>
 8005500:	ee10 2a10 	vmov	r2, s0
 8005504:	4620      	mov	r0, r4
 8005506:	4629      	mov	r1, r5
 8005508:	f7fa fe6c 	bl	80001e4 <__adddf3>
 800550c:	4604      	mov	r4, r0
 800550e:	460d      	mov	r5, r1
 8005510:	e019      	b.n	8005546 <scalbn+0x86>
 8005512:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005516:	460b      	mov	r3, r1
 8005518:	3a36      	subs	r2, #54	; 0x36
 800551a:	4432      	add	r2, r6
 800551c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005520:	428a      	cmp	r2, r1
 8005522:	dd08      	ble.n	8005536 <scalbn+0x76>
 8005524:	2d00      	cmp	r5, #0
 8005526:	a120      	add	r1, pc, #128	; (adr r1, 80055a8 <scalbn+0xe8>)
 8005528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800552c:	da1c      	bge.n	8005568 <scalbn+0xa8>
 800552e:	a120      	add	r1, pc, #128	; (adr r1, 80055b0 <scalbn+0xf0>)
 8005530:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005534:	e018      	b.n	8005568 <scalbn+0xa8>
 8005536:	2a00      	cmp	r2, #0
 8005538:	dd08      	ble.n	800554c <scalbn+0x8c>
 800553a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800553e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005542:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005546:	ec45 4b10 	vmov	d0, r4, r5
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005550:	da19      	bge.n	8005586 <scalbn+0xc6>
 8005552:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005556:	429e      	cmp	r6, r3
 8005558:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800555c:	dd0a      	ble.n	8005574 <scalbn+0xb4>
 800555e:	a112      	add	r1, pc, #72	; (adr r1, 80055a8 <scalbn+0xe8>)
 8005560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e2      	bne.n	800552e <scalbn+0x6e>
 8005568:	a30f      	add	r3, pc, #60	; (adr r3, 80055a8 <scalbn+0xe8>)
 800556a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556e:	f7fa ffef 	bl	8000550 <__aeabi_dmul>
 8005572:	e7cb      	b.n	800550c <scalbn+0x4c>
 8005574:	a10a      	add	r1, pc, #40	; (adr r1, 80055a0 <scalbn+0xe0>)
 8005576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0b8      	beq.n	80054f0 <scalbn+0x30>
 800557e:	a10e      	add	r1, pc, #56	; (adr r1, 80055b8 <scalbn+0xf8>)
 8005580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005584:	e7b4      	b.n	80054f0 <scalbn+0x30>
 8005586:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800558a:	3236      	adds	r2, #54	; 0x36
 800558c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005590:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005594:	4620      	mov	r0, r4
 8005596:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <scalbn+0x108>)
 8005598:	2200      	movs	r2, #0
 800559a:	e7e8      	b.n	800556e <scalbn+0xae>
 800559c:	f3af 8000 	nop.w
 80055a0:	c2f8f359 	.word	0xc2f8f359
 80055a4:	01a56e1f 	.word	0x01a56e1f
 80055a8:	8800759c 	.word	0x8800759c
 80055ac:	7e37e43c 	.word	0x7e37e43c
 80055b0:	8800759c 	.word	0x8800759c
 80055b4:	fe37e43c 	.word	0xfe37e43c
 80055b8:	c2f8f359 	.word	0xc2f8f359
 80055bc:	81a56e1f 	.word	0x81a56e1f
 80055c0:	43500000 	.word	0x43500000
 80055c4:	ffff3cb0 	.word	0xffff3cb0
 80055c8:	3c900000 	.word	0x3c900000

080055cc <_init>:
 80055cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ce:	bf00      	nop
 80055d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d2:	bc08      	pop	{r3}
 80055d4:	469e      	mov	lr, r3
 80055d6:	4770      	bx	lr

080055d8 <_fini>:
 80055d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055da:	bf00      	nop
 80055dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055de:	bc08      	pop	{r3}
 80055e0:	469e      	mov	lr, r3
 80055e2:	4770      	bx	lr
